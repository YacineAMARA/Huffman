
Huffman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08001bbc  08001bbc  00011bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002080  08002080  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002080  08002080  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002080  08002080  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002080  08002080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002084  08002084  00012084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000060  080020e8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080020e8  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002b3f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d16  00000000  00000000  00022c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002b0  00000000  00000000  00023928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001d8  00000000  00000000  00023bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aee6  00000000  00000000  00023db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000042d1  00000000  00000000  0003ec96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090efc  00000000  00000000  00042f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001014  00000000  00000000  000d3e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d4e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001ba4 	.word	0x08001ba4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08001ba4 	.word	0x08001ba4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <creerFeuille>:
#include <stdlib.h>

uint32_t compte = 0;
/////////////////////////////////////////////////////////////////////////////////////////////////
	void creerFeuille(struct noeud * arbre[256], uint32_t tab[256])
	{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
		for(uint32_t i=0;i<256;i++) //parcourir le tableau
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e04d      	b.n	800035c <creerFeuille+0xac>
		{
			if (tab[i] != 0) //verifier si le est utiliser
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	4413      	add	r3, r2
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d043      	beq.n	8000356 <creerFeuille+0xa6>
			{
				arbre[compte]= malloc(sizeof(struct noeud));
 80002ce:	4b27      	ldr	r3, [pc, #156]	; (800036c <creerFeuille+0xbc>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	18d4      	adds	r4, r2, r3
 80002d8:	2018      	movs	r0, #24
 80002da:	f000 fcc1 	bl	8000c60 <malloc>
 80002de:	4603      	mov	r3, r0
 80002e0:	6023      	str	r3, [r4, #0]
				arbre[compte]->c = i;
 80002e2:	4b22      	ldr	r3, [pc, #136]	; (800036c <creerFeuille+0xbc>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	4413      	add	r3, r2
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	701a      	strb	r2, [r3, #0]
				arbre[compte]->occurence = tab[i];
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	683a      	ldr	r2, [r7, #0]
 80002fa:	441a      	add	r2, r3
 80002fc:	4b1b      	ldr	r3, [pc, #108]	; (800036c <creerFeuille+0xbc>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	6879      	ldr	r1, [r7, #4]
 8000304:	440b      	add	r3, r1
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	605a      	str	r2, [r3, #4]
				arbre[compte]->code = 0;
 800030c:	4b17      	ldr	r3, [pc, #92]	; (800036c <creerFeuille+0xbc>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
				arbre[compte]->tailleCode = 0;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <creerFeuille+0xbc>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	4413      	add	r3, r2
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
				arbre[compte]->droite = NULL;
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <creerFeuille+0xbc>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	4413      	add	r3, r2
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
				arbre[compte]->gauche = NULL;
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <creerFeuille+0xbc>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]

				compte++;
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <creerFeuille+0xbc>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	4a06      	ldr	r2, [pc, #24]	; (800036c <creerFeuille+0xbc>)
 8000354:	6013      	str	r3, [r2, #0]
		for(uint32_t i=0;i<256;i++) //parcourir le tableau
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	3301      	adds	r3, #1
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	2bff      	cmp	r3, #255	; 0xff
 8000360:	d9ae      	bls.n	80002c0 <creerFeuille+0x10>
			}
		}
	}
 8000362:	bf00      	nop
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bd90      	pop	{r4, r7, pc}
 800036c:	2000007c 	.word	0x2000007c

08000370 <trieArbre>:
				}
	return compteur;
	}*/
//////////////////////////////////////////////////////////////////////////////////////////////////
	void trieArbre(struct noeud* arbre[256] , uint32_t taille)
	{
 8000370:	b480      	push	{r7}
 8000372:	b087      	sub	sp, #28
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
		struct noeud* temp;


		    for (uint32_t i = 0; i < taille - 1; i++)
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
 800037e:	e036      	b.n	80003ee <trieArbre+0x7e>
		    {
		        for (uint32_t j = 0; j < taille - i - 1; j++)
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
 8000384:	e029      	b.n	80003da <trieArbre+0x6a>
		        {
		            if (arbre[j]->occurence > arbre[j + 1]->occurence)
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	685a      	ldr	r2, [r3, #4]
 8000392:	693b      	ldr	r3, [r7, #16]
 8000394:	3301      	adds	r3, #1
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	6879      	ldr	r1, [r7, #4]
 800039a:	440b      	add	r3, r1
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d917      	bls.n	80003d4 <trieArbre+0x64>
		            {
		                // Échange des éléments
		                temp = arbre[j];
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	4413      	add	r3, r2
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	60fb      	str	r3, [r7, #12]
		                arbre[j] = arbre[j + 1];
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	3301      	adds	r3, #1
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	441a      	add	r2, r3
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	6879      	ldr	r1, [r7, #4]
 80003c0:	440b      	add	r3, r1
 80003c2:	6812      	ldr	r2, [r2, #0]
 80003c4:	601a      	str	r2, [r3, #0]
		                arbre[j + 1] = temp;
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	3301      	adds	r3, #1
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	4413      	add	r3, r2
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	601a      	str	r2, [r3, #0]
		        for (uint32_t j = 0; j < taille - i - 1; j++)
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	3301      	adds	r3, #1
 80003d8:	613b      	str	r3, [r7, #16]
 80003da:	683a      	ldr	r2, [r7, #0]
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	1ad3      	subs	r3, r2, r3
 80003e0:	3b01      	subs	r3, #1
 80003e2:	693a      	ldr	r2, [r7, #16]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d3ce      	bcc.n	8000386 <trieArbre+0x16>
		    for (uint32_t i = 0; i < taille - 1; i++)
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	3301      	adds	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	3b01      	subs	r3, #1
 80003f2:	697a      	ldr	r2, [r7, #20]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d3c3      	bcc.n	8000380 <trieArbre+0x10>
		            }
		        }
		    }
	}
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
 80003fc:	371c      	adds	r7, #28
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <creeRacine>:
//////////////////////////////////////////////////////////////////////////////////////////////////
	struct noeud* creeRacine( struct noeud * arbre[256], uint32_t taille)
	{
 8000406:	b580      	push	{r7, lr}
 8000408:	b084      	sub	sp, #16
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
 800040e:	6039      	str	r1, [r7, #0]
		struct noeud* racine_a_cree ;



		for (uint32_t i=1 ; i < taille ; i++)
 8000410:	2301      	movs	r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	e039      	b.n	800048a <creeRacine+0x84>
		{
			//trieArbre(arbre , taille);

			racine_a_cree = malloc(sizeof(struct noeud));
 8000416:	2018      	movs	r0, #24
 8000418:	f000 fc22 	bl	8000c60 <malloc>
 800041c:	4603      	mov	r3, r0
 800041e:	60fb      	str	r3, [r7, #12]
			racine_a_cree->c= '!';
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	2221      	movs	r2, #33	; 0x21
 8000424:	701a      	strb	r2, [r3, #0]
			racine_a_cree->occurence = arbre[i-1]->occurence + arbre[i]->occurence ;
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800042c:	3b01      	subs	r3, #1
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	4413      	add	r3, r2
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	685a      	ldr	r2, [r3, #4]
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	6879      	ldr	r1, [r7, #4]
 800043e:	440b      	add	r3, r1
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	441a      	add	r2, r3
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	605a      	str	r2, [r3, #4]
			racine_a_cree->code = 0;
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
			racine_a_cree->tailleCode =0;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
			racine_a_cree->droite = arbre[i] ;
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	615a      	str	r2, [r3, #20]
			racine_a_cree->gauche = arbre[i-1] ;
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800046a:	3b01      	subs	r3, #1
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	4413      	add	r3, r2
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	611a      	str	r2, [r3, #16]
			arbre[i]=racine_a_cree ;
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	4413      	add	r3, r2
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	601a      	str	r2, [r3, #0]
		for (uint32_t i=1 ; i < taille ; i++)
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	3301      	adds	r3, #1
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	429a      	cmp	r2, r3
 8000490:	d3c1      	bcc.n	8000416 <creeRacine+0x10>
		}
		return racine_a_cree ;
 8000492:	68fb      	ldr	r3, [r7, #12]
	}
 8000494:	4618      	mov	r0, r3
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <parcourirArbre>:

		printf("\r\n");
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////
	void parcourirArbre(struct noeud* ptrNoeud)
	{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
		if (ptrNoeud->droite == NULL && ptrNoeud->gauche == NULL)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d116      	bne.n	80004da <parcourirArbre+0x3e>
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	691b      	ldr	r3, [r3, #16]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d112      	bne.n	80004da <parcourirArbre+0x3e>
		{
			printf("Je suis une feuille\r\n");
 80004b4:	4823      	ldr	r0, [pc, #140]	; (8000544 <parcourirArbre+0xa8>)
 80004b6:	f000 fdb7 	bl	8001028 <puts>
			printf("mon caractere initial est %c \r\n",ptrNoeud->c);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	4619      	mov	r1, r3
 80004c0:	4821      	ldr	r0, [pc, #132]	; (8000548 <parcourirArbre+0xac>)
 80004c2:	f000 fd4b 	bl	8000f5c <iprintf>
			printf("mon nombre d'occurences est %d \r\n",ptrNoeud->occurence);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	4619      	mov	r1, r3
 80004cc:	481f      	ldr	r0, [pc, #124]	; (800054c <parcourirArbre+0xb0>)
 80004ce:	f000 fd45 	bl	8000f5c <iprintf>
			printf("\r\n");
 80004d2:	481f      	ldr	r0, [pc, #124]	; (8000550 <parcourirArbre+0xb4>)
 80004d4:	f000 fda8 	bl	8001028 <puts>
 80004d8:	e02f      	b.n	800053a <parcourirArbre+0x9e>
		}

		else
		{
			printf("Je suis un nœud\r\n");
 80004da:	481e      	ldr	r0, [pc, #120]	; (8000554 <parcourirArbre+0xb8>)
 80004dc:	f000 fda4 	bl	8001028 <puts>
			//afficher le noeud
			printf("mon caractere initial est %c mon nombre d'occurences est %d \r\n",ptrNoeud->c ,ptrNoeud->occurence );
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	4619      	mov	r1, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	461a      	mov	r2, r3
 80004ec:	481a      	ldr	r0, [pc, #104]	; (8000558 <parcourirArbre+0xbc>)
 80004ee:	f000 fd35 	bl	8000f5c <iprintf>
			// afficher gauche et droit du noeud
			printf("mon caractere initial droit est %c son nombre d'occurences est %d \r\n",ptrNoeud->droite->c ,ptrNoeud->droite->occurence);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	461a      	mov	r2, r3
 8000502:	4816      	ldr	r0, [pc, #88]	; (800055c <parcourirArbre+0xc0>)
 8000504:	f000 fd2a 	bl	8000f5c <iprintf>
			printf("mon caractere initial gauche est %c son nombre d'occurences est %d \r\n",ptrNoeud->gauche->c ,ptrNoeud->gauche->occurence);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	691b      	ldr	r3, [r3, #16]
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	4619      	mov	r1, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	691b      	ldr	r3, [r3, #16]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	461a      	mov	r2, r3
 8000518:	4811      	ldr	r0, [pc, #68]	; (8000560 <parcourirArbre+0xc4>)
 800051a:	f000 fd1f 	bl	8000f5c <iprintf>
			printf("---------------------\r\n");
 800051e:	4811      	ldr	r0, [pc, #68]	; (8000564 <parcourirArbre+0xc8>)
 8000520:	f000 fd82 	bl	8001028 <puts>

			parcourirArbre (ptrNoeud->gauche); // On va a gauche
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ffb7 	bl	800049c <parcourirArbre>
			parcourirArbre (ptrNoeud->droite); //On va a droite
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ffb2 	bl	800049c <parcourirArbre>


		}
	}
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	08001d2c 	.word	0x08001d2c
 8000548:	08001d44 	.word	0x08001d44
 800054c:	08001d64 	.word	0x08001d64
 8000550:	08001cc4 	.word	0x08001cc4
 8000554:	08001d88 	.word	0x08001d88
 8000558:	08001d9c 	.word	0x08001d9c
 800055c:	08001ddc 	.word	0x08001ddc
 8000560:	08001e24 	.word	0x08001e24
 8000564:	08001e6c 	.word	0x08001e6c

08000568 <afficherFeuilles>:
///////////////////////////////////////////////////////////////////////////////////////////////////////
	void afficherFeuilles(struct noeud* arbre[256] ,uint32_t taille)
	{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b087      	sub	sp, #28
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	    printf("Feuilles de l'arbre de Huffman :\r\n");
 8000572:	481e      	ldr	r0, [pc, #120]	; (80005ec <afficherFeuilles+0x84>)
 8000574:	f000 fd58 	bl	8001028 <puts>
	    printf("Caractere\tOccurrences\tCode\t\tTaille Code\r\n");
 8000578:	481d      	ldr	r0, [pc, #116]	; (80005f0 <afficherFeuilles+0x88>)
 800057a:	f000 fd55 	bl	8001028 <puts>
	    printf("___________________________________________________________\r\n\n");
 800057e:	481d      	ldr	r0, [pc, #116]	; (80005f4 <afficherFeuilles+0x8c>)
 8000580:	f000 fd52 	bl	8001028 <puts>

	    for (int i = 0; i < taille; i++)
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	e022      	b.n	80005d0 <afficherFeuilles+0x68>
	    {
	    	printf("%c\t\t%d\t\t%x\t\t%d\r\n",
	            arbre[i]->c,
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	781b      	ldrb	r3, [r3, #0]
	    	printf("%c\t\t%d\t\t%x\t\t%d\r\n",
 8000596:	461c      	mov	r4, r3
	            arbre[i]->occurence,
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	681b      	ldr	r3, [r3, #0]
	    	printf("%c\t\t%d\t\t%x\t\t%d\r\n",
 80005a2:	6859      	ldr	r1, [r3, #4]
				arbre[i]->code,
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	681b      	ldr	r3, [r3, #0]
	    	printf("%c\t\t%d\t\t%x\t\t%d\r\n",
 80005ae:	6898      	ldr	r0, [r3, #8]
				arbre[i]->tailleCode);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	681b      	ldr	r3, [r3, #0]
	    	printf("%c\t\t%d\t\t%x\t\t%d\r\n",
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4603      	mov	r3, r0
 80005c0:	460a      	mov	r2, r1
 80005c2:	4621      	mov	r1, r4
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <afficherFeuilles+0x90>)
 80005c6:	f000 fcc9 	bl	8000f5c <iprintf>
	    for (int i = 0; i < taille; i++)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3301      	adds	r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d8d8      	bhi.n	800058a <afficherFeuilles+0x22>

	    }
	    printf("___________________________________________________________\r\n");
 80005d8:	4808      	ldr	r0, [pc, #32]	; (80005fc <afficherFeuilles+0x94>)
 80005da:	f000 fd25 	bl	8001028 <puts>
	    printf("\r\n");
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <afficherFeuilles+0x98>)
 80005e0:	f000 fd22 	bl	8001028 <puts>
	}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd90      	pop	{r4, r7, pc}
 80005ec:	08001e84 	.word	0x08001e84
 80005f0:	08001ea8 	.word	0x08001ea8
 80005f4:	08001ed4 	.word	0x08001ed4
 80005f8:	08001f14 	.word	0x08001f14
 80005fc:	08001f28 	.word	0x08001f28
 8000600:	08001cc4 	.word	0x08001cc4

08000604 <LiberationMemoireArbre>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////:
	void LiberationMemoireArbre(struct noeud* ptrNoeud)
	{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	    if (ptrNoeud == NULL) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d00d      	beq.n	800062e <LiberationMemoireArbre+0x2a>
	        return;
	    }
	    LiberationMemoireArbre(ptrNoeud->gauche);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fff4 	bl	8000604 <LiberationMemoireArbre>
	    LiberationMemoireArbre(ptrNoeud->droite);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffef 	bl	8000604 <LiberationMemoireArbre>
	    free(ptrNoeud);
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 fb22 	bl	8000c70 <free>
 800062c:	e000      	b.n	8000630 <LiberationMemoireArbre+0x2c>
	        return;
 800062e:	bf00      	nop
	}
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <creerCode>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void creerCode(struct noeud* ptrNoeud, uint32_t code, uint32_t taille) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
	    if (ptrNoeud == NULL) {
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d040      	beq.n	80006cc <creerCode+0x94>
	        return;
	    }
	    if (ptrNoeud->gauche == NULL && ptrNoeud->droite == NULL) {
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	691b      	ldr	r3, [r3, #16]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d128      	bne.n	80006a4 <creerCode+0x6c>
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d124      	bne.n	80006a4 <creerCode+0x6c>
	        ptrNoeud->tailleCode = taille;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	60da      	str	r2, [r3, #12]
	        ptrNoeud->code = code;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	609a      	str	r2, [r3, #8]
	        printf("Caractere : '%c' \t Code : ", ptrNoeud->c);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4619      	mov	r1, r3
 800066c:	4819      	ldr	r0, [pc, #100]	; (80006d4 <creerCode+0x9c>)
 800066e:	f000 fc75 	bl	8000f5c <iprintf>
	        for (int i = taille - 1; i >= 0; i--) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3b01      	subs	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	e00c      	b.n	8000694 <creerCode+0x5c>
	            printf("%d", (code >> i) & 1);
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	fa22 f303 	lsr.w	r3, r2, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	4619      	mov	r1, r3
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <creerCode+0xa0>)
 800068a:	f000 fc67 	bl	8000f5c <iprintf>
	        for (int i = taille - 1; i >= 0; i--) {
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3b01      	subs	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2b00      	cmp	r3, #0
 8000698:	daef      	bge.n	800067a <creerCode+0x42>
	        }
	        printf(" \t Taille : %d bits\r\n", taille);
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	480f      	ldr	r0, [pc, #60]	; (80006dc <creerCode+0xa4>)
 800069e:	f000 fc5d 	bl	8000f5c <iprintf>
 80006a2:	e014      	b.n	80006ce <creerCode+0x96>
	    } else {
	        creerCode(ptrNoeud->gauche, code << 1, taille + 1); // on inject 0
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	6918      	ldr	r0, [r3, #16]
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	0059      	lsls	r1, r3, #1
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3301      	adds	r3, #1
 80006b0:	461a      	mov	r2, r3
 80006b2:	f7ff ffc1 	bl	8000638 <creerCode>
	        creerCode(ptrNoeud->droite, (code << 1) + 1, taille + 1); // on inject 1
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6958      	ldr	r0, [r3, #20]
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	1c59      	adds	r1, r3, #1
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3301      	adds	r3, #1
 80006c4:	461a      	mov	r2, r3
 80006c6:	f7ff ffb7 	bl	8000638 <creerCode>
 80006ca:	e000      	b.n	80006ce <creerCode+0x96>
	        return;
 80006cc:	bf00      	nop
	    }
	}
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08001f68 	.word	0x08001f68
 80006d8:	08001f84 	.word	0x08001f84
 80006dc:	08001f88 	.word	0x08001f88

080006e0 <GPIO_Init>:
#include <stdint.h>
#include <stm32f446xx.h>
#include "main.h"
#include "gpio.h"

void GPIO_Init(void){
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <GPIO_Init+0x30>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e8:	4a09      	ldr	r2, [pc, #36]	; (8000710 <GPIO_Init+0x30>)
 80006ea:	f043 0305 	orr.w	r3, r3, #5
 80006ee:	6313      	str	r3, [r2, #48]	; 0x30

	/* GPIO Init */
	GPIOA->MODER |= OUTPUT_MODE <<10;		// PA5 Output LED
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <GPIO_Init+0x34>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <GPIO_Init+0x34>)
 80006f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006fa:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= INPUT_MODE	<< 26;		// PC13 Input Push-Button
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <GPIO_Init+0x38>)
 80006fe:	4a06      	ldr	r2, [pc, #24]	; (8000718 <GPIO_Init+0x38>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40020000 	.word	0x40020000
 8000718:	40020800 	.word	0x40020800

0800071c <SysTick_Handler>:
#include "interrupt.h"

extern uint32_t ticks;

// Interrupt Handler for SysTick Interrupt
void SysTick_Handler(void){
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	ticks++;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <SysTick_Handler+0x18>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a03      	ldr	r2, [pc, #12]	; (8000734 <SysTick_Handler+0x18>)
 8000728:	6013      	str	r3, [r2, #0]
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	20000084 	.word	0x20000084

08000738 <main>:
#include "occurence.h"
#include "arbre.h"


int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 800073e:	af00      	add	r7, sp, #0
	FPU_Init();
 8000740:	f000 fa52 	bl	8000be8 <FPU_Init>
	GPIO_Init();
 8000744:	f7ff ffcc 	bl	80006e0 <GPIO_Init>
	USART2_Init();
 8000748:	f000 f9cc 	bl	8000ae4 <USART2_Init>
	SYSTICK_Init();
 800074c:	f000 f996 	bl	8000a7c <SYSTICK_Init>

	uint8_t texte[]="aaaabbbccd";
 8000750:	4a2a      	ldr	r2, [pc, #168]	; (80007fc <main+0xc4>)
 8000752:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000756:	ca07      	ldmia	r2, {r0, r1, r2}
 8000758:	c303      	stmia	r3!, {r0, r1}
 800075a:	801a      	strh	r2, [r3, #0]
 800075c:	3302      	adds	r3, #2
 800075e:	0c12      	lsrs	r2, r2, #16
 8000760:	701a      	strb	r2, [r3, #0]
	//aaaaabbbbbccccccccddddddddd exemple ou il faut retrier a chaque fois
	uint32_t tabCaractere [256]={0};
 8000762:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000766:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800076a:	4618      	mov	r0, r3
 800076c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000770:	461a      	mov	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f000 fd38 	bl	80011e8 <memset>
	extern uint32_t compte ; //pour la taille de l'arbre
	struct noeud* racine;



	occurence(texte , tabCaractere);
 8000778:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800077c:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f842 	bl	800080c <occurence>

	creerFeuille(arbreHuffman,tabCaractere);
 8000788:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800078c:	463b      	mov	r3, r7
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fd8d 	bl	80002b0 <creerFeuille>
	afficherFeuilles(arbreHuffman, compte);
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <main+0xc8>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	463b      	mov	r3, r7
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fee2 	bl	8000568 <afficherFeuilles>

	trieArbre(arbreHuffman, compte);
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <main+0xc8>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	463b      	mov	r3, r7
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fddf 	bl	8000370 <trieArbre>
	/*printf("tableau de huffman apres trie\r\n");
	afficherTabArbreHuffman(arbreHuffman , compte);
	printf("//////////////////\r\n");
	*/

	racine = creeRacine(arbreHuffman , compte);
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <main+0xc8>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	463b      	mov	r3, r7
 80007b8:	4611      	mov	r1, r2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fe23 	bl	8000406 <creeRacine>
 80007c0:	f8c7 080c 	str.w	r0, [r7, #2060]	; 0x80c

	parcourirArbre(racine);
 80007c4:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 80007c8:	f7ff fe68 	bl	800049c <parcourirArbre>

	LiberationMemoireArbre(racine);
 80007cc:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 80007d0:	f7ff ff18 	bl	8000604 <LiberationMemoireArbre>

	printf("Codes de Huffman pour chaque caractere :\r\n");
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <main+0xcc>)
 80007d6:	f000 fc27 	bl	8001028 <puts>
	creerCode(racine, 1, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2101      	movs	r1, #1
 80007de:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 80007e2:	f7ff ff29 	bl	8000638 <creerCode>


	while(1){
		SYSTICK_Delay(100);
 80007e6:	2064      	movs	r0, #100	; 0x64
 80007e8:	f000 f95a 	bl	8000aa0 <SYSTICK_Delay>
		GPIOA->ODR ^= 1<<5;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <main+0xd0>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	4a05      	ldr	r2, [pc, #20]	; (8000808 <main+0xd0>)
 80007f2:	f083 0320 	eor.w	r3, r3, #32
 80007f6:	6153      	str	r3, [r2, #20]
		SYSTICK_Delay(100);
 80007f8:	e7f5      	b.n	80007e6 <main+0xae>
 80007fa:	bf00      	nop
 80007fc:	08001fcc 	.word	0x08001fcc
 8000800:	2000007c 	.word	0x2000007c
 8000804:	08001fa0 	.word	0x08001fa0
 8000808:	40020000 	.word	0x40020000

0800080c <occurence>:
#include <stdint.h>
#include <stdio.h>
#include "occurence.h"

	void occurence(uint8_t* chaine , uint32_t tab[256])
	{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
	printf("affichage des occurences : \r\n\r\n");
 8000816:	481e      	ldr	r0, [pc, #120]	; (8000890 <occurence+0x84>)
 8000818:	f000 fc06 	bl	8001028 <puts>
		uint32_t i=0;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
		uint32_t c;
		while(*(chaine+i) !='\0')
 8000820:	e00e      	b.n	8000840 <occurence+0x34>
		{
			c=chaine[i];
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	60fb      	str	r3, [r7, #12]
			tab[c]++;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	4413      	add	r3, r2
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	3201      	adds	r2, #1
 8000838:	601a      	str	r2, [r3, #0]
			i++;
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
		while(*(chaine+i) !='\0')
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1ea      	bne.n	8000822 <occurence+0x16>
		}

		for(uint32_t j=0;j<256;j++)
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	e013      	b.n	800087a <occurence+0x6e>
		{
			if (tab[j] != 0)
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	4413      	add	r3, r2
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d009      	beq.n	8000874 <occurence+0x68>
			{
			printf("le nombre d'occurence de %c est %ld \r\n",j,tab[j]);
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	683a      	ldr	r2, [r7, #0]
 8000866:	4413      	add	r3, r2
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	6939      	ldr	r1, [r7, #16]
 800086e:	4809      	ldr	r0, [pc, #36]	; (8000894 <occurence+0x88>)
 8000870:	f000 fb74 	bl	8000f5c <iprintf>
		for(uint32_t j=0;j<256;j++)
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	3301      	adds	r3, #1
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	2bff      	cmp	r3, #255	; 0xff
 800087e:	d9e8      	bls.n	8000852 <occurence+0x46>
			}
		}
		printf("\r\n*****fin d'affichage des occurences*****\r\n\n");
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <occurence+0x8c>)
 8000882:	f000 fbd1 	bl	8001028 <puts>
	}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	08001fd8 	.word	0x08001fd8
 8000894:	08001ff8 	.word	0x08001ff8
 8000898:	08002020 	.word	0x08002020

0800089c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00a      	b.n	80008c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ae:	f000 f993 	bl	8000bd8 <__io_getchar>
 80008b2:	4601      	mov	r1, r0
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbf0      	blt.n	80008ae <_read+0x12>
	}

return len;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	e009      	b.n	80008fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	60ba      	str	r2, [r7, #8]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f963 	bl	8000bbc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbf1      	blt.n	80008e8 <_write+0x12>
	}
	return len;
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_close>:

int _close(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	return -1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000936:	605a      	str	r2, [r3, #4]
	return 0;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <_isatty>:

int _isatty(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
	return 1;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
	return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <_sbrk+0x5c>)
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <_sbrk+0x60>)
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <_sbrk+0x64>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <_sbrk+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d207      	bcs.n	80009b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a8:	f000 fc7c 	bl	80012a4 <__errno>
 80009ac:	4603      	mov	r3, r0
 80009ae:	220c      	movs	r2, #12
 80009b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	e009      	b.n	80009cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <_sbrk+0x64>)
 80009c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20020000 	.word	0x20020000
 80009d8:	00000400 	.word	0x00000400
 80009dc:	20000080 	.word	0x20000080
 80009e0:	200001d8 	.word	0x200001d8

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a48:	d301      	bcc.n	8000a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00f      	b.n	8000a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <SysTick_Config+0x40>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a56:	210f      	movs	r1, #15
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f7ff ffc2 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <SysTick_Config+0x40>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SysTick_Config+0x40>)
 8000a68:	2207      	movs	r2, #7
 8000a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <SYSTICK_Init>:

//////////////////////////////////////////////
////////////// SYSTICK TIMER /////////////////
//////////////////////////////////////////////

void SYSTICK_Init(void){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <SYSTICK_Init+0x1c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <SYSTICK_Init+0x20>)
 8000a86:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8a:	099b      	lsrs	r3, r3, #6
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ffd3 	bl	8000a38 <SysTick_Config>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	10624dd3 	.word	0x10624dd3

08000aa0 <SYSTICK_Delay>:
/**
 * Millisecond delays with Systick Timer, blocking function
 * @param delay : milliseconds to wait
 */
void SYSTICK_Delay(uint32_t Delay)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = SYSTICK_Get();
 8000aa8:	f000 f810 	bl	8000acc <SYSTICK_Get>
 8000aac:	60f8      	str	r0, [r7, #12]

	while((SYSTICK_Get() - tickstart) < Delay);
 8000aae:	bf00      	nop
 8000ab0:	f000 f80c 	bl	8000acc <SYSTICK_Get>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <SYSTICK_Delay+0x10>
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <SYSTICK_Get>:

uint32_t SYSTICK_Get(void){
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	return ticks;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <SYSTICK_Get+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000084 	.word	0x20000084

08000ae4 <USART2_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "usart.h"


void USART2_Init(void){
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <USART2_Init+0x74>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <USART2_Init+0x74>)
 8000aee:	f043 0305 	orr.w	r3, r3, #5
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <USART2_Init+0x74>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <USART2_Init+0x74>)
 8000afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
	USART2->CR1 |= USART_CR1_UE;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <USART2_Init+0x78>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <USART2_Init+0x78>)
 8000b06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b0a:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <USART2_Init+0x7c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <USART2_Init+0x7c>)
 8000b12:	f043 0320 	orr.w	r3, r3, #32
 8000b16:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <USART2_Init+0x7c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <USART2_Init+0x7c>)
 8000b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b22:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <USART2_Init+0x7c>)
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <USART2_Init+0x7c>)
 8000b2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000b2e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <USART2_Init+0x7c>)
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <USART2_Init+0x7c>)
 8000b36:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000b3a:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <USART2_Init+0x78>)
 8000b3e:	228b      	movs	r2, #139	; 0x8b
 8000b40:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <USART2_Init+0x78>)
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <USART2_Init+0x78>)
 8000b48:	f043 030c 	orr.w	r3, r3, #12
 8000b4c:	60d3      	str	r3, [r2, #12]
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40004400 	.word	0x40004400
 8000b60:	40020000 	.word	0x40020000

08000b64 <USART2_TransmitChar>:


void USART2_TransmitChar(uint8_t data){
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	USART2->DR = data;
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <USART2_TransmitChar+0x2c>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	6053      	str	r3, [r2, #4]
	while( (USART2->SR & USART_SR_TXE)==0 );
 8000b74:	bf00      	nop
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <USART2_TransmitChar+0x2c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0f9      	beq.n	8000b76 <USART2_TransmitChar+0x12>
}
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40004400 	.word	0x40004400

08000b94 <USART2_ReceiveChar>:


uint8_t USART2_ReceiveChar(void){
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
	while( (USART2->SR & USART_SR_RXNE)==0 );
 8000b98:	bf00      	nop
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <USART2_ReceiveChar+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0320 	and.w	r3, r3, #32
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0f9      	beq.n	8000b9a <USART2_ReceiveChar+0x6>
	return USART2->DR;
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <USART2_ReceiveChar+0x24>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	b2db      	uxtb	r3, r3

}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40004400 	.word	0x40004400

08000bbc <__io_putchar>:
#include "util.h"
#include "usart.h"


/* Send on USART2 PA2*/
int __io_putchar(int ch){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	USART2_TransmitChar(ch);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ffcb 	bl	8000b64 <USART2_TransmitChar>
	return 0;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <__io_getchar>:

/* Receive on USART2 PA3 */
int __io_getchar(void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	return USART2_ReceiveChar();
 8000bdc:	f7ff ffda 	bl	8000b94 <USART2_ReceiveChar>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <FPU_Init>:
/* For scanf function */
void SCANF_Init(void){
	setvbuf(stdin, NULL, _IONBF, 0);
}

void FPU_Init(void){
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <FPU_Init+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <FPU_Init+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	; (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	; (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c3a:	f000 fb39 	bl	80012b0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000c3e:	f7ff fd7b 	bl	8000738 <main>

08000c42 <LoopForever>:

LoopForever:
  b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   r0, =_estack
 8000c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c50:	08002088 	.word	0x08002088
  ldr r2, =_sbss
 8000c54:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c58:	200001d4 	.word	0x200001d4

08000c5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC_IRQHandler>
	...

08000c60 <malloc>:
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <malloc+0xc>)
 8000c62:	4601      	mov	r1, r0
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	f000 b82b 	b.w	8000cc0 <_malloc_r>
 8000c6a:	bf00      	nop
 8000c6c:	2000005c 	.word	0x2000005c

08000c70 <free>:
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <free+0xc>)
 8000c72:	4601      	mov	r1, r0
 8000c74:	6818      	ldr	r0, [r3, #0]
 8000c76:	f000 bb43 	b.w	8001300 <_free_r>
 8000c7a:	bf00      	nop
 8000c7c:	2000005c 	.word	0x2000005c

08000c80 <sbrk_aligned>:
 8000c80:	b570      	push	{r4, r5, r6, lr}
 8000c82:	4e0e      	ldr	r6, [pc, #56]	; (8000cbc <sbrk_aligned+0x3c>)
 8000c84:	460c      	mov	r4, r1
 8000c86:	6831      	ldr	r1, [r6, #0]
 8000c88:	4605      	mov	r5, r0
 8000c8a:	b911      	cbnz	r1, 8000c92 <sbrk_aligned+0x12>
 8000c8c:	f000 fae8 	bl	8001260 <_sbrk_r>
 8000c90:	6030      	str	r0, [r6, #0]
 8000c92:	4621      	mov	r1, r4
 8000c94:	4628      	mov	r0, r5
 8000c96:	f000 fae3 	bl	8001260 <_sbrk_r>
 8000c9a:	1c43      	adds	r3, r0, #1
 8000c9c:	d00a      	beq.n	8000cb4 <sbrk_aligned+0x34>
 8000c9e:	1cc4      	adds	r4, r0, #3
 8000ca0:	f024 0403 	bic.w	r4, r4, #3
 8000ca4:	42a0      	cmp	r0, r4
 8000ca6:	d007      	beq.n	8000cb8 <sbrk_aligned+0x38>
 8000ca8:	1a21      	subs	r1, r4, r0
 8000caa:	4628      	mov	r0, r5
 8000cac:	f000 fad8 	bl	8001260 <_sbrk_r>
 8000cb0:	3001      	adds	r0, #1
 8000cb2:	d101      	bne.n	8000cb8 <sbrk_aligned+0x38>
 8000cb4:	f04f 34ff 	mov.w	r4, #4294967295
 8000cb8:	4620      	mov	r0, r4
 8000cba:	bd70      	pop	{r4, r5, r6, pc}
 8000cbc:	2000008c 	.word	0x2000008c

08000cc0 <_malloc_r>:
 8000cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cc4:	1ccd      	adds	r5, r1, #3
 8000cc6:	f025 0503 	bic.w	r5, r5, #3
 8000cca:	3508      	adds	r5, #8
 8000ccc:	2d0c      	cmp	r5, #12
 8000cce:	bf38      	it	cc
 8000cd0:	250c      	movcc	r5, #12
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	4607      	mov	r7, r0
 8000cd6:	db01      	blt.n	8000cdc <_malloc_r+0x1c>
 8000cd8:	42a9      	cmp	r1, r5
 8000cda:	d905      	bls.n	8000ce8 <_malloc_r+0x28>
 8000cdc:	230c      	movs	r3, #12
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ce8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000dbc <_malloc_r+0xfc>
 8000cec:	f000 f868 	bl	8000dc0 <__malloc_lock>
 8000cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8000cf4:	461c      	mov	r4, r3
 8000cf6:	bb5c      	cbnz	r4, 8000d50 <_malloc_r+0x90>
 8000cf8:	4629      	mov	r1, r5
 8000cfa:	4638      	mov	r0, r7
 8000cfc:	f7ff ffc0 	bl	8000c80 <sbrk_aligned>
 8000d00:	1c43      	adds	r3, r0, #1
 8000d02:	4604      	mov	r4, r0
 8000d04:	d155      	bne.n	8000db2 <_malloc_r+0xf2>
 8000d06:	f8d8 4000 	ldr.w	r4, [r8]
 8000d0a:	4626      	mov	r6, r4
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d145      	bne.n	8000d9c <_malloc_r+0xdc>
 8000d10:	2c00      	cmp	r4, #0
 8000d12:	d048      	beq.n	8000da6 <_malloc_r+0xe6>
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	4631      	mov	r1, r6
 8000d18:	4638      	mov	r0, r7
 8000d1a:	eb04 0903 	add.w	r9, r4, r3
 8000d1e:	f000 fa9f 	bl	8001260 <_sbrk_r>
 8000d22:	4581      	cmp	r9, r0
 8000d24:	d13f      	bne.n	8000da6 <_malloc_r+0xe6>
 8000d26:	6821      	ldr	r1, [r4, #0]
 8000d28:	1a6d      	subs	r5, r5, r1
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	4638      	mov	r0, r7
 8000d2e:	f7ff ffa7 	bl	8000c80 <sbrk_aligned>
 8000d32:	3001      	adds	r0, #1
 8000d34:	d037      	beq.n	8000da6 <_malloc_r+0xe6>
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	442b      	add	r3, r5
 8000d3a:	6023      	str	r3, [r4, #0]
 8000d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d038      	beq.n	8000db6 <_malloc_r+0xf6>
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	42a2      	cmp	r2, r4
 8000d48:	d12b      	bne.n	8000da2 <_malloc_r+0xe2>
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	e00f      	b.n	8000d70 <_malloc_r+0xb0>
 8000d50:	6822      	ldr	r2, [r4, #0]
 8000d52:	1b52      	subs	r2, r2, r5
 8000d54:	d41f      	bmi.n	8000d96 <_malloc_r+0xd6>
 8000d56:	2a0b      	cmp	r2, #11
 8000d58:	d917      	bls.n	8000d8a <_malloc_r+0xca>
 8000d5a:	1961      	adds	r1, r4, r5
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	6025      	str	r5, [r4, #0]
 8000d60:	bf18      	it	ne
 8000d62:	6059      	strne	r1, [r3, #4]
 8000d64:	6863      	ldr	r3, [r4, #4]
 8000d66:	bf08      	it	eq
 8000d68:	f8c8 1000 	streq.w	r1, [r8]
 8000d6c:	5162      	str	r2, [r4, r5]
 8000d6e:	604b      	str	r3, [r1, #4]
 8000d70:	4638      	mov	r0, r7
 8000d72:	f104 060b 	add.w	r6, r4, #11
 8000d76:	f000 f829 	bl	8000dcc <__malloc_unlock>
 8000d7a:	f026 0607 	bic.w	r6, r6, #7
 8000d7e:	1d23      	adds	r3, r4, #4
 8000d80:	1af2      	subs	r2, r6, r3
 8000d82:	d0ae      	beq.n	8000ce2 <_malloc_r+0x22>
 8000d84:	1b9b      	subs	r3, r3, r6
 8000d86:	50a3      	str	r3, [r4, r2]
 8000d88:	e7ab      	b.n	8000ce2 <_malloc_r+0x22>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	6862      	ldr	r2, [r4, #4]
 8000d8e:	d1dd      	bne.n	8000d4c <_malloc_r+0x8c>
 8000d90:	f8c8 2000 	str.w	r2, [r8]
 8000d94:	e7ec      	b.n	8000d70 <_malloc_r+0xb0>
 8000d96:	4623      	mov	r3, r4
 8000d98:	6864      	ldr	r4, [r4, #4]
 8000d9a:	e7ac      	b.n	8000cf6 <_malloc_r+0x36>
 8000d9c:	4634      	mov	r4, r6
 8000d9e:	6876      	ldr	r6, [r6, #4]
 8000da0:	e7b4      	b.n	8000d0c <_malloc_r+0x4c>
 8000da2:	4613      	mov	r3, r2
 8000da4:	e7cc      	b.n	8000d40 <_malloc_r+0x80>
 8000da6:	230c      	movs	r3, #12
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4638      	mov	r0, r7
 8000dac:	f000 f80e 	bl	8000dcc <__malloc_unlock>
 8000db0:	e797      	b.n	8000ce2 <_malloc_r+0x22>
 8000db2:	6025      	str	r5, [r4, #0]
 8000db4:	e7dc      	b.n	8000d70 <_malloc_r+0xb0>
 8000db6:	605b      	str	r3, [r3, #4]
 8000db8:	deff      	udf	#255	; 0xff
 8000dba:	bf00      	nop
 8000dbc:	20000088 	.word	0x20000088

08000dc0 <__malloc_lock>:
 8000dc0:	4801      	ldr	r0, [pc, #4]	; (8000dc8 <__malloc_lock+0x8>)
 8000dc2:	f000 ba9a 	b.w	80012fa <__retarget_lock_acquire_recursive>
 8000dc6:	bf00      	nop
 8000dc8:	200001d0 	.word	0x200001d0

08000dcc <__malloc_unlock>:
 8000dcc:	4801      	ldr	r0, [pc, #4]	; (8000dd4 <__malloc_unlock+0x8>)
 8000dce:	f000 ba95 	b.w	80012fc <__retarget_lock_release_recursive>
 8000dd2:	bf00      	nop
 8000dd4:	200001d0 	.word	0x200001d0

08000dd8 <std>:
 8000dd8:	2300      	movs	r3, #0
 8000dda:	b510      	push	{r4, lr}
 8000ddc:	4604      	mov	r4, r0
 8000dde:	e9c0 3300 	strd	r3, r3, [r0]
 8000de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000de6:	6083      	str	r3, [r0, #8]
 8000de8:	8181      	strh	r1, [r0, #12]
 8000dea:	6643      	str	r3, [r0, #100]	; 0x64
 8000dec:	81c2      	strh	r2, [r0, #14]
 8000dee:	6183      	str	r3, [r0, #24]
 8000df0:	4619      	mov	r1, r3
 8000df2:	2208      	movs	r2, #8
 8000df4:	305c      	adds	r0, #92	; 0x5c
 8000df6:	f000 f9f7 	bl	80011e8 <memset>
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <std+0x58>)
 8000dfc:	6263      	str	r3, [r4, #36]	; 0x24
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <std+0x5c>)
 8000e00:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <std+0x60>)
 8000e04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <std+0x64>)
 8000e08:	6323      	str	r3, [r4, #48]	; 0x30
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <std+0x68>)
 8000e0c:	6224      	str	r4, [r4, #32]
 8000e0e:	429c      	cmp	r4, r3
 8000e10:	d006      	beq.n	8000e20 <std+0x48>
 8000e12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000e16:	4294      	cmp	r4, r2
 8000e18:	d002      	beq.n	8000e20 <std+0x48>
 8000e1a:	33d0      	adds	r3, #208	; 0xd0
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	d105      	bne.n	8000e2c <std+0x54>
 8000e20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e28:	f000 ba66 	b.w	80012f8 <__retarget_lock_init_recursive>
 8000e2c:	bd10      	pop	{r4, pc}
 8000e2e:	bf00      	nop
 8000e30:	08001039 	.word	0x08001039
 8000e34:	0800105b 	.word	0x0800105b
 8000e38:	08001093 	.word	0x08001093
 8000e3c:	080010b7 	.word	0x080010b7
 8000e40:	20000090 	.word	0x20000090

08000e44 <stdio_exit_handler>:
 8000e44:	4a02      	ldr	r2, [pc, #8]	; (8000e50 <stdio_exit_handler+0xc>)
 8000e46:	4903      	ldr	r1, [pc, #12]	; (8000e54 <stdio_exit_handler+0x10>)
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <stdio_exit_handler+0x14>)
 8000e4a:	f000 b869 	b.w	8000f20 <_fwalk_sglue>
 8000e4e:	bf00      	nop
 8000e50:	20000004 	.word	0x20000004
 8000e54:	08001a4d 	.word	0x08001a4d
 8000e58:	20000010 	.word	0x20000010

08000e5c <cleanup_stdio>:
 8000e5c:	6841      	ldr	r1, [r0, #4]
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <cleanup_stdio+0x34>)
 8000e60:	4299      	cmp	r1, r3
 8000e62:	b510      	push	{r4, lr}
 8000e64:	4604      	mov	r4, r0
 8000e66:	d001      	beq.n	8000e6c <cleanup_stdio+0x10>
 8000e68:	f000 fdf0 	bl	8001a4c <_fflush_r>
 8000e6c:	68a1      	ldr	r1, [r4, #8]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <cleanup_stdio+0x38>)
 8000e70:	4299      	cmp	r1, r3
 8000e72:	d002      	beq.n	8000e7a <cleanup_stdio+0x1e>
 8000e74:	4620      	mov	r0, r4
 8000e76:	f000 fde9 	bl	8001a4c <_fflush_r>
 8000e7a:	68e1      	ldr	r1, [r4, #12]
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <cleanup_stdio+0x3c>)
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d004      	beq.n	8000e8c <cleanup_stdio+0x30>
 8000e82:	4620      	mov	r0, r4
 8000e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e88:	f000 bde0 	b.w	8001a4c <_fflush_r>
 8000e8c:	bd10      	pop	{r4, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000090 	.word	0x20000090
 8000e94:	200000f8 	.word	0x200000f8
 8000e98:	20000160 	.word	0x20000160

08000e9c <global_stdio_init.part.0>:
 8000e9c:	b510      	push	{r4, lr}
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <global_stdio_init.part.0+0x30>)
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	; (8000ed0 <global_stdio_init.part.0+0x34>)
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <global_stdio_init.part.0+0x38>)
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2104      	movs	r1, #4
 8000eac:	f7ff ff94 	bl	8000dd8 <std>
 8000eb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2109      	movs	r1, #9
 8000eb8:	f7ff ff8e 	bl	8000dd8 <std>
 8000ebc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ec6:	2112      	movs	r1, #18
 8000ec8:	f7ff bf86 	b.w	8000dd8 <std>
 8000ecc:	200001c8 	.word	0x200001c8
 8000ed0:	20000090 	.word	0x20000090
 8000ed4:	08000e45 	.word	0x08000e45

08000ed8 <__sfp_lock_acquire>:
 8000ed8:	4801      	ldr	r0, [pc, #4]	; (8000ee0 <__sfp_lock_acquire+0x8>)
 8000eda:	f000 ba0e 	b.w	80012fa <__retarget_lock_acquire_recursive>
 8000ede:	bf00      	nop
 8000ee0:	200001d1 	.word	0x200001d1

08000ee4 <__sfp_lock_release>:
 8000ee4:	4801      	ldr	r0, [pc, #4]	; (8000eec <__sfp_lock_release+0x8>)
 8000ee6:	f000 ba09 	b.w	80012fc <__retarget_lock_release_recursive>
 8000eea:	bf00      	nop
 8000eec:	200001d1 	.word	0x200001d1

08000ef0 <__sinit>:
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	f7ff fff0 	bl	8000ed8 <__sfp_lock_acquire>
 8000ef8:	6a23      	ldr	r3, [r4, #32]
 8000efa:	b11b      	cbz	r3, 8000f04 <__sinit+0x14>
 8000efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f00:	f7ff bff0 	b.w	8000ee4 <__sfp_lock_release>
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__sinit+0x28>)
 8000f06:	6223      	str	r3, [r4, #32]
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__sinit+0x2c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f5      	bne.n	8000efc <__sinit+0xc>
 8000f10:	f7ff ffc4 	bl	8000e9c <global_stdio_init.part.0>
 8000f14:	e7f2      	b.n	8000efc <__sinit+0xc>
 8000f16:	bf00      	nop
 8000f18:	08000e5d 	.word	0x08000e5d
 8000f1c:	200001c8 	.word	0x200001c8

08000f20 <_fwalk_sglue>:
 8000f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f24:	4607      	mov	r7, r0
 8000f26:	4688      	mov	r8, r1
 8000f28:	4614      	mov	r4, r2
 8000f2a:	2600      	movs	r6, #0
 8000f2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f30:	f1b9 0901 	subs.w	r9, r9, #1
 8000f34:	d505      	bpl.n	8000f42 <_fwalk_sglue+0x22>
 8000f36:	6824      	ldr	r4, [r4, #0]
 8000f38:	2c00      	cmp	r4, #0
 8000f3a:	d1f7      	bne.n	8000f2c <_fwalk_sglue+0xc>
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f42:	89ab      	ldrh	r3, [r5, #12]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d907      	bls.n	8000f58 <_fwalk_sglue+0x38>
 8000f48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	d003      	beq.n	8000f58 <_fwalk_sglue+0x38>
 8000f50:	4629      	mov	r1, r5
 8000f52:	4638      	mov	r0, r7
 8000f54:	47c0      	blx	r8
 8000f56:	4306      	orrs	r6, r0
 8000f58:	3568      	adds	r5, #104	; 0x68
 8000f5a:	e7e9      	b.n	8000f30 <_fwalk_sglue+0x10>

08000f5c <iprintf>:
 8000f5c:	b40f      	push	{r0, r1, r2, r3}
 8000f5e:	b507      	push	{r0, r1, r2, lr}
 8000f60:	4906      	ldr	r1, [pc, #24]	; (8000f7c <iprintf+0x20>)
 8000f62:	ab04      	add	r3, sp, #16
 8000f64:	6808      	ldr	r0, [r1, #0]
 8000f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f6a:	6881      	ldr	r1, [r0, #8]
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	f000 fa3d 	bl	80013ec <_vfiprintf_r>
 8000f72:	b003      	add	sp, #12
 8000f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f78:	b004      	add	sp, #16
 8000f7a:	4770      	bx	lr
 8000f7c:	2000005c 	.word	0x2000005c

08000f80 <_puts_r>:
 8000f80:	6a03      	ldr	r3, [r0, #32]
 8000f82:	b570      	push	{r4, r5, r6, lr}
 8000f84:	6884      	ldr	r4, [r0, #8]
 8000f86:	4605      	mov	r5, r0
 8000f88:	460e      	mov	r6, r1
 8000f8a:	b90b      	cbnz	r3, 8000f90 <_puts_r+0x10>
 8000f8c:	f7ff ffb0 	bl	8000ef0 <__sinit>
 8000f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000f92:	07db      	lsls	r3, r3, #31
 8000f94:	d405      	bmi.n	8000fa2 <_puts_r+0x22>
 8000f96:	89a3      	ldrh	r3, [r4, #12]
 8000f98:	0598      	lsls	r0, r3, #22
 8000f9a:	d402      	bmi.n	8000fa2 <_puts_r+0x22>
 8000f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f9e:	f000 f9ac 	bl	80012fa <__retarget_lock_acquire_recursive>
 8000fa2:	89a3      	ldrh	r3, [r4, #12]
 8000fa4:	0719      	lsls	r1, r3, #28
 8000fa6:	d513      	bpl.n	8000fd0 <_puts_r+0x50>
 8000fa8:	6923      	ldr	r3, [r4, #16]
 8000faa:	b18b      	cbz	r3, 8000fd0 <_puts_r+0x50>
 8000fac:	3e01      	subs	r6, #1
 8000fae:	68a3      	ldr	r3, [r4, #8]
 8000fb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	60a3      	str	r3, [r4, #8]
 8000fb8:	b9e9      	cbnz	r1, 8000ff6 <_puts_r+0x76>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	da2e      	bge.n	800101c <_puts_r+0x9c>
 8000fbe:	4622      	mov	r2, r4
 8000fc0:	210a      	movs	r1, #10
 8000fc2:	4628      	mov	r0, r5
 8000fc4:	f000 f87b 	bl	80010be <__swbuf_r>
 8000fc8:	3001      	adds	r0, #1
 8000fca:	d007      	beq.n	8000fdc <_puts_r+0x5c>
 8000fcc:	250a      	movs	r5, #10
 8000fce:	e007      	b.n	8000fe0 <_puts_r+0x60>
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	f000 f8b0 	bl	8001138 <__swsetup_r>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d0e7      	beq.n	8000fac <_puts_r+0x2c>
 8000fdc:	f04f 35ff 	mov.w	r5, #4294967295
 8000fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000fe2:	07da      	lsls	r2, r3, #31
 8000fe4:	d405      	bmi.n	8000ff2 <_puts_r+0x72>
 8000fe6:	89a3      	ldrh	r3, [r4, #12]
 8000fe8:	059b      	lsls	r3, r3, #22
 8000fea:	d402      	bmi.n	8000ff2 <_puts_r+0x72>
 8000fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000fee:	f000 f985 	bl	80012fc <__retarget_lock_release_recursive>
 8000ff2:	4628      	mov	r0, r5
 8000ff4:	bd70      	pop	{r4, r5, r6, pc}
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	da04      	bge.n	8001004 <_puts_r+0x84>
 8000ffa:	69a2      	ldr	r2, [r4, #24]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dc06      	bgt.n	800100e <_puts_r+0x8e>
 8001000:	290a      	cmp	r1, #10
 8001002:	d004      	beq.n	800100e <_puts_r+0x8e>
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	6022      	str	r2, [r4, #0]
 800100a:	7019      	strb	r1, [r3, #0]
 800100c:	e7cf      	b.n	8000fae <_puts_r+0x2e>
 800100e:	4622      	mov	r2, r4
 8001010:	4628      	mov	r0, r5
 8001012:	f000 f854 	bl	80010be <__swbuf_r>
 8001016:	3001      	adds	r0, #1
 8001018:	d1c9      	bne.n	8000fae <_puts_r+0x2e>
 800101a:	e7df      	b.n	8000fdc <_puts_r+0x5c>
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	250a      	movs	r5, #10
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	6022      	str	r2, [r4, #0]
 8001024:	701d      	strb	r5, [r3, #0]
 8001026:	e7db      	b.n	8000fe0 <_puts_r+0x60>

08001028 <puts>:
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <puts+0xc>)
 800102a:	4601      	mov	r1, r0
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	f7ff bfa7 	b.w	8000f80 <_puts_r>
 8001032:	bf00      	nop
 8001034:	2000005c 	.word	0x2000005c

08001038 <__sread>:
 8001038:	b510      	push	{r4, lr}
 800103a:	460c      	mov	r4, r1
 800103c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001040:	f000 f8fc 	bl	800123c <_read_r>
 8001044:	2800      	cmp	r0, #0
 8001046:	bfab      	itete	ge
 8001048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800104a:	89a3      	ldrhlt	r3, [r4, #12]
 800104c:	181b      	addge	r3, r3, r0
 800104e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001052:	bfac      	ite	ge
 8001054:	6563      	strge	r3, [r4, #84]	; 0x54
 8001056:	81a3      	strhlt	r3, [r4, #12]
 8001058:	bd10      	pop	{r4, pc}

0800105a <__swrite>:
 800105a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105e:	461f      	mov	r7, r3
 8001060:	898b      	ldrh	r3, [r1, #12]
 8001062:	05db      	lsls	r3, r3, #23
 8001064:	4605      	mov	r5, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4616      	mov	r6, r2
 800106a:	d505      	bpl.n	8001078 <__swrite+0x1e>
 800106c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001070:	2302      	movs	r3, #2
 8001072:	2200      	movs	r2, #0
 8001074:	f000 f8d0 	bl	8001218 <_lseek_r>
 8001078:	89a3      	ldrh	r3, [r4, #12]
 800107a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800107e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001082:	81a3      	strh	r3, [r4, #12]
 8001084:	4632      	mov	r2, r6
 8001086:	463b      	mov	r3, r7
 8001088:	4628      	mov	r0, r5
 800108a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800108e:	f000 b8f7 	b.w	8001280 <_write_r>

08001092 <__sseek>:
 8001092:	b510      	push	{r4, lr}
 8001094:	460c      	mov	r4, r1
 8001096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800109a:	f000 f8bd 	bl	8001218 <_lseek_r>
 800109e:	1c43      	adds	r3, r0, #1
 80010a0:	89a3      	ldrh	r3, [r4, #12]
 80010a2:	bf15      	itete	ne
 80010a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80010a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010ae:	81a3      	strheq	r3, [r4, #12]
 80010b0:	bf18      	it	ne
 80010b2:	81a3      	strhne	r3, [r4, #12]
 80010b4:	bd10      	pop	{r4, pc}

080010b6 <__sclose>:
 80010b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ba:	f000 b89d 	b.w	80011f8 <_close_r>

080010be <__swbuf_r>:
 80010be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c0:	460e      	mov	r6, r1
 80010c2:	4614      	mov	r4, r2
 80010c4:	4605      	mov	r5, r0
 80010c6:	b118      	cbz	r0, 80010d0 <__swbuf_r+0x12>
 80010c8:	6a03      	ldr	r3, [r0, #32]
 80010ca:	b90b      	cbnz	r3, 80010d0 <__swbuf_r+0x12>
 80010cc:	f7ff ff10 	bl	8000ef0 <__sinit>
 80010d0:	69a3      	ldr	r3, [r4, #24]
 80010d2:	60a3      	str	r3, [r4, #8]
 80010d4:	89a3      	ldrh	r3, [r4, #12]
 80010d6:	071a      	lsls	r2, r3, #28
 80010d8:	d525      	bpl.n	8001126 <__swbuf_r+0x68>
 80010da:	6923      	ldr	r3, [r4, #16]
 80010dc:	b31b      	cbz	r3, 8001126 <__swbuf_r+0x68>
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	6922      	ldr	r2, [r4, #16]
 80010e2:	1a98      	subs	r0, r3, r2
 80010e4:	6963      	ldr	r3, [r4, #20]
 80010e6:	b2f6      	uxtb	r6, r6
 80010e8:	4283      	cmp	r3, r0
 80010ea:	4637      	mov	r7, r6
 80010ec:	dc04      	bgt.n	80010f8 <__swbuf_r+0x3a>
 80010ee:	4621      	mov	r1, r4
 80010f0:	4628      	mov	r0, r5
 80010f2:	f000 fcab 	bl	8001a4c <_fflush_r>
 80010f6:	b9e0      	cbnz	r0, 8001132 <__swbuf_r+0x74>
 80010f8:	68a3      	ldr	r3, [r4, #8]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	60a3      	str	r3, [r4, #8]
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	6022      	str	r2, [r4, #0]
 8001104:	701e      	strb	r6, [r3, #0]
 8001106:	6962      	ldr	r2, [r4, #20]
 8001108:	1c43      	adds	r3, r0, #1
 800110a:	429a      	cmp	r2, r3
 800110c:	d004      	beq.n	8001118 <__swbuf_r+0x5a>
 800110e:	89a3      	ldrh	r3, [r4, #12]
 8001110:	07db      	lsls	r3, r3, #31
 8001112:	d506      	bpl.n	8001122 <__swbuf_r+0x64>
 8001114:	2e0a      	cmp	r6, #10
 8001116:	d104      	bne.n	8001122 <__swbuf_r+0x64>
 8001118:	4621      	mov	r1, r4
 800111a:	4628      	mov	r0, r5
 800111c:	f000 fc96 	bl	8001a4c <_fflush_r>
 8001120:	b938      	cbnz	r0, 8001132 <__swbuf_r+0x74>
 8001122:	4638      	mov	r0, r7
 8001124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001126:	4621      	mov	r1, r4
 8001128:	4628      	mov	r0, r5
 800112a:	f000 f805 	bl	8001138 <__swsetup_r>
 800112e:	2800      	cmp	r0, #0
 8001130:	d0d5      	beq.n	80010de <__swbuf_r+0x20>
 8001132:	f04f 37ff 	mov.w	r7, #4294967295
 8001136:	e7f4      	b.n	8001122 <__swbuf_r+0x64>

08001138 <__swsetup_r>:
 8001138:	b538      	push	{r3, r4, r5, lr}
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <__swsetup_r+0xac>)
 800113c:	4605      	mov	r5, r0
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	460c      	mov	r4, r1
 8001142:	b118      	cbz	r0, 800114c <__swsetup_r+0x14>
 8001144:	6a03      	ldr	r3, [r0, #32]
 8001146:	b90b      	cbnz	r3, 800114c <__swsetup_r+0x14>
 8001148:	f7ff fed2 	bl	8000ef0 <__sinit>
 800114c:	89a3      	ldrh	r3, [r4, #12]
 800114e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001152:	0718      	lsls	r0, r3, #28
 8001154:	d422      	bmi.n	800119c <__swsetup_r+0x64>
 8001156:	06d9      	lsls	r1, r3, #27
 8001158:	d407      	bmi.n	800116a <__swsetup_r+0x32>
 800115a:	2309      	movs	r3, #9
 800115c:	602b      	str	r3, [r5, #0]
 800115e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001162:	81a3      	strh	r3, [r4, #12]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	e034      	b.n	80011d4 <__swsetup_r+0x9c>
 800116a:	0758      	lsls	r0, r3, #29
 800116c:	d512      	bpl.n	8001194 <__swsetup_r+0x5c>
 800116e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001170:	b141      	cbz	r1, 8001184 <__swsetup_r+0x4c>
 8001172:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001176:	4299      	cmp	r1, r3
 8001178:	d002      	beq.n	8001180 <__swsetup_r+0x48>
 800117a:	4628      	mov	r0, r5
 800117c:	f000 f8c0 	bl	8001300 <_free_r>
 8001180:	2300      	movs	r3, #0
 8001182:	6363      	str	r3, [r4, #52]	; 0x34
 8001184:	89a3      	ldrh	r3, [r4, #12]
 8001186:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800118a:	81a3      	strh	r3, [r4, #12]
 800118c:	2300      	movs	r3, #0
 800118e:	6063      	str	r3, [r4, #4]
 8001190:	6923      	ldr	r3, [r4, #16]
 8001192:	6023      	str	r3, [r4, #0]
 8001194:	89a3      	ldrh	r3, [r4, #12]
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	81a3      	strh	r3, [r4, #12]
 800119c:	6923      	ldr	r3, [r4, #16]
 800119e:	b94b      	cbnz	r3, 80011b4 <__swsetup_r+0x7c>
 80011a0:	89a3      	ldrh	r3, [r4, #12]
 80011a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80011a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011aa:	d003      	beq.n	80011b4 <__swsetup_r+0x7c>
 80011ac:	4621      	mov	r1, r4
 80011ae:	4628      	mov	r0, r5
 80011b0:	f000 fc9a 	bl	8001ae8 <__smakebuf_r>
 80011b4:	89a0      	ldrh	r0, [r4, #12]
 80011b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011ba:	f010 0301 	ands.w	r3, r0, #1
 80011be:	d00a      	beq.n	80011d6 <__swsetup_r+0x9e>
 80011c0:	2300      	movs	r3, #0
 80011c2:	60a3      	str	r3, [r4, #8]
 80011c4:	6963      	ldr	r3, [r4, #20]
 80011c6:	425b      	negs	r3, r3
 80011c8:	61a3      	str	r3, [r4, #24]
 80011ca:	6923      	ldr	r3, [r4, #16]
 80011cc:	b943      	cbnz	r3, 80011e0 <__swsetup_r+0xa8>
 80011ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80011d2:	d1c4      	bne.n	800115e <__swsetup_r+0x26>
 80011d4:	bd38      	pop	{r3, r4, r5, pc}
 80011d6:	0781      	lsls	r1, r0, #30
 80011d8:	bf58      	it	pl
 80011da:	6963      	ldrpl	r3, [r4, #20]
 80011dc:	60a3      	str	r3, [r4, #8]
 80011de:	e7f4      	b.n	80011ca <__swsetup_r+0x92>
 80011e0:	2000      	movs	r0, #0
 80011e2:	e7f7      	b.n	80011d4 <__swsetup_r+0x9c>
 80011e4:	2000005c 	.word	0x2000005c

080011e8 <memset>:
 80011e8:	4402      	add	r2, r0
 80011ea:	4603      	mov	r3, r0
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d100      	bne.n	80011f2 <memset+0xa>
 80011f0:	4770      	bx	lr
 80011f2:	f803 1b01 	strb.w	r1, [r3], #1
 80011f6:	e7f9      	b.n	80011ec <memset+0x4>

080011f8 <_close_r>:
 80011f8:	b538      	push	{r3, r4, r5, lr}
 80011fa:	4d06      	ldr	r5, [pc, #24]	; (8001214 <_close_r+0x1c>)
 80011fc:	2300      	movs	r3, #0
 80011fe:	4604      	mov	r4, r0
 8001200:	4608      	mov	r0, r1
 8001202:	602b      	str	r3, [r5, #0]
 8001204:	f7ff fb83 	bl	800090e <_close>
 8001208:	1c43      	adds	r3, r0, #1
 800120a:	d102      	bne.n	8001212 <_close_r+0x1a>
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	b103      	cbz	r3, 8001212 <_close_r+0x1a>
 8001210:	6023      	str	r3, [r4, #0]
 8001212:	bd38      	pop	{r3, r4, r5, pc}
 8001214:	200001cc 	.word	0x200001cc

08001218 <_lseek_r>:
 8001218:	b538      	push	{r3, r4, r5, lr}
 800121a:	4d07      	ldr	r5, [pc, #28]	; (8001238 <_lseek_r+0x20>)
 800121c:	4604      	mov	r4, r0
 800121e:	4608      	mov	r0, r1
 8001220:	4611      	mov	r1, r2
 8001222:	2200      	movs	r2, #0
 8001224:	602a      	str	r2, [r5, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	f7ff fb98 	bl	800095c <_lseek>
 800122c:	1c43      	adds	r3, r0, #1
 800122e:	d102      	bne.n	8001236 <_lseek_r+0x1e>
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	b103      	cbz	r3, 8001236 <_lseek_r+0x1e>
 8001234:	6023      	str	r3, [r4, #0]
 8001236:	bd38      	pop	{r3, r4, r5, pc}
 8001238:	200001cc 	.word	0x200001cc

0800123c <_read_r>:
 800123c:	b538      	push	{r3, r4, r5, lr}
 800123e:	4d07      	ldr	r5, [pc, #28]	; (800125c <_read_r+0x20>)
 8001240:	4604      	mov	r4, r0
 8001242:	4608      	mov	r0, r1
 8001244:	4611      	mov	r1, r2
 8001246:	2200      	movs	r2, #0
 8001248:	602a      	str	r2, [r5, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	f7ff fb26 	bl	800089c <_read>
 8001250:	1c43      	adds	r3, r0, #1
 8001252:	d102      	bne.n	800125a <_read_r+0x1e>
 8001254:	682b      	ldr	r3, [r5, #0]
 8001256:	b103      	cbz	r3, 800125a <_read_r+0x1e>
 8001258:	6023      	str	r3, [r4, #0]
 800125a:	bd38      	pop	{r3, r4, r5, pc}
 800125c:	200001cc 	.word	0x200001cc

08001260 <_sbrk_r>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4d06      	ldr	r5, [pc, #24]	; (800127c <_sbrk_r+0x1c>)
 8001264:	2300      	movs	r3, #0
 8001266:	4604      	mov	r4, r0
 8001268:	4608      	mov	r0, r1
 800126a:	602b      	str	r3, [r5, #0]
 800126c:	f7ff fb84 	bl	8000978 <_sbrk>
 8001270:	1c43      	adds	r3, r0, #1
 8001272:	d102      	bne.n	800127a <_sbrk_r+0x1a>
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	b103      	cbz	r3, 800127a <_sbrk_r+0x1a>
 8001278:	6023      	str	r3, [r4, #0]
 800127a:	bd38      	pop	{r3, r4, r5, pc}
 800127c:	200001cc 	.word	0x200001cc

08001280 <_write_r>:
 8001280:	b538      	push	{r3, r4, r5, lr}
 8001282:	4d07      	ldr	r5, [pc, #28]	; (80012a0 <_write_r+0x20>)
 8001284:	4604      	mov	r4, r0
 8001286:	4608      	mov	r0, r1
 8001288:	4611      	mov	r1, r2
 800128a:	2200      	movs	r2, #0
 800128c:	602a      	str	r2, [r5, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	f7ff fb21 	bl	80008d6 <_write>
 8001294:	1c43      	adds	r3, r0, #1
 8001296:	d102      	bne.n	800129e <_write_r+0x1e>
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	b103      	cbz	r3, 800129e <_write_r+0x1e>
 800129c:	6023      	str	r3, [r4, #0]
 800129e:	bd38      	pop	{r3, r4, r5, pc}
 80012a0:	200001cc 	.word	0x200001cc

080012a4 <__errno>:
 80012a4:	4b01      	ldr	r3, [pc, #4]	; (80012ac <__errno+0x8>)
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	2000005c 	.word	0x2000005c

080012b0 <__libc_init_array>:
 80012b0:	b570      	push	{r4, r5, r6, lr}
 80012b2:	4d0d      	ldr	r5, [pc, #52]	; (80012e8 <__libc_init_array+0x38>)
 80012b4:	4c0d      	ldr	r4, [pc, #52]	; (80012ec <__libc_init_array+0x3c>)
 80012b6:	1b64      	subs	r4, r4, r5
 80012b8:	10a4      	asrs	r4, r4, #2
 80012ba:	2600      	movs	r6, #0
 80012bc:	42a6      	cmp	r6, r4
 80012be:	d109      	bne.n	80012d4 <__libc_init_array+0x24>
 80012c0:	4d0b      	ldr	r5, [pc, #44]	; (80012f0 <__libc_init_array+0x40>)
 80012c2:	4c0c      	ldr	r4, [pc, #48]	; (80012f4 <__libc_init_array+0x44>)
 80012c4:	f000 fc6e 	bl	8001ba4 <_init>
 80012c8:	1b64      	subs	r4, r4, r5
 80012ca:	10a4      	asrs	r4, r4, #2
 80012cc:	2600      	movs	r6, #0
 80012ce:	42a6      	cmp	r6, r4
 80012d0:	d105      	bne.n	80012de <__libc_init_array+0x2e>
 80012d2:	bd70      	pop	{r4, r5, r6, pc}
 80012d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80012d8:	4798      	blx	r3
 80012da:	3601      	adds	r6, #1
 80012dc:	e7ee      	b.n	80012bc <__libc_init_array+0xc>
 80012de:	f855 3b04 	ldr.w	r3, [r5], #4
 80012e2:	4798      	blx	r3
 80012e4:	3601      	adds	r6, #1
 80012e6:	e7f2      	b.n	80012ce <__libc_init_array+0x1e>
 80012e8:	08002080 	.word	0x08002080
 80012ec:	08002080 	.word	0x08002080
 80012f0:	08002080 	.word	0x08002080
 80012f4:	08002084 	.word	0x08002084

080012f8 <__retarget_lock_init_recursive>:
 80012f8:	4770      	bx	lr

080012fa <__retarget_lock_acquire_recursive>:
 80012fa:	4770      	bx	lr

080012fc <__retarget_lock_release_recursive>:
 80012fc:	4770      	bx	lr
	...

08001300 <_free_r>:
 8001300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001302:	2900      	cmp	r1, #0
 8001304:	d044      	beq.n	8001390 <_free_r+0x90>
 8001306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800130a:	9001      	str	r0, [sp, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f1a1 0404 	sub.w	r4, r1, #4
 8001312:	bfb8      	it	lt
 8001314:	18e4      	addlt	r4, r4, r3
 8001316:	f7ff fd53 	bl	8000dc0 <__malloc_lock>
 800131a:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <_free_r+0x94>)
 800131c:	9801      	ldr	r0, [sp, #4]
 800131e:	6813      	ldr	r3, [r2, #0]
 8001320:	b933      	cbnz	r3, 8001330 <_free_r+0x30>
 8001322:	6063      	str	r3, [r4, #4]
 8001324:	6014      	str	r4, [r2, #0]
 8001326:	b003      	add	sp, #12
 8001328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800132c:	f7ff bd4e 	b.w	8000dcc <__malloc_unlock>
 8001330:	42a3      	cmp	r3, r4
 8001332:	d908      	bls.n	8001346 <_free_r+0x46>
 8001334:	6825      	ldr	r5, [r4, #0]
 8001336:	1961      	adds	r1, r4, r5
 8001338:	428b      	cmp	r3, r1
 800133a:	bf01      	itttt	eq
 800133c:	6819      	ldreq	r1, [r3, #0]
 800133e:	685b      	ldreq	r3, [r3, #4]
 8001340:	1949      	addeq	r1, r1, r5
 8001342:	6021      	streq	r1, [r4, #0]
 8001344:	e7ed      	b.n	8001322 <_free_r+0x22>
 8001346:	461a      	mov	r2, r3
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	b10b      	cbz	r3, 8001350 <_free_r+0x50>
 800134c:	42a3      	cmp	r3, r4
 800134e:	d9fa      	bls.n	8001346 <_free_r+0x46>
 8001350:	6811      	ldr	r1, [r2, #0]
 8001352:	1855      	adds	r5, r2, r1
 8001354:	42a5      	cmp	r5, r4
 8001356:	d10b      	bne.n	8001370 <_free_r+0x70>
 8001358:	6824      	ldr	r4, [r4, #0]
 800135a:	4421      	add	r1, r4
 800135c:	1854      	adds	r4, r2, r1
 800135e:	42a3      	cmp	r3, r4
 8001360:	6011      	str	r1, [r2, #0]
 8001362:	d1e0      	bne.n	8001326 <_free_r+0x26>
 8001364:	681c      	ldr	r4, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	6053      	str	r3, [r2, #4]
 800136a:	440c      	add	r4, r1
 800136c:	6014      	str	r4, [r2, #0]
 800136e:	e7da      	b.n	8001326 <_free_r+0x26>
 8001370:	d902      	bls.n	8001378 <_free_r+0x78>
 8001372:	230c      	movs	r3, #12
 8001374:	6003      	str	r3, [r0, #0]
 8001376:	e7d6      	b.n	8001326 <_free_r+0x26>
 8001378:	6825      	ldr	r5, [r4, #0]
 800137a:	1961      	adds	r1, r4, r5
 800137c:	428b      	cmp	r3, r1
 800137e:	bf04      	itt	eq
 8001380:	6819      	ldreq	r1, [r3, #0]
 8001382:	685b      	ldreq	r3, [r3, #4]
 8001384:	6063      	str	r3, [r4, #4]
 8001386:	bf04      	itt	eq
 8001388:	1949      	addeq	r1, r1, r5
 800138a:	6021      	streq	r1, [r4, #0]
 800138c:	6054      	str	r4, [r2, #4]
 800138e:	e7ca      	b.n	8001326 <_free_r+0x26>
 8001390:	b003      	add	sp, #12
 8001392:	bd30      	pop	{r4, r5, pc}
 8001394:	20000088 	.word	0x20000088

08001398 <__sfputc_r>:
 8001398:	6893      	ldr	r3, [r2, #8]
 800139a:	3b01      	subs	r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	b410      	push	{r4}
 80013a0:	6093      	str	r3, [r2, #8]
 80013a2:	da08      	bge.n	80013b6 <__sfputc_r+0x1e>
 80013a4:	6994      	ldr	r4, [r2, #24]
 80013a6:	42a3      	cmp	r3, r4
 80013a8:	db01      	blt.n	80013ae <__sfputc_r+0x16>
 80013aa:	290a      	cmp	r1, #10
 80013ac:	d103      	bne.n	80013b6 <__sfputc_r+0x1e>
 80013ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013b2:	f7ff be84 	b.w	80010be <__swbuf_r>
 80013b6:	6813      	ldr	r3, [r2, #0]
 80013b8:	1c58      	adds	r0, r3, #1
 80013ba:	6010      	str	r0, [r2, #0]
 80013bc:	7019      	strb	r1, [r3, #0]
 80013be:	4608      	mov	r0, r1
 80013c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <__sfputs_r>:
 80013c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c8:	4606      	mov	r6, r0
 80013ca:	460f      	mov	r7, r1
 80013cc:	4614      	mov	r4, r2
 80013ce:	18d5      	adds	r5, r2, r3
 80013d0:	42ac      	cmp	r4, r5
 80013d2:	d101      	bne.n	80013d8 <__sfputs_r+0x12>
 80013d4:	2000      	movs	r0, #0
 80013d6:	e007      	b.n	80013e8 <__sfputs_r+0x22>
 80013d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013dc:	463a      	mov	r2, r7
 80013de:	4630      	mov	r0, r6
 80013e0:	f7ff ffda 	bl	8001398 <__sfputc_r>
 80013e4:	1c43      	adds	r3, r0, #1
 80013e6:	d1f3      	bne.n	80013d0 <__sfputs_r+0xa>
 80013e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080013ec <_vfiprintf_r>:
 80013ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f0:	460d      	mov	r5, r1
 80013f2:	b09d      	sub	sp, #116	; 0x74
 80013f4:	4614      	mov	r4, r2
 80013f6:	4698      	mov	r8, r3
 80013f8:	4606      	mov	r6, r0
 80013fa:	b118      	cbz	r0, 8001404 <_vfiprintf_r+0x18>
 80013fc:	6a03      	ldr	r3, [r0, #32]
 80013fe:	b90b      	cbnz	r3, 8001404 <_vfiprintf_r+0x18>
 8001400:	f7ff fd76 	bl	8000ef0 <__sinit>
 8001404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001406:	07d9      	lsls	r1, r3, #31
 8001408:	d405      	bmi.n	8001416 <_vfiprintf_r+0x2a>
 800140a:	89ab      	ldrh	r3, [r5, #12]
 800140c:	059a      	lsls	r2, r3, #22
 800140e:	d402      	bmi.n	8001416 <_vfiprintf_r+0x2a>
 8001410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001412:	f7ff ff72 	bl	80012fa <__retarget_lock_acquire_recursive>
 8001416:	89ab      	ldrh	r3, [r5, #12]
 8001418:	071b      	lsls	r3, r3, #28
 800141a:	d501      	bpl.n	8001420 <_vfiprintf_r+0x34>
 800141c:	692b      	ldr	r3, [r5, #16]
 800141e:	b99b      	cbnz	r3, 8001448 <_vfiprintf_r+0x5c>
 8001420:	4629      	mov	r1, r5
 8001422:	4630      	mov	r0, r6
 8001424:	f7ff fe88 	bl	8001138 <__swsetup_r>
 8001428:	b170      	cbz	r0, 8001448 <_vfiprintf_r+0x5c>
 800142a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800142c:	07dc      	lsls	r4, r3, #31
 800142e:	d504      	bpl.n	800143a <_vfiprintf_r+0x4e>
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	b01d      	add	sp, #116	; 0x74
 8001436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800143a:	89ab      	ldrh	r3, [r5, #12]
 800143c:	0598      	lsls	r0, r3, #22
 800143e:	d4f7      	bmi.n	8001430 <_vfiprintf_r+0x44>
 8001440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001442:	f7ff ff5b 	bl	80012fc <__retarget_lock_release_recursive>
 8001446:	e7f3      	b.n	8001430 <_vfiprintf_r+0x44>
 8001448:	2300      	movs	r3, #0
 800144a:	9309      	str	r3, [sp, #36]	; 0x24
 800144c:	2320      	movs	r3, #32
 800144e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001452:	f8cd 800c 	str.w	r8, [sp, #12]
 8001456:	2330      	movs	r3, #48	; 0x30
 8001458:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800160c <_vfiprintf_r+0x220>
 800145c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001460:	f04f 0901 	mov.w	r9, #1
 8001464:	4623      	mov	r3, r4
 8001466:	469a      	mov	sl, r3
 8001468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800146c:	b10a      	cbz	r2, 8001472 <_vfiprintf_r+0x86>
 800146e:	2a25      	cmp	r2, #37	; 0x25
 8001470:	d1f9      	bne.n	8001466 <_vfiprintf_r+0x7a>
 8001472:	ebba 0b04 	subs.w	fp, sl, r4
 8001476:	d00b      	beq.n	8001490 <_vfiprintf_r+0xa4>
 8001478:	465b      	mov	r3, fp
 800147a:	4622      	mov	r2, r4
 800147c:	4629      	mov	r1, r5
 800147e:	4630      	mov	r0, r6
 8001480:	f7ff ffa1 	bl	80013c6 <__sfputs_r>
 8001484:	3001      	adds	r0, #1
 8001486:	f000 80a9 	beq.w	80015dc <_vfiprintf_r+0x1f0>
 800148a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800148c:	445a      	add	r2, fp
 800148e:	9209      	str	r2, [sp, #36]	; 0x24
 8001490:	f89a 3000 	ldrb.w	r3, [sl]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a1 	beq.w	80015dc <_vfiprintf_r+0x1f0>
 800149a:	2300      	movs	r3, #0
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80014a4:	f10a 0a01 	add.w	sl, sl, #1
 80014a8:	9304      	str	r3, [sp, #16]
 80014aa:	9307      	str	r3, [sp, #28]
 80014ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80014b0:	931a      	str	r3, [sp, #104]	; 0x68
 80014b2:	4654      	mov	r4, sl
 80014b4:	2205      	movs	r2, #5
 80014b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014ba:	4854      	ldr	r0, [pc, #336]	; (800160c <_vfiprintf_r+0x220>)
 80014bc:	f7fe fea8 	bl	8000210 <memchr>
 80014c0:	9a04      	ldr	r2, [sp, #16]
 80014c2:	b9d8      	cbnz	r0, 80014fc <_vfiprintf_r+0x110>
 80014c4:	06d1      	lsls	r1, r2, #27
 80014c6:	bf44      	itt	mi
 80014c8:	2320      	movmi	r3, #32
 80014ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014ce:	0713      	lsls	r3, r2, #28
 80014d0:	bf44      	itt	mi
 80014d2:	232b      	movmi	r3, #43	; 0x2b
 80014d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014d8:	f89a 3000 	ldrb.w	r3, [sl]
 80014dc:	2b2a      	cmp	r3, #42	; 0x2a
 80014de:	d015      	beq.n	800150c <_vfiprintf_r+0x120>
 80014e0:	9a07      	ldr	r2, [sp, #28]
 80014e2:	4654      	mov	r4, sl
 80014e4:	2000      	movs	r0, #0
 80014e6:	f04f 0c0a 	mov.w	ip, #10
 80014ea:	4621      	mov	r1, r4
 80014ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014f0:	3b30      	subs	r3, #48	; 0x30
 80014f2:	2b09      	cmp	r3, #9
 80014f4:	d94d      	bls.n	8001592 <_vfiprintf_r+0x1a6>
 80014f6:	b1b0      	cbz	r0, 8001526 <_vfiprintf_r+0x13a>
 80014f8:	9207      	str	r2, [sp, #28]
 80014fa:	e014      	b.n	8001526 <_vfiprintf_r+0x13a>
 80014fc:	eba0 0308 	sub.w	r3, r0, r8
 8001500:	fa09 f303 	lsl.w	r3, r9, r3
 8001504:	4313      	orrs	r3, r2
 8001506:	9304      	str	r3, [sp, #16]
 8001508:	46a2      	mov	sl, r4
 800150a:	e7d2      	b.n	80014b2 <_vfiprintf_r+0xc6>
 800150c:	9b03      	ldr	r3, [sp, #12]
 800150e:	1d19      	adds	r1, r3, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	9103      	str	r1, [sp, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	bfbb      	ittet	lt
 8001518:	425b      	neglt	r3, r3
 800151a:	f042 0202 	orrlt.w	r2, r2, #2
 800151e:	9307      	strge	r3, [sp, #28]
 8001520:	9307      	strlt	r3, [sp, #28]
 8001522:	bfb8      	it	lt
 8001524:	9204      	strlt	r2, [sp, #16]
 8001526:	7823      	ldrb	r3, [r4, #0]
 8001528:	2b2e      	cmp	r3, #46	; 0x2e
 800152a:	d10c      	bne.n	8001546 <_vfiprintf_r+0x15a>
 800152c:	7863      	ldrb	r3, [r4, #1]
 800152e:	2b2a      	cmp	r3, #42	; 0x2a
 8001530:	d134      	bne.n	800159c <_vfiprintf_r+0x1b0>
 8001532:	9b03      	ldr	r3, [sp, #12]
 8001534:	1d1a      	adds	r2, r3, #4
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	9203      	str	r2, [sp, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	bfb8      	it	lt
 800153e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001542:	3402      	adds	r4, #2
 8001544:	9305      	str	r3, [sp, #20]
 8001546:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800161c <_vfiprintf_r+0x230>
 800154a:	7821      	ldrb	r1, [r4, #0]
 800154c:	2203      	movs	r2, #3
 800154e:	4650      	mov	r0, sl
 8001550:	f7fe fe5e 	bl	8000210 <memchr>
 8001554:	b138      	cbz	r0, 8001566 <_vfiprintf_r+0x17a>
 8001556:	9b04      	ldr	r3, [sp, #16]
 8001558:	eba0 000a 	sub.w	r0, r0, sl
 800155c:	2240      	movs	r2, #64	; 0x40
 800155e:	4082      	lsls	r2, r0
 8001560:	4313      	orrs	r3, r2
 8001562:	3401      	adds	r4, #1
 8001564:	9304      	str	r3, [sp, #16]
 8001566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800156a:	4829      	ldr	r0, [pc, #164]	; (8001610 <_vfiprintf_r+0x224>)
 800156c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001570:	2206      	movs	r2, #6
 8001572:	f7fe fe4d 	bl	8000210 <memchr>
 8001576:	2800      	cmp	r0, #0
 8001578:	d03f      	beq.n	80015fa <_vfiprintf_r+0x20e>
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <_vfiprintf_r+0x228>)
 800157c:	bb1b      	cbnz	r3, 80015c6 <_vfiprintf_r+0x1da>
 800157e:	9b03      	ldr	r3, [sp, #12]
 8001580:	3307      	adds	r3, #7
 8001582:	f023 0307 	bic.w	r3, r3, #7
 8001586:	3308      	adds	r3, #8
 8001588:	9303      	str	r3, [sp, #12]
 800158a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800158c:	443b      	add	r3, r7
 800158e:	9309      	str	r3, [sp, #36]	; 0x24
 8001590:	e768      	b.n	8001464 <_vfiprintf_r+0x78>
 8001592:	fb0c 3202 	mla	r2, ip, r2, r3
 8001596:	460c      	mov	r4, r1
 8001598:	2001      	movs	r0, #1
 800159a:	e7a6      	b.n	80014ea <_vfiprintf_r+0xfe>
 800159c:	2300      	movs	r3, #0
 800159e:	3401      	adds	r4, #1
 80015a0:	9305      	str	r3, [sp, #20]
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 0c0a 	mov.w	ip, #10
 80015a8:	4620      	mov	r0, r4
 80015aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80015ae:	3a30      	subs	r2, #48	; 0x30
 80015b0:	2a09      	cmp	r2, #9
 80015b2:	d903      	bls.n	80015bc <_vfiprintf_r+0x1d0>
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0c6      	beq.n	8001546 <_vfiprintf_r+0x15a>
 80015b8:	9105      	str	r1, [sp, #20]
 80015ba:	e7c4      	b.n	8001546 <_vfiprintf_r+0x15a>
 80015bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80015c0:	4604      	mov	r4, r0
 80015c2:	2301      	movs	r3, #1
 80015c4:	e7f0      	b.n	80015a8 <_vfiprintf_r+0x1bc>
 80015c6:	ab03      	add	r3, sp, #12
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	462a      	mov	r2, r5
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <_vfiprintf_r+0x22c>)
 80015ce:	a904      	add	r1, sp, #16
 80015d0:	4630      	mov	r0, r6
 80015d2:	f3af 8000 	nop.w
 80015d6:	4607      	mov	r7, r0
 80015d8:	1c78      	adds	r0, r7, #1
 80015da:	d1d6      	bne.n	800158a <_vfiprintf_r+0x19e>
 80015dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80015de:	07d9      	lsls	r1, r3, #31
 80015e0:	d405      	bmi.n	80015ee <_vfiprintf_r+0x202>
 80015e2:	89ab      	ldrh	r3, [r5, #12]
 80015e4:	059a      	lsls	r2, r3, #22
 80015e6:	d402      	bmi.n	80015ee <_vfiprintf_r+0x202>
 80015e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80015ea:	f7ff fe87 	bl	80012fc <__retarget_lock_release_recursive>
 80015ee:	89ab      	ldrh	r3, [r5, #12]
 80015f0:	065b      	lsls	r3, r3, #25
 80015f2:	f53f af1d 	bmi.w	8001430 <_vfiprintf_r+0x44>
 80015f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80015f8:	e71c      	b.n	8001434 <_vfiprintf_r+0x48>
 80015fa:	ab03      	add	r3, sp, #12
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	462a      	mov	r2, r5
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <_vfiprintf_r+0x22c>)
 8001602:	a904      	add	r1, sp, #16
 8001604:	4630      	mov	r0, r6
 8001606:	f000 f879 	bl	80016fc <_printf_i>
 800160a:	e7e4      	b.n	80015d6 <_vfiprintf_r+0x1ea>
 800160c:	0800204d 	.word	0x0800204d
 8001610:	08002057 	.word	0x08002057
 8001614:	00000000 	.word	0x00000000
 8001618:	080013c7 	.word	0x080013c7
 800161c:	08002053 	.word	0x08002053

08001620 <_printf_common>:
 8001620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001624:	4616      	mov	r6, r2
 8001626:	4699      	mov	r9, r3
 8001628:	688a      	ldr	r2, [r1, #8]
 800162a:	690b      	ldr	r3, [r1, #16]
 800162c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001630:	4293      	cmp	r3, r2
 8001632:	bfb8      	it	lt
 8001634:	4613      	movlt	r3, r2
 8001636:	6033      	str	r3, [r6, #0]
 8001638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800163c:	4607      	mov	r7, r0
 800163e:	460c      	mov	r4, r1
 8001640:	b10a      	cbz	r2, 8001646 <_printf_common+0x26>
 8001642:	3301      	adds	r3, #1
 8001644:	6033      	str	r3, [r6, #0]
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	0699      	lsls	r1, r3, #26
 800164a:	bf42      	ittt	mi
 800164c:	6833      	ldrmi	r3, [r6, #0]
 800164e:	3302      	addmi	r3, #2
 8001650:	6033      	strmi	r3, [r6, #0]
 8001652:	6825      	ldr	r5, [r4, #0]
 8001654:	f015 0506 	ands.w	r5, r5, #6
 8001658:	d106      	bne.n	8001668 <_printf_common+0x48>
 800165a:	f104 0a19 	add.w	sl, r4, #25
 800165e:	68e3      	ldr	r3, [r4, #12]
 8001660:	6832      	ldr	r2, [r6, #0]
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	42ab      	cmp	r3, r5
 8001666:	dc26      	bgt.n	80016b6 <_printf_common+0x96>
 8001668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800166c:	1e13      	subs	r3, r2, #0
 800166e:	6822      	ldr	r2, [r4, #0]
 8001670:	bf18      	it	ne
 8001672:	2301      	movne	r3, #1
 8001674:	0692      	lsls	r2, r2, #26
 8001676:	d42b      	bmi.n	80016d0 <_printf_common+0xb0>
 8001678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800167c:	4649      	mov	r1, r9
 800167e:	4638      	mov	r0, r7
 8001680:	47c0      	blx	r8
 8001682:	3001      	adds	r0, #1
 8001684:	d01e      	beq.n	80016c4 <_printf_common+0xa4>
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	6922      	ldr	r2, [r4, #16]
 800168a:	f003 0306 	and.w	r3, r3, #6
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf02      	ittt	eq
 8001692:	68e5      	ldreq	r5, [r4, #12]
 8001694:	6833      	ldreq	r3, [r6, #0]
 8001696:	1aed      	subeq	r5, r5, r3
 8001698:	68a3      	ldr	r3, [r4, #8]
 800169a:	bf0c      	ite	eq
 800169c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016a0:	2500      	movne	r5, #0
 80016a2:	4293      	cmp	r3, r2
 80016a4:	bfc4      	itt	gt
 80016a6:	1a9b      	subgt	r3, r3, r2
 80016a8:	18ed      	addgt	r5, r5, r3
 80016aa:	2600      	movs	r6, #0
 80016ac:	341a      	adds	r4, #26
 80016ae:	42b5      	cmp	r5, r6
 80016b0:	d11a      	bne.n	80016e8 <_printf_common+0xc8>
 80016b2:	2000      	movs	r0, #0
 80016b4:	e008      	b.n	80016c8 <_printf_common+0xa8>
 80016b6:	2301      	movs	r3, #1
 80016b8:	4652      	mov	r2, sl
 80016ba:	4649      	mov	r1, r9
 80016bc:	4638      	mov	r0, r7
 80016be:	47c0      	blx	r8
 80016c0:	3001      	adds	r0, #1
 80016c2:	d103      	bne.n	80016cc <_printf_common+0xac>
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016cc:	3501      	adds	r5, #1
 80016ce:	e7c6      	b.n	800165e <_printf_common+0x3e>
 80016d0:	18e1      	adds	r1, r4, r3
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	2030      	movs	r0, #48	; 0x30
 80016d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016da:	4422      	add	r2, r4
 80016dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016e4:	3302      	adds	r3, #2
 80016e6:	e7c7      	b.n	8001678 <_printf_common+0x58>
 80016e8:	2301      	movs	r3, #1
 80016ea:	4622      	mov	r2, r4
 80016ec:	4649      	mov	r1, r9
 80016ee:	4638      	mov	r0, r7
 80016f0:	47c0      	blx	r8
 80016f2:	3001      	adds	r0, #1
 80016f4:	d0e6      	beq.n	80016c4 <_printf_common+0xa4>
 80016f6:	3601      	adds	r6, #1
 80016f8:	e7d9      	b.n	80016ae <_printf_common+0x8e>
	...

080016fc <_printf_i>:
 80016fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001700:	7e0f      	ldrb	r7, [r1, #24]
 8001702:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001704:	2f78      	cmp	r7, #120	; 0x78
 8001706:	4691      	mov	r9, r2
 8001708:	4680      	mov	r8, r0
 800170a:	460c      	mov	r4, r1
 800170c:	469a      	mov	sl, r3
 800170e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001712:	d807      	bhi.n	8001724 <_printf_i+0x28>
 8001714:	2f62      	cmp	r7, #98	; 0x62
 8001716:	d80a      	bhi.n	800172e <_printf_i+0x32>
 8001718:	2f00      	cmp	r7, #0
 800171a:	f000 80d4 	beq.w	80018c6 <_printf_i+0x1ca>
 800171e:	2f58      	cmp	r7, #88	; 0x58
 8001720:	f000 80c0 	beq.w	80018a4 <_printf_i+0x1a8>
 8001724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800172c:	e03a      	b.n	80017a4 <_printf_i+0xa8>
 800172e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001732:	2b15      	cmp	r3, #21
 8001734:	d8f6      	bhi.n	8001724 <_printf_i+0x28>
 8001736:	a101      	add	r1, pc, #4	; (adr r1, 800173c <_printf_i+0x40>)
 8001738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800173c:	08001795 	.word	0x08001795
 8001740:	080017a9 	.word	0x080017a9
 8001744:	08001725 	.word	0x08001725
 8001748:	08001725 	.word	0x08001725
 800174c:	08001725 	.word	0x08001725
 8001750:	08001725 	.word	0x08001725
 8001754:	080017a9 	.word	0x080017a9
 8001758:	08001725 	.word	0x08001725
 800175c:	08001725 	.word	0x08001725
 8001760:	08001725 	.word	0x08001725
 8001764:	08001725 	.word	0x08001725
 8001768:	080018ad 	.word	0x080018ad
 800176c:	080017d5 	.word	0x080017d5
 8001770:	08001867 	.word	0x08001867
 8001774:	08001725 	.word	0x08001725
 8001778:	08001725 	.word	0x08001725
 800177c:	080018cf 	.word	0x080018cf
 8001780:	08001725 	.word	0x08001725
 8001784:	080017d5 	.word	0x080017d5
 8001788:	08001725 	.word	0x08001725
 800178c:	08001725 	.word	0x08001725
 8001790:	0800186f 	.word	0x0800186f
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	1d1a      	adds	r2, r3, #4
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	602a      	str	r2, [r5, #0]
 800179c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80017a4:	2301      	movs	r3, #1
 80017a6:	e09f      	b.n	80018e8 <_printf_i+0x1ec>
 80017a8:	6820      	ldr	r0, [r4, #0]
 80017aa:	682b      	ldr	r3, [r5, #0]
 80017ac:	0607      	lsls	r7, r0, #24
 80017ae:	f103 0104 	add.w	r1, r3, #4
 80017b2:	6029      	str	r1, [r5, #0]
 80017b4:	d501      	bpl.n	80017ba <_printf_i+0xbe>
 80017b6:	681e      	ldr	r6, [r3, #0]
 80017b8:	e003      	b.n	80017c2 <_printf_i+0xc6>
 80017ba:	0646      	lsls	r6, r0, #25
 80017bc:	d5fb      	bpl.n	80017b6 <_printf_i+0xba>
 80017be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80017c2:	2e00      	cmp	r6, #0
 80017c4:	da03      	bge.n	80017ce <_printf_i+0xd2>
 80017c6:	232d      	movs	r3, #45	; 0x2d
 80017c8:	4276      	negs	r6, r6
 80017ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017ce:	485a      	ldr	r0, [pc, #360]	; (8001938 <_printf_i+0x23c>)
 80017d0:	230a      	movs	r3, #10
 80017d2:	e012      	b.n	80017fa <_printf_i+0xfe>
 80017d4:	682b      	ldr	r3, [r5, #0]
 80017d6:	6820      	ldr	r0, [r4, #0]
 80017d8:	1d19      	adds	r1, r3, #4
 80017da:	6029      	str	r1, [r5, #0]
 80017dc:	0605      	lsls	r5, r0, #24
 80017de:	d501      	bpl.n	80017e4 <_printf_i+0xe8>
 80017e0:	681e      	ldr	r6, [r3, #0]
 80017e2:	e002      	b.n	80017ea <_printf_i+0xee>
 80017e4:	0641      	lsls	r1, r0, #25
 80017e6:	d5fb      	bpl.n	80017e0 <_printf_i+0xe4>
 80017e8:	881e      	ldrh	r6, [r3, #0]
 80017ea:	4853      	ldr	r0, [pc, #332]	; (8001938 <_printf_i+0x23c>)
 80017ec:	2f6f      	cmp	r7, #111	; 0x6f
 80017ee:	bf0c      	ite	eq
 80017f0:	2308      	moveq	r3, #8
 80017f2:	230a      	movne	r3, #10
 80017f4:	2100      	movs	r1, #0
 80017f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80017fa:	6865      	ldr	r5, [r4, #4]
 80017fc:	60a5      	str	r5, [r4, #8]
 80017fe:	2d00      	cmp	r5, #0
 8001800:	bfa2      	ittt	ge
 8001802:	6821      	ldrge	r1, [r4, #0]
 8001804:	f021 0104 	bicge.w	r1, r1, #4
 8001808:	6021      	strge	r1, [r4, #0]
 800180a:	b90e      	cbnz	r6, 8001810 <_printf_i+0x114>
 800180c:	2d00      	cmp	r5, #0
 800180e:	d04b      	beq.n	80018a8 <_printf_i+0x1ac>
 8001810:	4615      	mov	r5, r2
 8001812:	fbb6 f1f3 	udiv	r1, r6, r3
 8001816:	fb03 6711 	mls	r7, r3, r1, r6
 800181a:	5dc7      	ldrb	r7, [r0, r7]
 800181c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001820:	4637      	mov	r7, r6
 8001822:	42bb      	cmp	r3, r7
 8001824:	460e      	mov	r6, r1
 8001826:	d9f4      	bls.n	8001812 <_printf_i+0x116>
 8001828:	2b08      	cmp	r3, #8
 800182a:	d10b      	bne.n	8001844 <_printf_i+0x148>
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	07de      	lsls	r6, r3, #31
 8001830:	d508      	bpl.n	8001844 <_printf_i+0x148>
 8001832:	6923      	ldr	r3, [r4, #16]
 8001834:	6861      	ldr	r1, [r4, #4]
 8001836:	4299      	cmp	r1, r3
 8001838:	bfde      	ittt	le
 800183a:	2330      	movle	r3, #48	; 0x30
 800183c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001840:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001844:	1b52      	subs	r2, r2, r5
 8001846:	6122      	str	r2, [r4, #16]
 8001848:	f8cd a000 	str.w	sl, [sp]
 800184c:	464b      	mov	r3, r9
 800184e:	aa03      	add	r2, sp, #12
 8001850:	4621      	mov	r1, r4
 8001852:	4640      	mov	r0, r8
 8001854:	f7ff fee4 	bl	8001620 <_printf_common>
 8001858:	3001      	adds	r0, #1
 800185a:	d14a      	bne.n	80018f2 <_printf_i+0x1f6>
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	b004      	add	sp, #16
 8001862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	f043 0320 	orr.w	r3, r3, #32
 800186c:	6023      	str	r3, [r4, #0]
 800186e:	4833      	ldr	r0, [pc, #204]	; (800193c <_printf_i+0x240>)
 8001870:	2778      	movs	r7, #120	; 0x78
 8001872:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	6829      	ldr	r1, [r5, #0]
 800187a:	061f      	lsls	r7, r3, #24
 800187c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001880:	d402      	bmi.n	8001888 <_printf_i+0x18c>
 8001882:	065f      	lsls	r7, r3, #25
 8001884:	bf48      	it	mi
 8001886:	b2b6      	uxthmi	r6, r6
 8001888:	07df      	lsls	r7, r3, #31
 800188a:	bf48      	it	mi
 800188c:	f043 0320 	orrmi.w	r3, r3, #32
 8001890:	6029      	str	r1, [r5, #0]
 8001892:	bf48      	it	mi
 8001894:	6023      	strmi	r3, [r4, #0]
 8001896:	b91e      	cbnz	r6, 80018a0 <_printf_i+0x1a4>
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	f023 0320 	bic.w	r3, r3, #32
 800189e:	6023      	str	r3, [r4, #0]
 80018a0:	2310      	movs	r3, #16
 80018a2:	e7a7      	b.n	80017f4 <_printf_i+0xf8>
 80018a4:	4824      	ldr	r0, [pc, #144]	; (8001938 <_printf_i+0x23c>)
 80018a6:	e7e4      	b.n	8001872 <_printf_i+0x176>
 80018a8:	4615      	mov	r5, r2
 80018aa:	e7bd      	b.n	8001828 <_printf_i+0x12c>
 80018ac:	682b      	ldr	r3, [r5, #0]
 80018ae:	6826      	ldr	r6, [r4, #0]
 80018b0:	6961      	ldr	r1, [r4, #20]
 80018b2:	1d18      	adds	r0, r3, #4
 80018b4:	6028      	str	r0, [r5, #0]
 80018b6:	0635      	lsls	r5, r6, #24
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	d501      	bpl.n	80018c0 <_printf_i+0x1c4>
 80018bc:	6019      	str	r1, [r3, #0]
 80018be:	e002      	b.n	80018c6 <_printf_i+0x1ca>
 80018c0:	0670      	lsls	r0, r6, #25
 80018c2:	d5fb      	bpl.n	80018bc <_printf_i+0x1c0>
 80018c4:	8019      	strh	r1, [r3, #0]
 80018c6:	2300      	movs	r3, #0
 80018c8:	6123      	str	r3, [r4, #16]
 80018ca:	4615      	mov	r5, r2
 80018cc:	e7bc      	b.n	8001848 <_printf_i+0x14c>
 80018ce:	682b      	ldr	r3, [r5, #0]
 80018d0:	1d1a      	adds	r2, r3, #4
 80018d2:	602a      	str	r2, [r5, #0]
 80018d4:	681d      	ldr	r5, [r3, #0]
 80018d6:	6862      	ldr	r2, [r4, #4]
 80018d8:	2100      	movs	r1, #0
 80018da:	4628      	mov	r0, r5
 80018dc:	f7fe fc98 	bl	8000210 <memchr>
 80018e0:	b108      	cbz	r0, 80018e6 <_printf_i+0x1ea>
 80018e2:	1b40      	subs	r0, r0, r5
 80018e4:	6060      	str	r0, [r4, #4]
 80018e6:	6863      	ldr	r3, [r4, #4]
 80018e8:	6123      	str	r3, [r4, #16]
 80018ea:	2300      	movs	r3, #0
 80018ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018f0:	e7aa      	b.n	8001848 <_printf_i+0x14c>
 80018f2:	6923      	ldr	r3, [r4, #16]
 80018f4:	462a      	mov	r2, r5
 80018f6:	4649      	mov	r1, r9
 80018f8:	4640      	mov	r0, r8
 80018fa:	47d0      	blx	sl
 80018fc:	3001      	adds	r0, #1
 80018fe:	d0ad      	beq.n	800185c <_printf_i+0x160>
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	079b      	lsls	r3, r3, #30
 8001904:	d413      	bmi.n	800192e <_printf_i+0x232>
 8001906:	68e0      	ldr	r0, [r4, #12]
 8001908:	9b03      	ldr	r3, [sp, #12]
 800190a:	4298      	cmp	r0, r3
 800190c:	bfb8      	it	lt
 800190e:	4618      	movlt	r0, r3
 8001910:	e7a6      	b.n	8001860 <_printf_i+0x164>
 8001912:	2301      	movs	r3, #1
 8001914:	4632      	mov	r2, r6
 8001916:	4649      	mov	r1, r9
 8001918:	4640      	mov	r0, r8
 800191a:	47d0      	blx	sl
 800191c:	3001      	adds	r0, #1
 800191e:	d09d      	beq.n	800185c <_printf_i+0x160>
 8001920:	3501      	adds	r5, #1
 8001922:	68e3      	ldr	r3, [r4, #12]
 8001924:	9903      	ldr	r1, [sp, #12]
 8001926:	1a5b      	subs	r3, r3, r1
 8001928:	42ab      	cmp	r3, r5
 800192a:	dcf2      	bgt.n	8001912 <_printf_i+0x216>
 800192c:	e7eb      	b.n	8001906 <_printf_i+0x20a>
 800192e:	2500      	movs	r5, #0
 8001930:	f104 0619 	add.w	r6, r4, #25
 8001934:	e7f5      	b.n	8001922 <_printf_i+0x226>
 8001936:	bf00      	nop
 8001938:	0800205e 	.word	0x0800205e
 800193c:	0800206f 	.word	0x0800206f

08001940 <__sflush_r>:
 8001940:	898a      	ldrh	r2, [r1, #12]
 8001942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001946:	4605      	mov	r5, r0
 8001948:	0710      	lsls	r0, r2, #28
 800194a:	460c      	mov	r4, r1
 800194c:	d458      	bmi.n	8001a00 <__sflush_r+0xc0>
 800194e:	684b      	ldr	r3, [r1, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	dc05      	bgt.n	8001960 <__sflush_r+0x20>
 8001954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	dc02      	bgt.n	8001960 <__sflush_r+0x20>
 800195a:	2000      	movs	r0, #0
 800195c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001962:	2e00      	cmp	r6, #0
 8001964:	d0f9      	beq.n	800195a <__sflush_r+0x1a>
 8001966:	2300      	movs	r3, #0
 8001968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800196c:	682f      	ldr	r7, [r5, #0]
 800196e:	6a21      	ldr	r1, [r4, #32]
 8001970:	602b      	str	r3, [r5, #0]
 8001972:	d032      	beq.n	80019da <__sflush_r+0x9a>
 8001974:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001976:	89a3      	ldrh	r3, [r4, #12]
 8001978:	075a      	lsls	r2, r3, #29
 800197a:	d505      	bpl.n	8001988 <__sflush_r+0x48>
 800197c:	6863      	ldr	r3, [r4, #4]
 800197e:	1ac0      	subs	r0, r0, r3
 8001980:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001982:	b10b      	cbz	r3, 8001988 <__sflush_r+0x48>
 8001984:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001986:	1ac0      	subs	r0, r0, r3
 8001988:	2300      	movs	r3, #0
 800198a:	4602      	mov	r2, r0
 800198c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800198e:	6a21      	ldr	r1, [r4, #32]
 8001990:	4628      	mov	r0, r5
 8001992:	47b0      	blx	r6
 8001994:	1c43      	adds	r3, r0, #1
 8001996:	89a3      	ldrh	r3, [r4, #12]
 8001998:	d106      	bne.n	80019a8 <__sflush_r+0x68>
 800199a:	6829      	ldr	r1, [r5, #0]
 800199c:	291d      	cmp	r1, #29
 800199e:	d82b      	bhi.n	80019f8 <__sflush_r+0xb8>
 80019a0:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <__sflush_r+0x108>)
 80019a2:	410a      	asrs	r2, r1
 80019a4:	07d6      	lsls	r6, r2, #31
 80019a6:	d427      	bmi.n	80019f8 <__sflush_r+0xb8>
 80019a8:	2200      	movs	r2, #0
 80019aa:	6062      	str	r2, [r4, #4]
 80019ac:	04d9      	lsls	r1, r3, #19
 80019ae:	6922      	ldr	r2, [r4, #16]
 80019b0:	6022      	str	r2, [r4, #0]
 80019b2:	d504      	bpl.n	80019be <__sflush_r+0x7e>
 80019b4:	1c42      	adds	r2, r0, #1
 80019b6:	d101      	bne.n	80019bc <__sflush_r+0x7c>
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	b903      	cbnz	r3, 80019be <__sflush_r+0x7e>
 80019bc:	6560      	str	r0, [r4, #84]	; 0x54
 80019be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019c0:	602f      	str	r7, [r5, #0]
 80019c2:	2900      	cmp	r1, #0
 80019c4:	d0c9      	beq.n	800195a <__sflush_r+0x1a>
 80019c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019ca:	4299      	cmp	r1, r3
 80019cc:	d002      	beq.n	80019d4 <__sflush_r+0x94>
 80019ce:	4628      	mov	r0, r5
 80019d0:	f7ff fc96 	bl	8001300 <_free_r>
 80019d4:	2000      	movs	r0, #0
 80019d6:	6360      	str	r0, [r4, #52]	; 0x34
 80019d8:	e7c0      	b.n	800195c <__sflush_r+0x1c>
 80019da:	2301      	movs	r3, #1
 80019dc:	4628      	mov	r0, r5
 80019de:	47b0      	blx	r6
 80019e0:	1c41      	adds	r1, r0, #1
 80019e2:	d1c8      	bne.n	8001976 <__sflush_r+0x36>
 80019e4:	682b      	ldr	r3, [r5, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0c5      	beq.n	8001976 <__sflush_r+0x36>
 80019ea:	2b1d      	cmp	r3, #29
 80019ec:	d001      	beq.n	80019f2 <__sflush_r+0xb2>
 80019ee:	2b16      	cmp	r3, #22
 80019f0:	d101      	bne.n	80019f6 <__sflush_r+0xb6>
 80019f2:	602f      	str	r7, [r5, #0]
 80019f4:	e7b1      	b.n	800195a <__sflush_r+0x1a>
 80019f6:	89a3      	ldrh	r3, [r4, #12]
 80019f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019fc:	81a3      	strh	r3, [r4, #12]
 80019fe:	e7ad      	b.n	800195c <__sflush_r+0x1c>
 8001a00:	690f      	ldr	r7, [r1, #16]
 8001a02:	2f00      	cmp	r7, #0
 8001a04:	d0a9      	beq.n	800195a <__sflush_r+0x1a>
 8001a06:	0793      	lsls	r3, r2, #30
 8001a08:	680e      	ldr	r6, [r1, #0]
 8001a0a:	bf08      	it	eq
 8001a0c:	694b      	ldreq	r3, [r1, #20]
 8001a0e:	600f      	str	r7, [r1, #0]
 8001a10:	bf18      	it	ne
 8001a12:	2300      	movne	r3, #0
 8001a14:	eba6 0807 	sub.w	r8, r6, r7
 8001a18:	608b      	str	r3, [r1, #8]
 8001a1a:	f1b8 0f00 	cmp.w	r8, #0
 8001a1e:	dd9c      	ble.n	800195a <__sflush_r+0x1a>
 8001a20:	6a21      	ldr	r1, [r4, #32]
 8001a22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a24:	4643      	mov	r3, r8
 8001a26:	463a      	mov	r2, r7
 8001a28:	4628      	mov	r0, r5
 8001a2a:	47b0      	blx	r6
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	dc06      	bgt.n	8001a3e <__sflush_r+0xfe>
 8001a30:	89a3      	ldrh	r3, [r4, #12]
 8001a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a36:	81a3      	strh	r3, [r4, #12]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	e78e      	b.n	800195c <__sflush_r+0x1c>
 8001a3e:	4407      	add	r7, r0
 8001a40:	eba8 0800 	sub.w	r8, r8, r0
 8001a44:	e7e9      	b.n	8001a1a <__sflush_r+0xda>
 8001a46:	bf00      	nop
 8001a48:	dfbffffe 	.word	0xdfbffffe

08001a4c <_fflush_r>:
 8001a4c:	b538      	push	{r3, r4, r5, lr}
 8001a4e:	690b      	ldr	r3, [r1, #16]
 8001a50:	4605      	mov	r5, r0
 8001a52:	460c      	mov	r4, r1
 8001a54:	b913      	cbnz	r3, 8001a5c <_fflush_r+0x10>
 8001a56:	2500      	movs	r5, #0
 8001a58:	4628      	mov	r0, r5
 8001a5a:	bd38      	pop	{r3, r4, r5, pc}
 8001a5c:	b118      	cbz	r0, 8001a66 <_fflush_r+0x1a>
 8001a5e:	6a03      	ldr	r3, [r0, #32]
 8001a60:	b90b      	cbnz	r3, 8001a66 <_fflush_r+0x1a>
 8001a62:	f7ff fa45 	bl	8000ef0 <__sinit>
 8001a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f3      	beq.n	8001a56 <_fflush_r+0xa>
 8001a6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001a70:	07d0      	lsls	r0, r2, #31
 8001a72:	d404      	bmi.n	8001a7e <_fflush_r+0x32>
 8001a74:	0599      	lsls	r1, r3, #22
 8001a76:	d402      	bmi.n	8001a7e <_fflush_r+0x32>
 8001a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a7a:	f7ff fc3e 	bl	80012fa <__retarget_lock_acquire_recursive>
 8001a7e:	4628      	mov	r0, r5
 8001a80:	4621      	mov	r1, r4
 8001a82:	f7ff ff5d 	bl	8001940 <__sflush_r>
 8001a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a88:	07da      	lsls	r2, r3, #31
 8001a8a:	4605      	mov	r5, r0
 8001a8c:	d4e4      	bmi.n	8001a58 <_fflush_r+0xc>
 8001a8e:	89a3      	ldrh	r3, [r4, #12]
 8001a90:	059b      	lsls	r3, r3, #22
 8001a92:	d4e1      	bmi.n	8001a58 <_fflush_r+0xc>
 8001a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a96:	f7ff fc31 	bl	80012fc <__retarget_lock_release_recursive>
 8001a9a:	e7dd      	b.n	8001a58 <_fflush_r+0xc>

08001a9c <__swhatbuf_r>:
 8001a9c:	b570      	push	{r4, r5, r6, lr}
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aa4:	2900      	cmp	r1, #0
 8001aa6:	b096      	sub	sp, #88	; 0x58
 8001aa8:	4615      	mov	r5, r2
 8001aaa:	461e      	mov	r6, r3
 8001aac:	da0d      	bge.n	8001aca <__swhatbuf_r+0x2e>
 8001aae:	89a3      	ldrh	r3, [r4, #12]
 8001ab0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	bf0c      	ite	eq
 8001aba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001abe:	2340      	movne	r3, #64	; 0x40
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	6031      	str	r1, [r6, #0]
 8001ac4:	602b      	str	r3, [r5, #0]
 8001ac6:	b016      	add	sp, #88	; 0x58
 8001ac8:	bd70      	pop	{r4, r5, r6, pc}
 8001aca:	466a      	mov	r2, sp
 8001acc:	f000 f848 	bl	8001b60 <_fstat_r>
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	dbec      	blt.n	8001aae <__swhatbuf_r+0x12>
 8001ad4:	9901      	ldr	r1, [sp, #4]
 8001ad6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001ada:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001ade:	4259      	negs	r1, r3
 8001ae0:	4159      	adcs	r1, r3
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	e7eb      	b.n	8001ac0 <__swhatbuf_r+0x24>

08001ae8 <__smakebuf_r>:
 8001ae8:	898b      	ldrh	r3, [r1, #12]
 8001aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001aec:	079d      	lsls	r5, r3, #30
 8001aee:	4606      	mov	r6, r0
 8001af0:	460c      	mov	r4, r1
 8001af2:	d507      	bpl.n	8001b04 <__smakebuf_r+0x1c>
 8001af4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001af8:	6023      	str	r3, [r4, #0]
 8001afa:	6123      	str	r3, [r4, #16]
 8001afc:	2301      	movs	r3, #1
 8001afe:	6163      	str	r3, [r4, #20]
 8001b00:	b002      	add	sp, #8
 8001b02:	bd70      	pop	{r4, r5, r6, pc}
 8001b04:	ab01      	add	r3, sp, #4
 8001b06:	466a      	mov	r2, sp
 8001b08:	f7ff ffc8 	bl	8001a9c <__swhatbuf_r>
 8001b0c:	9900      	ldr	r1, [sp, #0]
 8001b0e:	4605      	mov	r5, r0
 8001b10:	4630      	mov	r0, r6
 8001b12:	f7ff f8d5 	bl	8000cc0 <_malloc_r>
 8001b16:	b948      	cbnz	r0, 8001b2c <__smakebuf_r+0x44>
 8001b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b1c:	059a      	lsls	r2, r3, #22
 8001b1e:	d4ef      	bmi.n	8001b00 <__smakebuf_r+0x18>
 8001b20:	f023 0303 	bic.w	r3, r3, #3
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	81a3      	strh	r3, [r4, #12]
 8001b2a:	e7e3      	b.n	8001af4 <__smakebuf_r+0xc>
 8001b2c:	89a3      	ldrh	r3, [r4, #12]
 8001b2e:	6020      	str	r0, [r4, #0]
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	81a3      	strh	r3, [r4, #12]
 8001b36:	9b00      	ldr	r3, [sp, #0]
 8001b38:	6163      	str	r3, [r4, #20]
 8001b3a:	9b01      	ldr	r3, [sp, #4]
 8001b3c:	6120      	str	r0, [r4, #16]
 8001b3e:	b15b      	cbz	r3, 8001b58 <__smakebuf_r+0x70>
 8001b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b44:	4630      	mov	r0, r6
 8001b46:	f000 f81d 	bl	8001b84 <_isatty_r>
 8001b4a:	b128      	cbz	r0, 8001b58 <__smakebuf_r+0x70>
 8001b4c:	89a3      	ldrh	r3, [r4, #12]
 8001b4e:	f023 0303 	bic.w	r3, r3, #3
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	81a3      	strh	r3, [r4, #12]
 8001b58:	89a3      	ldrh	r3, [r4, #12]
 8001b5a:	431d      	orrs	r5, r3
 8001b5c:	81a5      	strh	r5, [r4, #12]
 8001b5e:	e7cf      	b.n	8001b00 <__smakebuf_r+0x18>

08001b60 <_fstat_r>:
 8001b60:	b538      	push	{r3, r4, r5, lr}
 8001b62:	4d07      	ldr	r5, [pc, #28]	; (8001b80 <_fstat_r+0x20>)
 8001b64:	2300      	movs	r3, #0
 8001b66:	4604      	mov	r4, r0
 8001b68:	4608      	mov	r0, r1
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	602b      	str	r3, [r5, #0]
 8001b6e:	f7fe feda 	bl	8000926 <_fstat>
 8001b72:	1c43      	adds	r3, r0, #1
 8001b74:	d102      	bne.n	8001b7c <_fstat_r+0x1c>
 8001b76:	682b      	ldr	r3, [r5, #0]
 8001b78:	b103      	cbz	r3, 8001b7c <_fstat_r+0x1c>
 8001b7a:	6023      	str	r3, [r4, #0]
 8001b7c:	bd38      	pop	{r3, r4, r5, pc}
 8001b7e:	bf00      	nop
 8001b80:	200001cc 	.word	0x200001cc

08001b84 <_isatty_r>:
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	4d06      	ldr	r5, [pc, #24]	; (8001ba0 <_isatty_r+0x1c>)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	4608      	mov	r0, r1
 8001b8e:	602b      	str	r3, [r5, #0]
 8001b90:	f7fe fed9 	bl	8000946 <_isatty>
 8001b94:	1c43      	adds	r3, r0, #1
 8001b96:	d102      	bne.n	8001b9e <_isatty_r+0x1a>
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	b103      	cbz	r3, 8001b9e <_isatty_r+0x1a>
 8001b9c:	6023      	str	r3, [r4, #0]
 8001b9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ba0:	200001cc 	.word	0x200001cc

08001ba4 <_init>:
 8001ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba6:	bf00      	nop
 8001ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001baa:	bc08      	pop	{r3}
 8001bac:	469e      	mov	lr, r3
 8001bae:	4770      	bx	lr

08001bb0 <_fini>:
 8001bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb2:	bf00      	nop
 8001bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bb6:	bc08      	pop	{r3}
 8001bb8:	469e      	mov	lr, r3
 8001bba:	4770      	bx	lr
