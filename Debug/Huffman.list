
Huffman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001968  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08001b38  08001b38  00002b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cf0  08001cf0  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001cf0  08001cf0  00002cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001cf8  08001cf8  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cf8  08001cf8  00002cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001cfc  08001cfc  00002cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001d00  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000060  08001d60  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08001d60  000031d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a3c  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cf7  00000000  00000000  00005acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000290  00000000  00000000  000067c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001bd  00000000  00000000  00006a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af83  00000000  00000000  00006c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000416a  00000000  00000000  00021b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090fed  00000000  00000000  00025d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6cef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ff0  00000000  00000000  000b6d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b7d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001b20 	.word	0x08001b20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08001b20 	.word	0x08001b20

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <creerFeuille>:
#include <stdlib.h>

uint32_t compte = 0;

	void creerFeuille(struct noeud * arbre[256], uint32_t tab[256])
	{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]


		for(uint32_t i=0;i<256;i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e04d      	b.n	800035c <creerFeuille+0xac>
		{
			if (tab[i] != 0)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	4413      	add	r3, r2
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d043      	beq.n	8000356 <creerFeuille+0xa6>
			{
				arbre[compte]= malloc(sizeof(struct noeud));
 80002ce:	4b27      	ldr	r3, [pc, #156]	@ (800036c <creerFeuille+0xbc>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	18d4      	adds	r4, r2, r3
 80002d8:	2018      	movs	r0, #24
 80002da:	f000 fc51 	bl	8000b80 <malloc>
 80002de:	4603      	mov	r3, r0
 80002e0:	6023      	str	r3, [r4, #0]
				arbre[compte]->c = i;
 80002e2:	4b22      	ldr	r3, [pc, #136]	@ (800036c <creerFeuille+0xbc>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	4413      	add	r3, r2
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	701a      	strb	r2, [r3, #0]
				arbre[compte]->occurence = tab[i];
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	683a      	ldr	r2, [r7, #0]
 80002fa:	441a      	add	r2, r3
 80002fc:	4b1b      	ldr	r3, [pc, #108]	@ (800036c <creerFeuille+0xbc>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	6879      	ldr	r1, [r7, #4]
 8000304:	440b      	add	r3, r1
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	605a      	str	r2, [r3, #4]
				arbre[compte]->code = 0;
 800030c:	4b17      	ldr	r3, [pc, #92]	@ (800036c <creerFeuille+0xbc>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
				arbre[compte]->tailleCode = 0;
 800031c:	4b13      	ldr	r3, [pc, #76]	@ (800036c <creerFeuille+0xbc>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	4413      	add	r3, r2
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
				arbre[compte]->droite = NULL;
 800032c:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <creerFeuille+0xbc>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	4413      	add	r3, r2
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
				arbre[compte]->gauche = NULL;
 800033c:	4b0b      	ldr	r3, [pc, #44]	@ (800036c <creerFeuille+0xbc>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]

				compte++;
 800034c:	4b07      	ldr	r3, [pc, #28]	@ (800036c <creerFeuille+0xbc>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	4a06      	ldr	r2, [pc, #24]	@ (800036c <creerFeuille+0xbc>)
 8000354:	6013      	str	r3, [r2, #0]
		for(uint32_t i=0;i<256;i++)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	3301      	adds	r3, #1
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	2bff      	cmp	r3, #255	@ 0xff
 8000360:	d9ae      	bls.n	80002c0 <creerFeuille+0x10>
			}
		}
	}
 8000362:	bf00      	nop
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bd90      	pop	{r4, r7, pc}
 800036c:	2000007c 	.word	0x2000007c

08000370 <afficherTabArbreHuffman>:
		}
	return compteur;
	}
/////////////////////////////////////////////////////////////////////////////////////////////////
	void afficherTabArbreHuffman(struct noeud* arbre[256] , uint32_t taille)
	{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]

		for(uint32_t i=0;i<taille;i++)
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	e02d      	b.n	80003dc <afficherTabArbreHuffman+0x6c>
		{
			printf("le caractere initial est %c \r\n",arbre[i]->c);
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	4413      	add	r3, r2
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4619      	mov	r1, r3
 800038e:	4818      	ldr	r0, [pc, #96]	@ (80003f0 <afficherTabArbreHuffman+0x80>)
 8000390:	f000 fd6e 	bl	8000e70 <iprintf>
			printf("le nombre d'occurences est %d \r\n",arbre[i]->occurence);
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	4413      	add	r3, r2
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	4619      	mov	r1, r3
 80003a2:	4814      	ldr	r0, [pc, #80]	@ (80003f4 <afficherTabArbreHuffman+0x84>)
 80003a4:	f000 fd64 	bl	8000e70 <iprintf>
			printf("le code binaire dans l'arbre est %x \r\n",arbre[i]->code);
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	4413      	add	r3, r2
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4619      	mov	r1, r3
 80003b6:	4810      	ldr	r0, [pc, #64]	@ (80003f8 <afficherTabArbreHuffman+0x88>)
 80003b8:	f000 fd5a 	bl	8000e70 <iprintf>
			printf("le nombre de bits du code est %d \r\n",arbre[i]->tailleCode);
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	4413      	add	r3, r2
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	4619      	mov	r1, r3
 80003ca:	480c      	ldr	r0, [pc, #48]	@ (80003fc <afficherTabArbreHuffman+0x8c>)
 80003cc:	f000 fd50 	bl	8000e70 <iprintf>
			printf("\n");
 80003d0:	200a      	movs	r0, #10
 80003d2:	f000 fd5f 	bl	8000e94 <putchar>
		for(uint32_t i=0;i<taille;i++)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3301      	adds	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fa      	ldr	r2, [r7, #12]
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d3cd      	bcc.n	8000380 <afficherTabArbreHuffman+0x10>
		}
	}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	08001b38 	.word	0x08001b38
 80003f4:	08001b58 	.word	0x08001b58
 80003f8:	08001b7c 	.word	0x08001b7c
 80003fc:	08001ba4 	.word	0x08001ba4

08000400 <trieArbre>:
				}
	return compteur;
	}*/
//////////////////////////////////////////////////////////////////////////////////////////////////
	void trieArbre(struct noeud* arbre[256] , uint32_t taille)
	{
 8000400:	b480      	push	{r7}
 8000402:	b087      	sub	sp, #28
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
		struct noeud* temp;

		    for (uint32_t i = 0; i < taille - 1; i++)
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e036      	b.n	800047e <trieArbre+0x7e>
		    {
		        for (uint32_t j = 0; j < taille - i - 1; j++)
 8000410:	2300      	movs	r3, #0
 8000412:	613b      	str	r3, [r7, #16]
 8000414:	e029      	b.n	800046a <trieArbre+0x6a>
		        {
		            if (arbre[j]->occurence > arbre[j + 1]->occurence)
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	685a      	ldr	r2, [r3, #4]
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	3301      	adds	r3, #1
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	6879      	ldr	r1, [r7, #4]
 800042a:	440b      	add	r3, r1
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	429a      	cmp	r2, r3
 8000432:	d917      	bls.n	8000464 <trieArbre+0x64>
		            {
		                // Échange des éléments
		                temp = arbre[j];
 8000434:	693b      	ldr	r3, [r7, #16]
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	4413      	add	r3, r2
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	60fb      	str	r3, [r7, #12]
		                arbre[j] = arbre[j + 1];
 8000440:	693b      	ldr	r3, [r7, #16]
 8000442:	3301      	adds	r3, #1
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	441a      	add	r2, r3
 800044a:	693b      	ldr	r3, [r7, #16]
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	440b      	add	r3, r1
 8000452:	6812      	ldr	r2, [r2, #0]
 8000454:	601a      	str	r2, [r3, #0]
		                arbre[j + 1] = temp;
 8000456:	693b      	ldr	r3, [r7, #16]
 8000458:	3301      	adds	r3, #1
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	4413      	add	r3, r2
 8000460:	68fa      	ldr	r2, [r7, #12]
 8000462:	601a      	str	r2, [r3, #0]
		        for (uint32_t j = 0; j < taille - i - 1; j++)
 8000464:	693b      	ldr	r3, [r7, #16]
 8000466:	3301      	adds	r3, #1
 8000468:	613b      	str	r3, [r7, #16]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	3b01      	subs	r3, #1
 8000472:	693a      	ldr	r2, [r7, #16]
 8000474:	429a      	cmp	r2, r3
 8000476:	d3ce      	bcc.n	8000416 <trieArbre+0x16>
		    for (uint32_t i = 0; i < taille - 1; i++)
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	3301      	adds	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	3b01      	subs	r3, #1
 8000482:	697a      	ldr	r2, [r7, #20]
 8000484:	429a      	cmp	r2, r3
 8000486:	d3c3      	bcc.n	8000410 <trieArbre+0x10>
		            }
		        }
		    }
	}
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	371c      	adds	r7, #28
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <creeRacine>:
//////////////////////////////////////////////////////////////////////////////////////////////////

	struct noeud* creeRacine(struct noeud * arbre[256], uint32_t taille)
	{
 8000496:	b480      	push	{r7}
 8000498:	b085      	sub	sp, #20
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
 800049e:	6039      	str	r1, [r7, #0]
		struct noeud* racine;

		for (uint32_t i=1 ; i < taille ; i++)
 80004a0:	2301      	movs	r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	e034      	b.n	8000510 <creeRacine+0x7a>
		{
			racine = arbre[i] ;
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	4413      	add	r3, r2
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	60fb      	str	r3, [r7, #12]

			racine->c= '!';
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	2221      	movs	r2, #33	@ 0x21
 80004b6:	701a      	strb	r2, [r3, #0]
			racine->occurence = arbre[i-1]->occurence + arbre[i]->occurence ;
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80004be:	3b01      	subs	r3, #1
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	685a      	ldr	r2, [r3, #4]
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	6879      	ldr	r1, [r7, #4]
 80004d0:	440b      	add	r3, r1
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	441a      	add	r2, r3
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	605a      	str	r2, [r3, #4]
			racine->code = 0;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
			racine->tailleCode =0;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
			racine->droite = arbre[i] ;
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4413      	add	r3, r2
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	615a      	str	r2, [r3, #20]
			racine->gauche = arbre[i-1] ;
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80004fc:	3b01      	subs	r3, #1
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4413      	add	r3, r2
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	611a      	str	r2, [r3, #16]
		for (uint32_t i=1 ; i < taille ; i++)
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	3301      	adds	r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68ba      	ldr	r2, [r7, #8]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	429a      	cmp	r2, r3
 8000516:	d3c6      	bcc.n	80004a6 <creeRacine+0x10>
		}
		return racine;
 8000518:	68fb      	ldr	r3, [r7, #12]
	}
 800051a:	4618      	mov	r0, r3
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <afficherRacine>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////

	void afficherRacine(struct noeud* arbre[256] , uint32_t taille)
	{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]

			printf("le caractere initial est %c \r\n",arbre[compte]->c);
 8000532:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <afficherRacine+0xa0>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4413      	add	r3, r2
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	4822      	ldr	r0, [pc, #136]	@ (80005cc <afficherRacine+0xa4>)
 8000544:	f000 fc94 	bl	8000e70 <iprintf>
			printf("le nombre d'occurences est %d \r\n",arbre[compte]->occurence);
 8000548:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <afficherRacine+0xa0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	4619      	mov	r1, r3
 8000558:	481d      	ldr	r0, [pc, #116]	@ (80005d0 <afficherRacine+0xa8>)
 800055a:	f000 fc89 	bl	8000e70 <iprintf>
			printf("le code binaire dans l'arbre est %x \r\n",arbre[compte]->code);
 800055e:	4b1a      	ldr	r3, [pc, #104]	@ (80005c8 <afficherRacine+0xa0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	4413      	add	r3, r2
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	4619      	mov	r1, r3
 800056e:	4819      	ldr	r0, [pc, #100]	@ (80005d4 <afficherRacine+0xac>)
 8000570:	f000 fc7e 	bl	8000e70 <iprintf>
			printf("le nombre de bits du code est %d \r\n",arbre[compte]->tailleCode);
 8000574:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <afficherRacine+0xa0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	4619      	mov	r1, r3
 8000584:	4814      	ldr	r0, [pc, #80]	@ (80005d8 <afficherRacine+0xb0>)
 8000586:	f000 fc73 	bl	8000e70 <iprintf>
			printf("le nombre d'occurence a droite est: %d \r\n",arbre[compte]->droite->occurence);
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <afficherRacine+0xa0>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	4619      	mov	r1, r3
 800059c:	480f      	ldr	r0, [pc, #60]	@ (80005dc <afficherRacine+0xb4>)
 800059e:	f000 fc67 	bl	8000e70 <iprintf>
			printf("le nombre d'occurence a gauche est: %d \r\n",arbre[compte]->gauche->occurence);
 80005a2:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <afficherRacine+0xa0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	4619      	mov	r1, r3
 80005b4:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <afficherRacine+0xb8>)
 80005b6:	f000 fc5b 	bl	8000e70 <iprintf>
			printf("\n");
 80005ba:	200a      	movs	r0, #10
 80005bc:	f000 fc6a 	bl	8000e94 <putchar>
	}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000007c 	.word	0x2000007c
 80005cc:	08001b38 	.word	0x08001b38
 80005d0:	08001b58 	.word	0x08001b58
 80005d4:	08001b7c 	.word	0x08001b7c
 80005d8:	08001ba4 	.word	0x08001ba4
 80005dc:	08001bc8 	.word	0x08001bc8
 80005e0:	08001bf4 	.word	0x08001bf4

080005e4 <GPIO_Init>:
#include <stdint.h>
#include <stm32f446xx.h>
#include "main.h"
#include "gpio.h"

void GPIO_Init(void){
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <GPIO_Init+0x30>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ec:	4a09      	ldr	r2, [pc, #36]	@ (8000614 <GPIO_Init+0x30>)
 80005ee:	f043 0305 	orr.w	r3, r3, #5
 80005f2:	6313      	str	r3, [r2, #48]	@ 0x30

	/* GPIO Init */
	GPIOA->MODER |= OUTPUT_MODE <<10;		// PA5 Output LED
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <GPIO_Init+0x34>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <GPIO_Init+0x34>)
 80005fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005fe:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= INPUT_MODE	<< 26;		// PC13 Input Push-Button
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <GPIO_Init+0x38>)
 8000602:	4a06      	ldr	r2, [pc, #24]	@ (800061c <GPIO_Init+0x38>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40020000 	.word	0x40020000
 800061c:	40020800 	.word	0x40020800

08000620 <SysTick_Handler>:
#include "interrupt.h"

extern uint32_t ticks;

// Interrupt Handler for SysTick Interrupt
void SysTick_Handler(void){
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	ticks++;
 8000624:	4b04      	ldr	r3, [pc, #16]	@ (8000638 <SysTick_Handler+0x18>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a03      	ldr	r2, [pc, #12]	@ (8000638 <SysTick_Handler+0x18>)
 800062c:	6013      	str	r3, [r2, #0]
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	20000084 	.word	0x20000084

0800063c <main>:
#include "occurence.h"
#include "arbre.h"


int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	f5ad 6d01 	sub.w	sp, sp, #2064	@ 0x810
 8000642:	af00      	add	r7, sp, #0
	FPU_Init();
 8000644:	f000 fa60 	bl	8000b08 <FPU_Init>
	GPIO_Init();
 8000648:	f7ff ffcc 	bl	80005e4 <GPIO_Init>
	USART2_Init();
 800064c:	f000 f9da 	bl	8000a04 <USART2_Init>
	SYSTICK_Init();
 8000650:	f000 f9a4 	bl	800099c <SYSTICK_Init>

	uint8_t texte[]="Une banane";
 8000654:	4a32      	ldr	r2, [pc, #200]	@ (8000720 <main+0xe4>)
 8000656:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800065a:	ca07      	ldmia	r2, {r0, r1, r2}
 800065c:	c303      	stmia	r3!, {r0, r1}
 800065e:	801a      	strh	r2, [r3, #0]
 8000660:	3302      	adds	r3, #2
 8000662:	0c12      	lsrs	r2, r2, #16
 8000664:	701a      	strb	r2, [r3, #0]
	uint32_t tabCaractere [256]={0};
 8000666:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800066a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800066e:	4618      	mov	r0, r3
 8000670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000674:	461a      	mov	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f000 fd4a 	bl	8001110 <memset>
	extern uint32_t compte ;
	struct noeud* racine;



	occurence(texte , tabCaractere);
 800067c:	f507 6280 	add.w	r2, r7, #1024	@ 0x400
 8000680:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f858 	bl	800073c <occurence>
	//nbrCaractereDifferent = comptage_de_caracteres_utiliser(tabCaractere);
	creerFeuille(arbreHuffman,tabCaractere);
 800068c:	f507 6280 	add.w	r2, r7, #1024	@ 0x400
 8000690:	463b      	mov	r3, r7
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fe0b 	bl	80002b0 <creerFeuille>
	//nbrCaractereDifferent = compte; // la valeur de comte (la taille) est deffinie apres la creation
	printf("arbre non trier\r\n");
 800069a:	4822      	ldr	r0, [pc, #136]	@ (8000724 <main+0xe8>)
 800069c:	f000 fc58 	bl	8000f50 <puts>
	afficherTabArbreHuffman(arbreHuffman , compte);
 80006a0:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <main+0xec>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	463b      	mov	r3, r7
 80006a6:	4611      	mov	r1, r2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fe61 	bl	8000370 <afficherTabArbreHuffman>
//////////////////////////////////////////////////////////////////////////
	trieArbre(arbreHuffman, compte);
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <main+0xec>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	463b      	mov	r3, r7
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fea2 	bl	8000400 <trieArbre>
	printf("arbre trier\r\n");
 80006bc:	481b      	ldr	r0, [pc, #108]	@ (800072c <main+0xf0>)
 80006be:	f000 fc47 	bl	8000f50 <puts>
	afficherTabArbreHuffman(arbreHuffman , compte);
 80006c2:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <main+0xec>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	463b      	mov	r3, r7
 80006c8:	4611      	mov	r1, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fe50 	bl	8000370 <afficherTabArbreHuffman>
/////////////////////////////////////////////////////////////////////////////////////


	racine = creeRacine(arbreHuffman , compte);
 80006d0:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <main+0xec>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	463b      	mov	r3, r7
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fedc 	bl	8000496 <creeRacine>
 80006de:	f8c7 080c 	str.w	r0, [r7, #2060]	@ 0x80c
	//trieArbre(arbreHuffman, compte);
	printf("arbre apres creation de la premiere racine \r\n");
 80006e2:	4813      	ldr	r0, [pc, #76]	@ (8000730 <main+0xf4>)
 80006e4:	f000 fc34 	bl	8000f50 <puts>
	afficherTabArbreHuffman(arbreHuffman , compte);
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <main+0xec>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	463b      	mov	r3, r7
 80006ee:	4611      	mov	r1, r2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fe3d 	bl	8000370 <afficherTabArbreHuffman>
	printf("la racine est:  \r\n");
 80006f6:	480f      	ldr	r0, [pc, #60]	@ (8000734 <main+0xf8>)
 80006f8:	f000 fc2a 	bl	8000f50 <puts>
	afficherRacine(arbreHuffman , compte);
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <main+0xec>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	463b      	mov	r3, r7
 8000702:	4611      	mov	r1, r2
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff0f 	bl	8000528 <afficherRacine>




	while(1){
		SYSTICK_Delay(100);
 800070a:	2064      	movs	r0, #100	@ 0x64
 800070c:	f000 f958 	bl	80009c0 <SYSTICK_Delay>
		GPIOA->ODR ^= 1<<5;
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <main+0xfc>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <main+0xfc>)
 8000716:	f083 0320 	eor.w	r3, r3, #32
 800071a:	6153      	str	r3, [r2, #20]
		SYSTICK_Delay(100);
 800071c:	bf00      	nop
 800071e:	e7f4      	b.n	800070a <main+0xce>
 8000720:	08001c88 	.word	0x08001c88
 8000724:	08001c20 	.word	0x08001c20
 8000728:	2000007c 	.word	0x2000007c
 800072c:	08001c34 	.word	0x08001c34
 8000730:	08001c44 	.word	0x08001c44
 8000734:	08001c74 	.word	0x08001c74
 8000738:	40020000 	.word	0x40020000

0800073c <occurence>:
#include <stdint.h>
#include <stdio.h>
#include "occurence.h"

	void occurence(uint8_t* chaine , uint32_t tab[256])
	{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
		uint32_t i=0;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
		uint32_t c;
		while(*(chaine+i) !='\0')
 800074a:	e00e      	b.n	800076a <occurence+0x2e>
		{
			c=chaine[i];
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	60fb      	str	r3, [r7, #12]
			tab[c]++;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	4413      	add	r3, r2
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	3201      	adds	r2, #1
 8000762:	601a      	str	r2, [r3, #0]
			i++;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
		while(*(chaine+i) !='\0')
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1ea      	bne.n	800074c <occurence+0x10>
		}

		for(uint32_t j=0;j<256;j++)
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	e013      	b.n	80007a4 <occurence+0x68>
		{
			if (tab[j] != 0)
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d009      	beq.n	800079e <occurence+0x62>
			{
			printf("le nombre d'occurence de %c est %ld \r\n",j,tab[j]);
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	4413      	add	r3, r2
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	6939      	ldr	r1, [r7, #16]
 8000798:	4807      	ldr	r0, [pc, #28]	@ (80007b8 <occurence+0x7c>)
 800079a:	f000 fb69 	bl	8000e70 <iprintf>
		for(uint32_t j=0;j<256;j++)
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	3301      	adds	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	2bff      	cmp	r3, #255	@ 0xff
 80007a8:	d9e8      	bls.n	800077c <occurence+0x40>
			}
		}
		printf("\n");
 80007aa:	200a      	movs	r0, #10
 80007ac:	f000 fb72 	bl	8000e94 <putchar>
	}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	08001c94 	.word	0x08001c94

080007bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00a      	b.n	80007e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ce:	f000 f993 	bl	8000af8 <__io_getchar>
 80007d2:	4601      	mov	r1, r0
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	60ba      	str	r2, [r7, #8]
 80007da:	b2ca      	uxtb	r2, r1
 80007dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dbf0      	blt.n	80007ce <_read+0x12>
	}

return len;
 80007ec:	687b      	ldr	r3, [r7, #4]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	60f8      	str	r0, [r7, #12]
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	e009      	b.n	800081c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	60ba      	str	r2, [r7, #8]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f963 	bl	8000adc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3301      	adds	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	429a      	cmp	r2, r3
 8000822:	dbf1      	blt.n	8000808 <_write+0x12>
	}
	return len;
 8000824:	687b      	ldr	r3, [r7, #4]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_close>:

int _close(int file)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	return -1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000856:	605a      	str	r2, [r3, #4]
	return 0;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <_isatty>:

int _isatty(int file)
{
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
	return 1;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
	return 0;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	@ (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f000 fc80 	bl	80011cc <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20020000 	.word	0x20020000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	20000080 	.word	0x20000080
 8000900:	200001d8 	.word	0x200001d8

08000904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	db0a      	blt.n	800092e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	490c      	ldr	r1, [pc, #48]	@ (8000950 <__NVIC_SetPriority+0x4c>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	0112      	lsls	r2, r2, #4
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	440b      	add	r3, r1
 8000928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800092c:	e00a      	b.n	8000944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4908      	ldr	r1, [pc, #32]	@ (8000954 <__NVIC_SetPriority+0x50>)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	3b04      	subs	r3, #4
 800093c:	0112      	lsls	r2, r2, #4
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	440b      	add	r3, r1
 8000942:	761a      	strb	r2, [r3, #24]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000968:	d301      	bcc.n	800096e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096a:	2301      	movs	r3, #1
 800096c:	e00f      	b.n	800098e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <SysTick_Config+0x40>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000976:	210f      	movs	r1, #15
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f7ff ffc2 	bl	8000904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <SysTick_Config+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <SysTick_Config+0x40>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	e000e010 	.word	0xe000e010

0800099c <SYSTICK_Init>:

//////////////////////////////////////////////
////////////// SYSTICK TIMER /////////////////
//////////////////////////////////////////////

void SYSTICK_Init(void){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <SYSTICK_Init+0x1c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <SYSTICK_Init+0x20>)
 80009a6:	fba2 2303 	umull	r2, r3, r2, r3
 80009aa:	099b      	lsrs	r3, r3, #6
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ffd3 	bl	8000958 <SysTick_Config>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000000 	.word	0x20000000
 80009bc:	10624dd3 	.word	0x10624dd3

080009c0 <SYSTICK_Delay>:
/**
 * Millisecond delays with Systick Timer, blocking function
 * @param delay : milliseconds to wait
 */
void SYSTICK_Delay(uint32_t Delay)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = SYSTICK_Get();
 80009c8:	f000 f810 	bl	80009ec <SYSTICK_Get>
 80009cc:	60f8      	str	r0, [r7, #12]

	while((SYSTICK_Get() - tickstart) < Delay);
 80009ce:	bf00      	nop
 80009d0:	f000 f80c 	bl	80009ec <SYSTICK_Get>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d8f7      	bhi.n	80009d0 <SYSTICK_Delay+0x10>
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <SYSTICK_Get>:

uint32_t SYSTICK_Get(void){
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
	return ticks;
 80009f0:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <SYSTICK_Get+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000084 	.word	0x20000084

08000a04 <USART2_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "usart.h"


void USART2_Init(void){
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <USART2_Init+0x74>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000a78 <USART2_Init+0x74>)
 8000a0e:	f043 0305 	orr.w	r3, r3, #5
 8000a12:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <USART2_Init+0x74>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	4a17      	ldr	r2, [pc, #92]	@ (8000a78 <USART2_Init+0x74>)
 8000a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a1e:	6413      	str	r3, [r2, #64]	@ 0x40
	USART2->CR1 |= USART_CR1_UE;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <USART2_Init+0x78>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	4a15      	ldr	r2, [pc, #84]	@ (8000a7c <USART2_Init+0x78>)
 8000a26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a2a:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <USART2_Init+0x7c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a13      	ldr	r2, [pc, #76]	@ (8000a80 <USART2_Init+0x7c>)
 8000a32:	f043 0320 	orr.w	r3, r3, #32
 8000a36:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <USART2_Init+0x7c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a10      	ldr	r2, [pc, #64]	@ (8000a80 <USART2_Init+0x7c>)
 8000a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a42:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 8000a44:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <USART2_Init+0x7c>)
 8000a46:	6a1b      	ldr	r3, [r3, #32]
 8000a48:	4a0d      	ldr	r2, [pc, #52]	@ (8000a80 <USART2_Init+0x7c>)
 8000a4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000a4e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 8000a50:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <USART2_Init+0x7c>)
 8000a52:	6a1b      	ldr	r3, [r3, #32]
 8000a54:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <USART2_Init+0x7c>)
 8000a56:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000a5a:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <USART2_Init+0x78>)
 8000a5e:	228b      	movs	r2, #139	@ 0x8b
 8000a60:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <USART2_Init+0x78>)
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <USART2_Init+0x78>)
 8000a68:	f043 030c 	orr.w	r3, r3, #12
 8000a6c:	60d3      	str	r3, [r2, #12]
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40004400 	.word	0x40004400
 8000a80:	40020000 	.word	0x40020000

08000a84 <USART2_TransmitChar>:


void USART2_TransmitChar(uint8_t data){
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	USART2->DR = data;
 8000a8e:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <USART2_TransmitChar+0x2c>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	6053      	str	r3, [r2, #4]
	while( (USART2->SR & USART_SR_TXE)==0 );
 8000a94:	bf00      	nop
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <USART2_TransmitChar+0x2c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f9      	beq.n	8000a96 <USART2_TransmitChar+0x12>
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <USART2_ReceiveChar>:


uint8_t USART2_ReceiveChar(void){
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	while( (USART2->SR & USART_SR_RXNE)==0 );
 8000ab8:	bf00      	nop
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <USART2_ReceiveChar+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0320 	and.w	r3, r3, #32
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f9      	beq.n	8000aba <USART2_ReceiveChar+0x6>
	return USART2->DR;
 8000ac6:	4b04      	ldr	r3, [pc, #16]	@ (8000ad8 <USART2_ReceiveChar+0x24>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	b2db      	uxtb	r3, r3

}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40004400 	.word	0x40004400

08000adc <__io_putchar>:
#include "util.h"
#include "usart.h"


/* Send on USART2 PA2*/
int __io_putchar(int ch){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	USART2_TransmitChar(ch);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ffcb 	bl	8000a84 <USART2_TransmitChar>
	return 0;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <__io_getchar>:

/* Receive on USART2 PA3 */
int __io_getchar(void){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	return USART2_ReceiveChar();
 8000afc:	f7ff ffda 	bl	8000ab4 <USART2_ReceiveChar>
 8000b00:	4603      	mov	r3, r0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <FPU_Init>:
/* For scanf function */
void SCANF_Init(void){
	setvbuf(stdin, NULL, _IONBF, 0);
}

void FPU_Init(void){
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <FPU_Init+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <FPU_Init+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b2c:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b30:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	@ (8000b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	@ (8000b70 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b78 <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b5a:	f000 fb3d 	bl	80011d8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000b5e:	f7ff fd6d 	bl	800063c <main>

08000b62 <LoopForever>:

LoopForever:
  b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   r0, =_estack
 8000b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b70:	08001d00 	.word	0x08001d00
  ldr r2, =_sbss
 8000b74:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b78:	200001d4 	.word	0x200001d4

08000b7c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>
	...

08000b80 <malloc>:
 8000b80:	4b02      	ldr	r3, [pc, #8]	@ (8000b8c <malloc+0xc>)
 8000b82:	4601      	mov	r1, r0
 8000b84:	6818      	ldr	r0, [r3, #0]
 8000b86:	f000 b825 	b.w	8000bd4 <_malloc_r>
 8000b8a:	bf00      	nop
 8000b8c:	20000010 	.word	0x20000010

08000b90 <sbrk_aligned>:
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	4e0f      	ldr	r6, [pc, #60]	@ (8000bd0 <sbrk_aligned+0x40>)
 8000b94:	460c      	mov	r4, r1
 8000b96:	6831      	ldr	r1, [r6, #0]
 8000b98:	4605      	mov	r5, r0
 8000b9a:	b911      	cbnz	r1, 8000ba2 <sbrk_aligned+0x12>
 8000b9c:	f000 faf4 	bl	8001188 <_sbrk_r>
 8000ba0:	6030      	str	r0, [r6, #0]
 8000ba2:	4621      	mov	r1, r4
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	f000 faef 	bl	8001188 <_sbrk_r>
 8000baa:	1c43      	adds	r3, r0, #1
 8000bac:	d103      	bne.n	8000bb6 <sbrk_aligned+0x26>
 8000bae:	f04f 34ff 	mov.w	r4, #4294967295
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	bd70      	pop	{r4, r5, r6, pc}
 8000bb6:	1cc4      	adds	r4, r0, #3
 8000bb8:	f024 0403 	bic.w	r4, r4, #3
 8000bbc:	42a0      	cmp	r0, r4
 8000bbe:	d0f8      	beq.n	8000bb2 <sbrk_aligned+0x22>
 8000bc0:	1a21      	subs	r1, r4, r0
 8000bc2:	4628      	mov	r0, r5
 8000bc4:	f000 fae0 	bl	8001188 <_sbrk_r>
 8000bc8:	3001      	adds	r0, #1
 8000bca:	d1f2      	bne.n	8000bb2 <sbrk_aligned+0x22>
 8000bcc:	e7ef      	b.n	8000bae <sbrk_aligned+0x1e>
 8000bce:	bf00      	nop
 8000bd0:	20000088 	.word	0x20000088

08000bd4 <_malloc_r>:
 8000bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bd8:	1ccd      	adds	r5, r1, #3
 8000bda:	f025 0503 	bic.w	r5, r5, #3
 8000bde:	3508      	adds	r5, #8
 8000be0:	2d0c      	cmp	r5, #12
 8000be2:	bf38      	it	cc
 8000be4:	250c      	movcc	r5, #12
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	4606      	mov	r6, r0
 8000bea:	db01      	blt.n	8000bf0 <_malloc_r+0x1c>
 8000bec:	42a9      	cmp	r1, r5
 8000bee:	d904      	bls.n	8000bfa <_malloc_r+0x26>
 8000bf0:	230c      	movs	r3, #12
 8000bf2:	6033      	str	r3, [r6, #0]
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cd0 <_malloc_r+0xfc>
 8000bfe:	f000 f869 	bl	8000cd4 <__malloc_lock>
 8000c02:	f8d8 3000 	ldr.w	r3, [r8]
 8000c06:	461c      	mov	r4, r3
 8000c08:	bb44      	cbnz	r4, 8000c5c <_malloc_r+0x88>
 8000c0a:	4629      	mov	r1, r5
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	f7ff ffbf 	bl	8000b90 <sbrk_aligned>
 8000c12:	1c43      	adds	r3, r0, #1
 8000c14:	4604      	mov	r4, r0
 8000c16:	d158      	bne.n	8000cca <_malloc_r+0xf6>
 8000c18:	f8d8 4000 	ldr.w	r4, [r8]
 8000c1c:	4627      	mov	r7, r4
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d143      	bne.n	8000caa <_malloc_r+0xd6>
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d04b      	beq.n	8000cbe <_malloc_r+0xea>
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	eb04 0903 	add.w	r9, r4, r3
 8000c30:	f000 faaa 	bl	8001188 <_sbrk_r>
 8000c34:	4581      	cmp	r9, r0
 8000c36:	d142      	bne.n	8000cbe <_malloc_r+0xea>
 8000c38:	6821      	ldr	r1, [r4, #0]
 8000c3a:	1a6d      	subs	r5, r5, r1
 8000c3c:	4629      	mov	r1, r5
 8000c3e:	4630      	mov	r0, r6
 8000c40:	f7ff ffa6 	bl	8000b90 <sbrk_aligned>
 8000c44:	3001      	adds	r0, #1
 8000c46:	d03a      	beq.n	8000cbe <_malloc_r+0xea>
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	442b      	add	r3, r5
 8000c4c:	6023      	str	r3, [r4, #0]
 8000c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	bb62      	cbnz	r2, 8000cb0 <_malloc_r+0xdc>
 8000c56:	f8c8 7000 	str.w	r7, [r8]
 8000c5a:	e00f      	b.n	8000c7c <_malloc_r+0xa8>
 8000c5c:	6822      	ldr	r2, [r4, #0]
 8000c5e:	1b52      	subs	r2, r2, r5
 8000c60:	d420      	bmi.n	8000ca4 <_malloc_r+0xd0>
 8000c62:	2a0b      	cmp	r2, #11
 8000c64:	d917      	bls.n	8000c96 <_malloc_r+0xc2>
 8000c66:	1961      	adds	r1, r4, r5
 8000c68:	42a3      	cmp	r3, r4
 8000c6a:	6025      	str	r5, [r4, #0]
 8000c6c:	bf18      	it	ne
 8000c6e:	6059      	strne	r1, [r3, #4]
 8000c70:	6863      	ldr	r3, [r4, #4]
 8000c72:	bf08      	it	eq
 8000c74:	f8c8 1000 	streq.w	r1, [r8]
 8000c78:	5162      	str	r2, [r4, r5]
 8000c7a:	604b      	str	r3, [r1, #4]
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	f000 f82f 	bl	8000ce0 <__malloc_unlock>
 8000c82:	f104 000b 	add.w	r0, r4, #11
 8000c86:	1d23      	adds	r3, r4, #4
 8000c88:	f020 0007 	bic.w	r0, r0, #7
 8000c8c:	1ac2      	subs	r2, r0, r3
 8000c8e:	bf1c      	itt	ne
 8000c90:	1a1b      	subne	r3, r3, r0
 8000c92:	50a3      	strne	r3, [r4, r2]
 8000c94:	e7af      	b.n	8000bf6 <_malloc_r+0x22>
 8000c96:	6862      	ldr	r2, [r4, #4]
 8000c98:	42a3      	cmp	r3, r4
 8000c9a:	bf0c      	ite	eq
 8000c9c:	f8c8 2000 	streq.w	r2, [r8]
 8000ca0:	605a      	strne	r2, [r3, #4]
 8000ca2:	e7eb      	b.n	8000c7c <_malloc_r+0xa8>
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	6864      	ldr	r4, [r4, #4]
 8000ca8:	e7ae      	b.n	8000c08 <_malloc_r+0x34>
 8000caa:	463c      	mov	r4, r7
 8000cac:	687f      	ldr	r7, [r7, #4]
 8000cae:	e7b6      	b.n	8000c1e <_malloc_r+0x4a>
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	42a3      	cmp	r3, r4
 8000cb6:	d1fb      	bne.n	8000cb0 <_malloc_r+0xdc>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	6053      	str	r3, [r2, #4]
 8000cbc:	e7de      	b.n	8000c7c <_malloc_r+0xa8>
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	6033      	str	r3, [r6, #0]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	f000 f80c 	bl	8000ce0 <__malloc_unlock>
 8000cc8:	e794      	b.n	8000bf4 <_malloc_r+0x20>
 8000cca:	6005      	str	r5, [r0, #0]
 8000ccc:	e7d6      	b.n	8000c7c <_malloc_r+0xa8>
 8000cce:	bf00      	nop
 8000cd0:	2000008c 	.word	0x2000008c

08000cd4 <__malloc_lock>:
 8000cd4:	4801      	ldr	r0, [pc, #4]	@ (8000cdc <__malloc_lock+0x8>)
 8000cd6:	f000 baa4 	b.w	8001222 <__retarget_lock_acquire_recursive>
 8000cda:	bf00      	nop
 8000cdc:	200001d0 	.word	0x200001d0

08000ce0 <__malloc_unlock>:
 8000ce0:	4801      	ldr	r0, [pc, #4]	@ (8000ce8 <__malloc_unlock+0x8>)
 8000ce2:	f000 ba9f 	b.w	8001224 <__retarget_lock_release_recursive>
 8000ce6:	bf00      	nop
 8000ce8:	200001d0 	.word	0x200001d0

08000cec <std>:
 8000cec:	2300      	movs	r3, #0
 8000cee:	b510      	push	{r4, lr}
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8000cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cfa:	6083      	str	r3, [r0, #8]
 8000cfc:	8181      	strh	r1, [r0, #12]
 8000cfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8000d00:	81c2      	strh	r2, [r0, #14]
 8000d02:	6183      	str	r3, [r0, #24]
 8000d04:	4619      	mov	r1, r3
 8000d06:	2208      	movs	r2, #8
 8000d08:	305c      	adds	r0, #92	@ 0x5c
 8000d0a:	f000 fa01 	bl	8001110 <memset>
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <std+0x58>)
 8000d10:	6263      	str	r3, [r4, #36]	@ 0x24
 8000d12:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <std+0x5c>)
 8000d14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000d16:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <std+0x60>)
 8000d18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <std+0x64>)
 8000d1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d54 <std+0x68>)
 8000d20:	6224      	str	r4, [r4, #32]
 8000d22:	429c      	cmp	r4, r3
 8000d24:	d006      	beq.n	8000d34 <std+0x48>
 8000d26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000d2a:	4294      	cmp	r4, r2
 8000d2c:	d002      	beq.n	8000d34 <std+0x48>
 8000d2e:	33d0      	adds	r3, #208	@ 0xd0
 8000d30:	429c      	cmp	r4, r3
 8000d32:	d105      	bne.n	8000d40 <std+0x54>
 8000d34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d3c:	f000 ba70 	b.w	8001220 <__retarget_lock_init_recursive>
 8000d40:	bd10      	pop	{r4, pc}
 8000d42:	bf00      	nop
 8000d44:	08000f61 	.word	0x08000f61
 8000d48:	08000f83 	.word	0x08000f83
 8000d4c:	08000fbb 	.word	0x08000fbb
 8000d50:	08000fdf 	.word	0x08000fdf
 8000d54:	20000090 	.word	0x20000090

08000d58 <stdio_exit_handler>:
 8000d58:	4a02      	ldr	r2, [pc, #8]	@ (8000d64 <stdio_exit_handler+0xc>)
 8000d5a:	4903      	ldr	r1, [pc, #12]	@ (8000d68 <stdio_exit_handler+0x10>)
 8000d5c:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <stdio_exit_handler+0x14>)
 8000d5e:	f000 b869 	b.w	8000e34 <_fwalk_sglue>
 8000d62:	bf00      	nop
 8000d64:	20000004 	.word	0x20000004
 8000d68:	08001961 	.word	0x08001961
 8000d6c:	20000014 	.word	0x20000014

08000d70 <cleanup_stdio>:
 8000d70:	6841      	ldr	r1, [r0, #4]
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <cleanup_stdio+0x34>)
 8000d74:	4299      	cmp	r1, r3
 8000d76:	b510      	push	{r4, lr}
 8000d78:	4604      	mov	r4, r0
 8000d7a:	d001      	beq.n	8000d80 <cleanup_stdio+0x10>
 8000d7c:	f000 fdf0 	bl	8001960 <_fflush_r>
 8000d80:	68a1      	ldr	r1, [r4, #8]
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <cleanup_stdio+0x38>)
 8000d84:	4299      	cmp	r1, r3
 8000d86:	d002      	beq.n	8000d8e <cleanup_stdio+0x1e>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f000 fde9 	bl	8001960 <_fflush_r>
 8000d8e:	68e1      	ldr	r1, [r4, #12]
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <cleanup_stdio+0x3c>)
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d004      	beq.n	8000da0 <cleanup_stdio+0x30>
 8000d96:	4620      	mov	r0, r4
 8000d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d9c:	f000 bde0 	b.w	8001960 <_fflush_r>
 8000da0:	bd10      	pop	{r4, pc}
 8000da2:	bf00      	nop
 8000da4:	20000090 	.word	0x20000090
 8000da8:	200000f8 	.word	0x200000f8
 8000dac:	20000160 	.word	0x20000160

08000db0 <global_stdio_init.part.0>:
 8000db0:	b510      	push	{r4, lr}
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <global_stdio_init.part.0+0x30>)
 8000db4:	4c0b      	ldr	r4, [pc, #44]	@ (8000de4 <global_stdio_init.part.0+0x34>)
 8000db6:	4a0c      	ldr	r2, [pc, #48]	@ (8000de8 <global_stdio_init.part.0+0x38>)
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	4620      	mov	r0, r4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	f7ff ff94 	bl	8000cec <std>
 8000dc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2109      	movs	r1, #9
 8000dcc:	f7ff ff8e 	bl	8000cec <std>
 8000dd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dda:	2112      	movs	r1, #18
 8000ddc:	f7ff bf86 	b.w	8000cec <std>
 8000de0:	200001c8 	.word	0x200001c8
 8000de4:	20000090 	.word	0x20000090
 8000de8:	08000d59 	.word	0x08000d59

08000dec <__sfp_lock_acquire>:
 8000dec:	4801      	ldr	r0, [pc, #4]	@ (8000df4 <__sfp_lock_acquire+0x8>)
 8000dee:	f000 ba18 	b.w	8001222 <__retarget_lock_acquire_recursive>
 8000df2:	bf00      	nop
 8000df4:	200001d1 	.word	0x200001d1

08000df8 <__sfp_lock_release>:
 8000df8:	4801      	ldr	r0, [pc, #4]	@ (8000e00 <__sfp_lock_release+0x8>)
 8000dfa:	f000 ba13 	b.w	8001224 <__retarget_lock_release_recursive>
 8000dfe:	bf00      	nop
 8000e00:	200001d1 	.word	0x200001d1

08000e04 <__sinit>:
 8000e04:	b510      	push	{r4, lr}
 8000e06:	4604      	mov	r4, r0
 8000e08:	f7ff fff0 	bl	8000dec <__sfp_lock_acquire>
 8000e0c:	6a23      	ldr	r3, [r4, #32]
 8000e0e:	b11b      	cbz	r3, 8000e18 <__sinit+0x14>
 8000e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e14:	f7ff bff0 	b.w	8000df8 <__sfp_lock_release>
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <__sinit+0x28>)
 8000e1a:	6223      	str	r3, [r4, #32]
 8000e1c:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <__sinit+0x2c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1f5      	bne.n	8000e10 <__sinit+0xc>
 8000e24:	f7ff ffc4 	bl	8000db0 <global_stdio_init.part.0>
 8000e28:	e7f2      	b.n	8000e10 <__sinit+0xc>
 8000e2a:	bf00      	nop
 8000e2c:	08000d71 	.word	0x08000d71
 8000e30:	200001c8 	.word	0x200001c8

08000e34 <_fwalk_sglue>:
 8000e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e38:	4607      	mov	r7, r0
 8000e3a:	4688      	mov	r8, r1
 8000e3c:	4614      	mov	r4, r2
 8000e3e:	2600      	movs	r6, #0
 8000e40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e44:	f1b9 0901 	subs.w	r9, r9, #1
 8000e48:	d505      	bpl.n	8000e56 <_fwalk_sglue+0x22>
 8000e4a:	6824      	ldr	r4, [r4, #0]
 8000e4c:	2c00      	cmp	r4, #0
 8000e4e:	d1f7      	bne.n	8000e40 <_fwalk_sglue+0xc>
 8000e50:	4630      	mov	r0, r6
 8000e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e56:	89ab      	ldrh	r3, [r5, #12]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d907      	bls.n	8000e6c <_fwalk_sglue+0x38>
 8000e5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e60:	3301      	adds	r3, #1
 8000e62:	d003      	beq.n	8000e6c <_fwalk_sglue+0x38>
 8000e64:	4629      	mov	r1, r5
 8000e66:	4638      	mov	r0, r7
 8000e68:	47c0      	blx	r8
 8000e6a:	4306      	orrs	r6, r0
 8000e6c:	3568      	adds	r5, #104	@ 0x68
 8000e6e:	e7e9      	b.n	8000e44 <_fwalk_sglue+0x10>

08000e70 <iprintf>:
 8000e70:	b40f      	push	{r0, r1, r2, r3}
 8000e72:	b507      	push	{r0, r1, r2, lr}
 8000e74:	4906      	ldr	r1, [pc, #24]	@ (8000e90 <iprintf+0x20>)
 8000e76:	ab04      	add	r3, sp, #16
 8000e78:	6808      	ldr	r0, [r1, #0]
 8000e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e7e:	6881      	ldr	r1, [r0, #8]
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	f000 fa45 	bl	8001310 <_vfiprintf_r>
 8000e86:	b003      	add	sp, #12
 8000e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e8c:	b004      	add	sp, #16
 8000e8e:	4770      	bx	lr
 8000e90:	20000010 	.word	0x20000010

08000e94 <putchar>:
 8000e94:	4b02      	ldr	r3, [pc, #8]	@ (8000ea0 <putchar+0xc>)
 8000e96:	4601      	mov	r1, r0
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	6882      	ldr	r2, [r0, #8]
 8000e9c:	f000 bdea 	b.w	8001a74 <_putc_r>
 8000ea0:	20000010 	.word	0x20000010

08000ea4 <_puts_r>:
 8000ea4:	6a03      	ldr	r3, [r0, #32]
 8000ea6:	b570      	push	{r4, r5, r6, lr}
 8000ea8:	6884      	ldr	r4, [r0, #8]
 8000eaa:	4605      	mov	r5, r0
 8000eac:	460e      	mov	r6, r1
 8000eae:	b90b      	cbnz	r3, 8000eb4 <_puts_r+0x10>
 8000eb0:	f7ff ffa8 	bl	8000e04 <__sinit>
 8000eb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000eb6:	07db      	lsls	r3, r3, #31
 8000eb8:	d405      	bmi.n	8000ec6 <_puts_r+0x22>
 8000eba:	89a3      	ldrh	r3, [r4, #12]
 8000ebc:	0598      	lsls	r0, r3, #22
 8000ebe:	d402      	bmi.n	8000ec6 <_puts_r+0x22>
 8000ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ec2:	f000 f9ae 	bl	8001222 <__retarget_lock_acquire_recursive>
 8000ec6:	89a3      	ldrh	r3, [r4, #12]
 8000ec8:	0719      	lsls	r1, r3, #28
 8000eca:	d502      	bpl.n	8000ed2 <_puts_r+0x2e>
 8000ecc:	6923      	ldr	r3, [r4, #16]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d135      	bne.n	8000f3e <_puts_r+0x9a>
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	f000 f8c5 	bl	8001064 <__swsetup_r>
 8000eda:	b380      	cbz	r0, 8000f3e <_puts_r+0x9a>
 8000edc:	f04f 35ff 	mov.w	r5, #4294967295
 8000ee0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ee2:	07da      	lsls	r2, r3, #31
 8000ee4:	d405      	bmi.n	8000ef2 <_puts_r+0x4e>
 8000ee6:	89a3      	ldrh	r3, [r4, #12]
 8000ee8:	059b      	lsls	r3, r3, #22
 8000eea:	d402      	bmi.n	8000ef2 <_puts_r+0x4e>
 8000eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000eee:	f000 f999 	bl	8001224 <__retarget_lock_release_recursive>
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	bd70      	pop	{r4, r5, r6, pc}
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da04      	bge.n	8000f04 <_puts_r+0x60>
 8000efa:	69a2      	ldr	r2, [r4, #24]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dc17      	bgt.n	8000f30 <_puts_r+0x8c>
 8000f00:	290a      	cmp	r1, #10
 8000f02:	d015      	beq.n	8000f30 <_puts_r+0x8c>
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	6022      	str	r2, [r4, #0]
 8000f0a:	7019      	strb	r1, [r3, #0]
 8000f0c:	68a3      	ldr	r3, [r4, #8]
 8000f0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000f12:	3b01      	subs	r3, #1
 8000f14:	60a3      	str	r3, [r4, #8]
 8000f16:	2900      	cmp	r1, #0
 8000f18:	d1ed      	bne.n	8000ef6 <_puts_r+0x52>
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	da11      	bge.n	8000f42 <_puts_r+0x9e>
 8000f1e:	4622      	mov	r2, r4
 8000f20:	210a      	movs	r1, #10
 8000f22:	4628      	mov	r0, r5
 8000f24:	f000 f85f 	bl	8000fe6 <__swbuf_r>
 8000f28:	3001      	adds	r0, #1
 8000f2a:	d0d7      	beq.n	8000edc <_puts_r+0x38>
 8000f2c:	250a      	movs	r5, #10
 8000f2e:	e7d7      	b.n	8000ee0 <_puts_r+0x3c>
 8000f30:	4622      	mov	r2, r4
 8000f32:	4628      	mov	r0, r5
 8000f34:	f000 f857 	bl	8000fe6 <__swbuf_r>
 8000f38:	3001      	adds	r0, #1
 8000f3a:	d1e7      	bne.n	8000f0c <_puts_r+0x68>
 8000f3c:	e7ce      	b.n	8000edc <_puts_r+0x38>
 8000f3e:	3e01      	subs	r6, #1
 8000f40:	e7e4      	b.n	8000f0c <_puts_r+0x68>
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	6022      	str	r2, [r4, #0]
 8000f48:	220a      	movs	r2, #10
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	e7ee      	b.n	8000f2c <_puts_r+0x88>
	...

08000f50 <puts>:
 8000f50:	4b02      	ldr	r3, [pc, #8]	@ (8000f5c <puts+0xc>)
 8000f52:	4601      	mov	r1, r0
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	f7ff bfa5 	b.w	8000ea4 <_puts_r>
 8000f5a:	bf00      	nop
 8000f5c:	20000010 	.word	0x20000010

08000f60 <__sread>:
 8000f60:	b510      	push	{r4, lr}
 8000f62:	460c      	mov	r4, r1
 8000f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f68:	f000 f8fc 	bl	8001164 <_read_r>
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	bfab      	itete	ge
 8000f70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000f72:	89a3      	ldrhlt	r3, [r4, #12]
 8000f74:	181b      	addge	r3, r3, r0
 8000f76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000f7a:	bfac      	ite	ge
 8000f7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000f7e:	81a3      	strhlt	r3, [r4, #12]
 8000f80:	bd10      	pop	{r4, pc}

08000f82 <__swrite>:
 8000f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f86:	461f      	mov	r7, r3
 8000f88:	898b      	ldrh	r3, [r1, #12]
 8000f8a:	05db      	lsls	r3, r3, #23
 8000f8c:	4605      	mov	r5, r0
 8000f8e:	460c      	mov	r4, r1
 8000f90:	4616      	mov	r6, r2
 8000f92:	d505      	bpl.n	8000fa0 <__swrite+0x1e>
 8000f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f98:	2302      	movs	r3, #2
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f000 f8d0 	bl	8001140 <_lseek_r>
 8000fa0:	89a3      	ldrh	r3, [r4, #12]
 8000fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000faa:	81a3      	strh	r3, [r4, #12]
 8000fac:	4632      	mov	r2, r6
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb6:	f000 b8f7 	b.w	80011a8 <_write_r>

08000fba <__sseek>:
 8000fba:	b510      	push	{r4, lr}
 8000fbc:	460c      	mov	r4, r1
 8000fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fc2:	f000 f8bd 	bl	8001140 <_lseek_r>
 8000fc6:	1c43      	adds	r3, r0, #1
 8000fc8:	89a3      	ldrh	r3, [r4, #12]
 8000fca:	bf15      	itete	ne
 8000fcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000fce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000fd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000fd6:	81a3      	strheq	r3, [r4, #12]
 8000fd8:	bf18      	it	ne
 8000fda:	81a3      	strhne	r3, [r4, #12]
 8000fdc:	bd10      	pop	{r4, pc}

08000fde <__sclose>:
 8000fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fe2:	f000 b89d 	b.w	8001120 <_close_r>

08000fe6 <__swbuf_r>:
 8000fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe8:	460e      	mov	r6, r1
 8000fea:	4614      	mov	r4, r2
 8000fec:	4605      	mov	r5, r0
 8000fee:	b118      	cbz	r0, 8000ff8 <__swbuf_r+0x12>
 8000ff0:	6a03      	ldr	r3, [r0, #32]
 8000ff2:	b90b      	cbnz	r3, 8000ff8 <__swbuf_r+0x12>
 8000ff4:	f7ff ff06 	bl	8000e04 <__sinit>
 8000ff8:	69a3      	ldr	r3, [r4, #24]
 8000ffa:	60a3      	str	r3, [r4, #8]
 8000ffc:	89a3      	ldrh	r3, [r4, #12]
 8000ffe:	071a      	lsls	r2, r3, #28
 8001000:	d501      	bpl.n	8001006 <__swbuf_r+0x20>
 8001002:	6923      	ldr	r3, [r4, #16]
 8001004:	b943      	cbnz	r3, 8001018 <__swbuf_r+0x32>
 8001006:	4621      	mov	r1, r4
 8001008:	4628      	mov	r0, r5
 800100a:	f000 f82b 	bl	8001064 <__swsetup_r>
 800100e:	b118      	cbz	r0, 8001018 <__swbuf_r+0x32>
 8001010:	f04f 37ff 	mov.w	r7, #4294967295
 8001014:	4638      	mov	r0, r7
 8001016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	6922      	ldr	r2, [r4, #16]
 800101c:	1a98      	subs	r0, r3, r2
 800101e:	6963      	ldr	r3, [r4, #20]
 8001020:	b2f6      	uxtb	r6, r6
 8001022:	4283      	cmp	r3, r0
 8001024:	4637      	mov	r7, r6
 8001026:	dc05      	bgt.n	8001034 <__swbuf_r+0x4e>
 8001028:	4621      	mov	r1, r4
 800102a:	4628      	mov	r0, r5
 800102c:	f000 fc98 	bl	8001960 <_fflush_r>
 8001030:	2800      	cmp	r0, #0
 8001032:	d1ed      	bne.n	8001010 <__swbuf_r+0x2a>
 8001034:	68a3      	ldr	r3, [r4, #8]
 8001036:	3b01      	subs	r3, #1
 8001038:	60a3      	str	r3, [r4, #8]
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	6022      	str	r2, [r4, #0]
 8001040:	701e      	strb	r6, [r3, #0]
 8001042:	6962      	ldr	r2, [r4, #20]
 8001044:	1c43      	adds	r3, r0, #1
 8001046:	429a      	cmp	r2, r3
 8001048:	d004      	beq.n	8001054 <__swbuf_r+0x6e>
 800104a:	89a3      	ldrh	r3, [r4, #12]
 800104c:	07db      	lsls	r3, r3, #31
 800104e:	d5e1      	bpl.n	8001014 <__swbuf_r+0x2e>
 8001050:	2e0a      	cmp	r6, #10
 8001052:	d1df      	bne.n	8001014 <__swbuf_r+0x2e>
 8001054:	4621      	mov	r1, r4
 8001056:	4628      	mov	r0, r5
 8001058:	f000 fc82 	bl	8001960 <_fflush_r>
 800105c:	2800      	cmp	r0, #0
 800105e:	d0d9      	beq.n	8001014 <__swbuf_r+0x2e>
 8001060:	e7d6      	b.n	8001010 <__swbuf_r+0x2a>
	...

08001064 <__swsetup_r>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	4b29      	ldr	r3, [pc, #164]	@ (800110c <__swsetup_r+0xa8>)
 8001068:	4605      	mov	r5, r0
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	460c      	mov	r4, r1
 800106e:	b118      	cbz	r0, 8001078 <__swsetup_r+0x14>
 8001070:	6a03      	ldr	r3, [r0, #32]
 8001072:	b90b      	cbnz	r3, 8001078 <__swsetup_r+0x14>
 8001074:	f7ff fec6 	bl	8000e04 <__sinit>
 8001078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800107c:	0719      	lsls	r1, r3, #28
 800107e:	d422      	bmi.n	80010c6 <__swsetup_r+0x62>
 8001080:	06da      	lsls	r2, r3, #27
 8001082:	d407      	bmi.n	8001094 <__swsetup_r+0x30>
 8001084:	2209      	movs	r2, #9
 8001086:	602a      	str	r2, [r5, #0]
 8001088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800108c:	81a3      	strh	r3, [r4, #12]
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	e033      	b.n	80010fc <__swsetup_r+0x98>
 8001094:	0758      	lsls	r0, r3, #29
 8001096:	d512      	bpl.n	80010be <__swsetup_r+0x5a>
 8001098:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800109a:	b141      	cbz	r1, 80010ae <__swsetup_r+0x4a>
 800109c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010a0:	4299      	cmp	r1, r3
 80010a2:	d002      	beq.n	80010aa <__swsetup_r+0x46>
 80010a4:	4628      	mov	r0, r5
 80010a6:	f000 f8bf 	bl	8001228 <_free_r>
 80010aa:	2300      	movs	r3, #0
 80010ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80010ae:	89a3      	ldrh	r3, [r4, #12]
 80010b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80010b4:	81a3      	strh	r3, [r4, #12]
 80010b6:	2300      	movs	r3, #0
 80010b8:	6063      	str	r3, [r4, #4]
 80010ba:	6923      	ldr	r3, [r4, #16]
 80010bc:	6023      	str	r3, [r4, #0]
 80010be:	89a3      	ldrh	r3, [r4, #12]
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	81a3      	strh	r3, [r4, #12]
 80010c6:	6923      	ldr	r3, [r4, #16]
 80010c8:	b94b      	cbnz	r3, 80010de <__swsetup_r+0x7a>
 80010ca:	89a3      	ldrh	r3, [r4, #12]
 80010cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80010d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010d4:	d003      	beq.n	80010de <__swsetup_r+0x7a>
 80010d6:	4621      	mov	r1, r4
 80010d8:	4628      	mov	r0, r5
 80010da:	f000 fc8f 	bl	80019fc <__smakebuf_r>
 80010de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010e2:	f013 0201 	ands.w	r2, r3, #1
 80010e6:	d00a      	beq.n	80010fe <__swsetup_r+0x9a>
 80010e8:	2200      	movs	r2, #0
 80010ea:	60a2      	str	r2, [r4, #8]
 80010ec:	6962      	ldr	r2, [r4, #20]
 80010ee:	4252      	negs	r2, r2
 80010f0:	61a2      	str	r2, [r4, #24]
 80010f2:	6922      	ldr	r2, [r4, #16]
 80010f4:	b942      	cbnz	r2, 8001108 <__swsetup_r+0xa4>
 80010f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80010fa:	d1c5      	bne.n	8001088 <__swsetup_r+0x24>
 80010fc:	bd38      	pop	{r3, r4, r5, pc}
 80010fe:	0799      	lsls	r1, r3, #30
 8001100:	bf58      	it	pl
 8001102:	6962      	ldrpl	r2, [r4, #20]
 8001104:	60a2      	str	r2, [r4, #8]
 8001106:	e7f4      	b.n	80010f2 <__swsetup_r+0x8e>
 8001108:	2000      	movs	r0, #0
 800110a:	e7f7      	b.n	80010fc <__swsetup_r+0x98>
 800110c:	20000010 	.word	0x20000010

08001110 <memset>:
 8001110:	4402      	add	r2, r0
 8001112:	4603      	mov	r3, r0
 8001114:	4293      	cmp	r3, r2
 8001116:	d100      	bne.n	800111a <memset+0xa>
 8001118:	4770      	bx	lr
 800111a:	f803 1b01 	strb.w	r1, [r3], #1
 800111e:	e7f9      	b.n	8001114 <memset+0x4>

08001120 <_close_r>:
 8001120:	b538      	push	{r3, r4, r5, lr}
 8001122:	4d06      	ldr	r5, [pc, #24]	@ (800113c <_close_r+0x1c>)
 8001124:	2300      	movs	r3, #0
 8001126:	4604      	mov	r4, r0
 8001128:	4608      	mov	r0, r1
 800112a:	602b      	str	r3, [r5, #0]
 800112c:	f7ff fb7f 	bl	800082e <_close>
 8001130:	1c43      	adds	r3, r0, #1
 8001132:	d102      	bne.n	800113a <_close_r+0x1a>
 8001134:	682b      	ldr	r3, [r5, #0]
 8001136:	b103      	cbz	r3, 800113a <_close_r+0x1a>
 8001138:	6023      	str	r3, [r4, #0]
 800113a:	bd38      	pop	{r3, r4, r5, pc}
 800113c:	200001cc 	.word	0x200001cc

08001140 <_lseek_r>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	4d07      	ldr	r5, [pc, #28]	@ (8001160 <_lseek_r+0x20>)
 8001144:	4604      	mov	r4, r0
 8001146:	4608      	mov	r0, r1
 8001148:	4611      	mov	r1, r2
 800114a:	2200      	movs	r2, #0
 800114c:	602a      	str	r2, [r5, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	f7ff fb94 	bl	800087c <_lseek>
 8001154:	1c43      	adds	r3, r0, #1
 8001156:	d102      	bne.n	800115e <_lseek_r+0x1e>
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	b103      	cbz	r3, 800115e <_lseek_r+0x1e>
 800115c:	6023      	str	r3, [r4, #0]
 800115e:	bd38      	pop	{r3, r4, r5, pc}
 8001160:	200001cc 	.word	0x200001cc

08001164 <_read_r>:
 8001164:	b538      	push	{r3, r4, r5, lr}
 8001166:	4d07      	ldr	r5, [pc, #28]	@ (8001184 <_read_r+0x20>)
 8001168:	4604      	mov	r4, r0
 800116a:	4608      	mov	r0, r1
 800116c:	4611      	mov	r1, r2
 800116e:	2200      	movs	r2, #0
 8001170:	602a      	str	r2, [r5, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	f7ff fb22 	bl	80007bc <_read>
 8001178:	1c43      	adds	r3, r0, #1
 800117a:	d102      	bne.n	8001182 <_read_r+0x1e>
 800117c:	682b      	ldr	r3, [r5, #0]
 800117e:	b103      	cbz	r3, 8001182 <_read_r+0x1e>
 8001180:	6023      	str	r3, [r4, #0]
 8001182:	bd38      	pop	{r3, r4, r5, pc}
 8001184:	200001cc 	.word	0x200001cc

08001188 <_sbrk_r>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4d06      	ldr	r5, [pc, #24]	@ (80011a4 <_sbrk_r+0x1c>)
 800118c:	2300      	movs	r3, #0
 800118e:	4604      	mov	r4, r0
 8001190:	4608      	mov	r0, r1
 8001192:	602b      	str	r3, [r5, #0]
 8001194:	f7ff fb80 	bl	8000898 <_sbrk>
 8001198:	1c43      	adds	r3, r0, #1
 800119a:	d102      	bne.n	80011a2 <_sbrk_r+0x1a>
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	b103      	cbz	r3, 80011a2 <_sbrk_r+0x1a>
 80011a0:	6023      	str	r3, [r4, #0]
 80011a2:	bd38      	pop	{r3, r4, r5, pc}
 80011a4:	200001cc 	.word	0x200001cc

080011a8 <_write_r>:
 80011a8:	b538      	push	{r3, r4, r5, lr}
 80011aa:	4d07      	ldr	r5, [pc, #28]	@ (80011c8 <_write_r+0x20>)
 80011ac:	4604      	mov	r4, r0
 80011ae:	4608      	mov	r0, r1
 80011b0:	4611      	mov	r1, r2
 80011b2:	2200      	movs	r2, #0
 80011b4:	602a      	str	r2, [r5, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f7ff fb1d 	bl	80007f6 <_write>
 80011bc:	1c43      	adds	r3, r0, #1
 80011be:	d102      	bne.n	80011c6 <_write_r+0x1e>
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	b103      	cbz	r3, 80011c6 <_write_r+0x1e>
 80011c4:	6023      	str	r3, [r4, #0]
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
 80011c8:	200001cc 	.word	0x200001cc

080011cc <__errno>:
 80011cc:	4b01      	ldr	r3, [pc, #4]	@ (80011d4 <__errno+0x8>)
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000010 	.word	0x20000010

080011d8 <__libc_init_array>:
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	4d0d      	ldr	r5, [pc, #52]	@ (8001210 <__libc_init_array+0x38>)
 80011dc:	4c0d      	ldr	r4, [pc, #52]	@ (8001214 <__libc_init_array+0x3c>)
 80011de:	1b64      	subs	r4, r4, r5
 80011e0:	10a4      	asrs	r4, r4, #2
 80011e2:	2600      	movs	r6, #0
 80011e4:	42a6      	cmp	r6, r4
 80011e6:	d109      	bne.n	80011fc <__libc_init_array+0x24>
 80011e8:	4d0b      	ldr	r5, [pc, #44]	@ (8001218 <__libc_init_array+0x40>)
 80011ea:	4c0c      	ldr	r4, [pc, #48]	@ (800121c <__libc_init_array+0x44>)
 80011ec:	f000 fc98 	bl	8001b20 <_init>
 80011f0:	1b64      	subs	r4, r4, r5
 80011f2:	10a4      	asrs	r4, r4, #2
 80011f4:	2600      	movs	r6, #0
 80011f6:	42a6      	cmp	r6, r4
 80011f8:	d105      	bne.n	8001206 <__libc_init_array+0x2e>
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
 80011fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001200:	4798      	blx	r3
 8001202:	3601      	adds	r6, #1
 8001204:	e7ee      	b.n	80011e4 <__libc_init_array+0xc>
 8001206:	f855 3b04 	ldr.w	r3, [r5], #4
 800120a:	4798      	blx	r3
 800120c:	3601      	adds	r6, #1
 800120e:	e7f2      	b.n	80011f6 <__libc_init_array+0x1e>
 8001210:	08001cf8 	.word	0x08001cf8
 8001214:	08001cf8 	.word	0x08001cf8
 8001218:	08001cf8 	.word	0x08001cf8
 800121c:	08001cfc 	.word	0x08001cfc

08001220 <__retarget_lock_init_recursive>:
 8001220:	4770      	bx	lr

08001222 <__retarget_lock_acquire_recursive>:
 8001222:	4770      	bx	lr

08001224 <__retarget_lock_release_recursive>:
 8001224:	4770      	bx	lr
	...

08001228 <_free_r>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4605      	mov	r5, r0
 800122c:	2900      	cmp	r1, #0
 800122e:	d041      	beq.n	80012b4 <_free_r+0x8c>
 8001230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001234:	1f0c      	subs	r4, r1, #4
 8001236:	2b00      	cmp	r3, #0
 8001238:	bfb8      	it	lt
 800123a:	18e4      	addlt	r4, r4, r3
 800123c:	f7ff fd4a 	bl	8000cd4 <__malloc_lock>
 8001240:	4a1d      	ldr	r2, [pc, #116]	@ (80012b8 <_free_r+0x90>)
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	b933      	cbnz	r3, 8001254 <_free_r+0x2c>
 8001246:	6063      	str	r3, [r4, #4]
 8001248:	6014      	str	r4, [r2, #0]
 800124a:	4628      	mov	r0, r5
 800124c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001250:	f7ff bd46 	b.w	8000ce0 <__malloc_unlock>
 8001254:	42a3      	cmp	r3, r4
 8001256:	d908      	bls.n	800126a <_free_r+0x42>
 8001258:	6820      	ldr	r0, [r4, #0]
 800125a:	1821      	adds	r1, r4, r0
 800125c:	428b      	cmp	r3, r1
 800125e:	bf01      	itttt	eq
 8001260:	6819      	ldreq	r1, [r3, #0]
 8001262:	685b      	ldreq	r3, [r3, #4]
 8001264:	1809      	addeq	r1, r1, r0
 8001266:	6021      	streq	r1, [r4, #0]
 8001268:	e7ed      	b.n	8001246 <_free_r+0x1e>
 800126a:	461a      	mov	r2, r3
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	b10b      	cbz	r3, 8001274 <_free_r+0x4c>
 8001270:	42a3      	cmp	r3, r4
 8001272:	d9fa      	bls.n	800126a <_free_r+0x42>
 8001274:	6811      	ldr	r1, [r2, #0]
 8001276:	1850      	adds	r0, r2, r1
 8001278:	42a0      	cmp	r0, r4
 800127a:	d10b      	bne.n	8001294 <_free_r+0x6c>
 800127c:	6820      	ldr	r0, [r4, #0]
 800127e:	4401      	add	r1, r0
 8001280:	1850      	adds	r0, r2, r1
 8001282:	4283      	cmp	r3, r0
 8001284:	6011      	str	r1, [r2, #0]
 8001286:	d1e0      	bne.n	800124a <_free_r+0x22>
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	6053      	str	r3, [r2, #4]
 800128e:	4408      	add	r0, r1
 8001290:	6010      	str	r0, [r2, #0]
 8001292:	e7da      	b.n	800124a <_free_r+0x22>
 8001294:	d902      	bls.n	800129c <_free_r+0x74>
 8001296:	230c      	movs	r3, #12
 8001298:	602b      	str	r3, [r5, #0]
 800129a:	e7d6      	b.n	800124a <_free_r+0x22>
 800129c:	6820      	ldr	r0, [r4, #0]
 800129e:	1821      	adds	r1, r4, r0
 80012a0:	428b      	cmp	r3, r1
 80012a2:	bf04      	itt	eq
 80012a4:	6819      	ldreq	r1, [r3, #0]
 80012a6:	685b      	ldreq	r3, [r3, #4]
 80012a8:	6063      	str	r3, [r4, #4]
 80012aa:	bf04      	itt	eq
 80012ac:	1809      	addeq	r1, r1, r0
 80012ae:	6021      	streq	r1, [r4, #0]
 80012b0:	6054      	str	r4, [r2, #4]
 80012b2:	e7ca      	b.n	800124a <_free_r+0x22>
 80012b4:	bd38      	pop	{r3, r4, r5, pc}
 80012b6:	bf00      	nop
 80012b8:	2000008c 	.word	0x2000008c

080012bc <__sfputc_r>:
 80012bc:	6893      	ldr	r3, [r2, #8]
 80012be:	3b01      	subs	r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	b410      	push	{r4}
 80012c4:	6093      	str	r3, [r2, #8]
 80012c6:	da08      	bge.n	80012da <__sfputc_r+0x1e>
 80012c8:	6994      	ldr	r4, [r2, #24]
 80012ca:	42a3      	cmp	r3, r4
 80012cc:	db01      	blt.n	80012d2 <__sfputc_r+0x16>
 80012ce:	290a      	cmp	r1, #10
 80012d0:	d103      	bne.n	80012da <__sfputc_r+0x1e>
 80012d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012d6:	f7ff be86 	b.w	8000fe6 <__swbuf_r>
 80012da:	6813      	ldr	r3, [r2, #0]
 80012dc:	1c58      	adds	r0, r3, #1
 80012de:	6010      	str	r0, [r2, #0]
 80012e0:	7019      	strb	r1, [r3, #0]
 80012e2:	4608      	mov	r0, r1
 80012e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <__sfputs_r>:
 80012ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ec:	4606      	mov	r6, r0
 80012ee:	460f      	mov	r7, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	18d5      	adds	r5, r2, r3
 80012f4:	42ac      	cmp	r4, r5
 80012f6:	d101      	bne.n	80012fc <__sfputs_r+0x12>
 80012f8:	2000      	movs	r0, #0
 80012fa:	e007      	b.n	800130c <__sfputs_r+0x22>
 80012fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001300:	463a      	mov	r2, r7
 8001302:	4630      	mov	r0, r6
 8001304:	f7ff ffda 	bl	80012bc <__sfputc_r>
 8001308:	1c43      	adds	r3, r0, #1
 800130a:	d1f3      	bne.n	80012f4 <__sfputs_r+0xa>
 800130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001310 <_vfiprintf_r>:
 8001310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001314:	460d      	mov	r5, r1
 8001316:	b09d      	sub	sp, #116	@ 0x74
 8001318:	4614      	mov	r4, r2
 800131a:	4698      	mov	r8, r3
 800131c:	4606      	mov	r6, r0
 800131e:	b118      	cbz	r0, 8001328 <_vfiprintf_r+0x18>
 8001320:	6a03      	ldr	r3, [r0, #32]
 8001322:	b90b      	cbnz	r3, 8001328 <_vfiprintf_r+0x18>
 8001324:	f7ff fd6e 	bl	8000e04 <__sinit>
 8001328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800132a:	07d9      	lsls	r1, r3, #31
 800132c:	d405      	bmi.n	800133a <_vfiprintf_r+0x2a>
 800132e:	89ab      	ldrh	r3, [r5, #12]
 8001330:	059a      	lsls	r2, r3, #22
 8001332:	d402      	bmi.n	800133a <_vfiprintf_r+0x2a>
 8001334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001336:	f7ff ff74 	bl	8001222 <__retarget_lock_acquire_recursive>
 800133a:	89ab      	ldrh	r3, [r5, #12]
 800133c:	071b      	lsls	r3, r3, #28
 800133e:	d501      	bpl.n	8001344 <_vfiprintf_r+0x34>
 8001340:	692b      	ldr	r3, [r5, #16]
 8001342:	b99b      	cbnz	r3, 800136c <_vfiprintf_r+0x5c>
 8001344:	4629      	mov	r1, r5
 8001346:	4630      	mov	r0, r6
 8001348:	f7ff fe8c 	bl	8001064 <__swsetup_r>
 800134c:	b170      	cbz	r0, 800136c <_vfiprintf_r+0x5c>
 800134e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001350:	07dc      	lsls	r4, r3, #31
 8001352:	d504      	bpl.n	800135e <_vfiprintf_r+0x4e>
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	b01d      	add	sp, #116	@ 0x74
 800135a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800135e:	89ab      	ldrh	r3, [r5, #12]
 8001360:	0598      	lsls	r0, r3, #22
 8001362:	d4f7      	bmi.n	8001354 <_vfiprintf_r+0x44>
 8001364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001366:	f7ff ff5d 	bl	8001224 <__retarget_lock_release_recursive>
 800136a:	e7f3      	b.n	8001354 <_vfiprintf_r+0x44>
 800136c:	2300      	movs	r3, #0
 800136e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001370:	2320      	movs	r3, #32
 8001372:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001376:	f8cd 800c 	str.w	r8, [sp, #12]
 800137a:	2330      	movs	r3, #48	@ 0x30
 800137c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800152c <_vfiprintf_r+0x21c>
 8001380:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001384:	f04f 0901 	mov.w	r9, #1
 8001388:	4623      	mov	r3, r4
 800138a:	469a      	mov	sl, r3
 800138c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001390:	b10a      	cbz	r2, 8001396 <_vfiprintf_r+0x86>
 8001392:	2a25      	cmp	r2, #37	@ 0x25
 8001394:	d1f9      	bne.n	800138a <_vfiprintf_r+0x7a>
 8001396:	ebba 0b04 	subs.w	fp, sl, r4
 800139a:	d00b      	beq.n	80013b4 <_vfiprintf_r+0xa4>
 800139c:	465b      	mov	r3, fp
 800139e:	4622      	mov	r2, r4
 80013a0:	4629      	mov	r1, r5
 80013a2:	4630      	mov	r0, r6
 80013a4:	f7ff ffa1 	bl	80012ea <__sfputs_r>
 80013a8:	3001      	adds	r0, #1
 80013aa:	f000 80a7 	beq.w	80014fc <_vfiprintf_r+0x1ec>
 80013ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80013b0:	445a      	add	r2, fp
 80013b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80013b4:	f89a 3000 	ldrb.w	r3, [sl]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 809f 	beq.w	80014fc <_vfiprintf_r+0x1ec>
 80013be:	2300      	movs	r3, #0
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013c8:	f10a 0a01 	add.w	sl, sl, #1
 80013cc:	9304      	str	r3, [sp, #16]
 80013ce:	9307      	str	r3, [sp, #28]
 80013d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80013d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80013d6:	4654      	mov	r4, sl
 80013d8:	2205      	movs	r2, #5
 80013da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013de:	4853      	ldr	r0, [pc, #332]	@ (800152c <_vfiprintf_r+0x21c>)
 80013e0:	f7fe ff16 	bl	8000210 <memchr>
 80013e4:	9a04      	ldr	r2, [sp, #16]
 80013e6:	b9d8      	cbnz	r0, 8001420 <_vfiprintf_r+0x110>
 80013e8:	06d1      	lsls	r1, r2, #27
 80013ea:	bf44      	itt	mi
 80013ec:	2320      	movmi	r3, #32
 80013ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013f2:	0713      	lsls	r3, r2, #28
 80013f4:	bf44      	itt	mi
 80013f6:	232b      	movmi	r3, #43	@ 0x2b
 80013f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013fc:	f89a 3000 	ldrb.w	r3, [sl]
 8001400:	2b2a      	cmp	r3, #42	@ 0x2a
 8001402:	d015      	beq.n	8001430 <_vfiprintf_r+0x120>
 8001404:	9a07      	ldr	r2, [sp, #28]
 8001406:	4654      	mov	r4, sl
 8001408:	2000      	movs	r0, #0
 800140a:	f04f 0c0a 	mov.w	ip, #10
 800140e:	4621      	mov	r1, r4
 8001410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001414:	3b30      	subs	r3, #48	@ 0x30
 8001416:	2b09      	cmp	r3, #9
 8001418:	d94b      	bls.n	80014b2 <_vfiprintf_r+0x1a2>
 800141a:	b1b0      	cbz	r0, 800144a <_vfiprintf_r+0x13a>
 800141c:	9207      	str	r2, [sp, #28]
 800141e:	e014      	b.n	800144a <_vfiprintf_r+0x13a>
 8001420:	eba0 0308 	sub.w	r3, r0, r8
 8001424:	fa09 f303 	lsl.w	r3, r9, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	9304      	str	r3, [sp, #16]
 800142c:	46a2      	mov	sl, r4
 800142e:	e7d2      	b.n	80013d6 <_vfiprintf_r+0xc6>
 8001430:	9b03      	ldr	r3, [sp, #12]
 8001432:	1d19      	adds	r1, r3, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	9103      	str	r1, [sp, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	bfbb      	ittet	lt
 800143c:	425b      	neglt	r3, r3
 800143e:	f042 0202 	orrlt.w	r2, r2, #2
 8001442:	9307      	strge	r3, [sp, #28]
 8001444:	9307      	strlt	r3, [sp, #28]
 8001446:	bfb8      	it	lt
 8001448:	9204      	strlt	r2, [sp, #16]
 800144a:	7823      	ldrb	r3, [r4, #0]
 800144c:	2b2e      	cmp	r3, #46	@ 0x2e
 800144e:	d10a      	bne.n	8001466 <_vfiprintf_r+0x156>
 8001450:	7863      	ldrb	r3, [r4, #1]
 8001452:	2b2a      	cmp	r3, #42	@ 0x2a
 8001454:	d132      	bne.n	80014bc <_vfiprintf_r+0x1ac>
 8001456:	9b03      	ldr	r3, [sp, #12]
 8001458:	1d1a      	adds	r2, r3, #4
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	9203      	str	r2, [sp, #12]
 800145e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001462:	3402      	adds	r4, #2
 8001464:	9305      	str	r3, [sp, #20]
 8001466:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800153c <_vfiprintf_r+0x22c>
 800146a:	7821      	ldrb	r1, [r4, #0]
 800146c:	2203      	movs	r2, #3
 800146e:	4650      	mov	r0, sl
 8001470:	f7fe fece 	bl	8000210 <memchr>
 8001474:	b138      	cbz	r0, 8001486 <_vfiprintf_r+0x176>
 8001476:	9b04      	ldr	r3, [sp, #16]
 8001478:	eba0 000a 	sub.w	r0, r0, sl
 800147c:	2240      	movs	r2, #64	@ 0x40
 800147e:	4082      	lsls	r2, r0
 8001480:	4313      	orrs	r3, r2
 8001482:	3401      	adds	r4, #1
 8001484:	9304      	str	r3, [sp, #16]
 8001486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800148a:	4829      	ldr	r0, [pc, #164]	@ (8001530 <_vfiprintf_r+0x220>)
 800148c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001490:	2206      	movs	r2, #6
 8001492:	f7fe febd 	bl	8000210 <memchr>
 8001496:	2800      	cmp	r0, #0
 8001498:	d03f      	beq.n	800151a <_vfiprintf_r+0x20a>
 800149a:	4b26      	ldr	r3, [pc, #152]	@ (8001534 <_vfiprintf_r+0x224>)
 800149c:	bb1b      	cbnz	r3, 80014e6 <_vfiprintf_r+0x1d6>
 800149e:	9b03      	ldr	r3, [sp, #12]
 80014a0:	3307      	adds	r3, #7
 80014a2:	f023 0307 	bic.w	r3, r3, #7
 80014a6:	3308      	adds	r3, #8
 80014a8:	9303      	str	r3, [sp, #12]
 80014aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014ac:	443b      	add	r3, r7
 80014ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80014b0:	e76a      	b.n	8001388 <_vfiprintf_r+0x78>
 80014b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80014b6:	460c      	mov	r4, r1
 80014b8:	2001      	movs	r0, #1
 80014ba:	e7a8      	b.n	800140e <_vfiprintf_r+0xfe>
 80014bc:	2300      	movs	r3, #0
 80014be:	3401      	adds	r4, #1
 80014c0:	9305      	str	r3, [sp, #20]
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 0c0a 	mov.w	ip, #10
 80014c8:	4620      	mov	r0, r4
 80014ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014ce:	3a30      	subs	r2, #48	@ 0x30
 80014d0:	2a09      	cmp	r2, #9
 80014d2:	d903      	bls.n	80014dc <_vfiprintf_r+0x1cc>
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0c6      	beq.n	8001466 <_vfiprintf_r+0x156>
 80014d8:	9105      	str	r1, [sp, #20]
 80014da:	e7c4      	b.n	8001466 <_vfiprintf_r+0x156>
 80014dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80014e0:	4604      	mov	r4, r0
 80014e2:	2301      	movs	r3, #1
 80014e4:	e7f0      	b.n	80014c8 <_vfiprintf_r+0x1b8>
 80014e6:	ab03      	add	r3, sp, #12
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	462a      	mov	r2, r5
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <_vfiprintf_r+0x228>)
 80014ee:	a904      	add	r1, sp, #16
 80014f0:	4630      	mov	r0, r6
 80014f2:	f3af 8000 	nop.w
 80014f6:	4607      	mov	r7, r0
 80014f8:	1c78      	adds	r0, r7, #1
 80014fa:	d1d6      	bne.n	80014aa <_vfiprintf_r+0x19a>
 80014fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80014fe:	07d9      	lsls	r1, r3, #31
 8001500:	d405      	bmi.n	800150e <_vfiprintf_r+0x1fe>
 8001502:	89ab      	ldrh	r3, [r5, #12]
 8001504:	059a      	lsls	r2, r3, #22
 8001506:	d402      	bmi.n	800150e <_vfiprintf_r+0x1fe>
 8001508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800150a:	f7ff fe8b 	bl	8001224 <__retarget_lock_release_recursive>
 800150e:	89ab      	ldrh	r3, [r5, #12]
 8001510:	065b      	lsls	r3, r3, #25
 8001512:	f53f af1f 	bmi.w	8001354 <_vfiprintf_r+0x44>
 8001516:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001518:	e71e      	b.n	8001358 <_vfiprintf_r+0x48>
 800151a:	ab03      	add	r3, sp, #12
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	462a      	mov	r2, r5
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <_vfiprintf_r+0x228>)
 8001522:	a904      	add	r1, sp, #16
 8001524:	4630      	mov	r0, r6
 8001526:	f000 f879 	bl	800161c <_printf_i>
 800152a:	e7e4      	b.n	80014f6 <_vfiprintf_r+0x1e6>
 800152c:	08001cbb 	.word	0x08001cbb
 8001530:	08001cc5 	.word	0x08001cc5
 8001534:	00000000 	.word	0x00000000
 8001538:	080012eb 	.word	0x080012eb
 800153c:	08001cc1 	.word	0x08001cc1

08001540 <_printf_common>:
 8001540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001544:	4616      	mov	r6, r2
 8001546:	4698      	mov	r8, r3
 8001548:	688a      	ldr	r2, [r1, #8]
 800154a:	690b      	ldr	r3, [r1, #16]
 800154c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001550:	4293      	cmp	r3, r2
 8001552:	bfb8      	it	lt
 8001554:	4613      	movlt	r3, r2
 8001556:	6033      	str	r3, [r6, #0]
 8001558:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800155c:	4607      	mov	r7, r0
 800155e:	460c      	mov	r4, r1
 8001560:	b10a      	cbz	r2, 8001566 <_printf_common+0x26>
 8001562:	3301      	adds	r3, #1
 8001564:	6033      	str	r3, [r6, #0]
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	0699      	lsls	r1, r3, #26
 800156a:	bf42      	ittt	mi
 800156c:	6833      	ldrmi	r3, [r6, #0]
 800156e:	3302      	addmi	r3, #2
 8001570:	6033      	strmi	r3, [r6, #0]
 8001572:	6825      	ldr	r5, [r4, #0]
 8001574:	f015 0506 	ands.w	r5, r5, #6
 8001578:	d106      	bne.n	8001588 <_printf_common+0x48>
 800157a:	f104 0a19 	add.w	sl, r4, #25
 800157e:	68e3      	ldr	r3, [r4, #12]
 8001580:	6832      	ldr	r2, [r6, #0]
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	42ab      	cmp	r3, r5
 8001586:	dc26      	bgt.n	80015d6 <_printf_common+0x96>
 8001588:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800158c:	6822      	ldr	r2, [r4, #0]
 800158e:	3b00      	subs	r3, #0
 8001590:	bf18      	it	ne
 8001592:	2301      	movne	r3, #1
 8001594:	0692      	lsls	r2, r2, #26
 8001596:	d42b      	bmi.n	80015f0 <_printf_common+0xb0>
 8001598:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800159c:	4641      	mov	r1, r8
 800159e:	4638      	mov	r0, r7
 80015a0:	47c8      	blx	r9
 80015a2:	3001      	adds	r0, #1
 80015a4:	d01e      	beq.n	80015e4 <_printf_common+0xa4>
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	6922      	ldr	r2, [r4, #16]
 80015aa:	f003 0306 	and.w	r3, r3, #6
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf02      	ittt	eq
 80015b2:	68e5      	ldreq	r5, [r4, #12]
 80015b4:	6833      	ldreq	r3, [r6, #0]
 80015b6:	1aed      	subeq	r5, r5, r3
 80015b8:	68a3      	ldr	r3, [r4, #8]
 80015ba:	bf0c      	ite	eq
 80015bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015c0:	2500      	movne	r5, #0
 80015c2:	4293      	cmp	r3, r2
 80015c4:	bfc4      	itt	gt
 80015c6:	1a9b      	subgt	r3, r3, r2
 80015c8:	18ed      	addgt	r5, r5, r3
 80015ca:	2600      	movs	r6, #0
 80015cc:	341a      	adds	r4, #26
 80015ce:	42b5      	cmp	r5, r6
 80015d0:	d11a      	bne.n	8001608 <_printf_common+0xc8>
 80015d2:	2000      	movs	r0, #0
 80015d4:	e008      	b.n	80015e8 <_printf_common+0xa8>
 80015d6:	2301      	movs	r3, #1
 80015d8:	4652      	mov	r2, sl
 80015da:	4641      	mov	r1, r8
 80015dc:	4638      	mov	r0, r7
 80015de:	47c8      	blx	r9
 80015e0:	3001      	adds	r0, #1
 80015e2:	d103      	bne.n	80015ec <_printf_common+0xac>
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015ec:	3501      	adds	r5, #1
 80015ee:	e7c6      	b.n	800157e <_printf_common+0x3e>
 80015f0:	18e1      	adds	r1, r4, r3
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	2030      	movs	r0, #48	@ 0x30
 80015f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80015fa:	4422      	add	r2, r4
 80015fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001600:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001604:	3302      	adds	r3, #2
 8001606:	e7c7      	b.n	8001598 <_printf_common+0x58>
 8001608:	2301      	movs	r3, #1
 800160a:	4622      	mov	r2, r4
 800160c:	4641      	mov	r1, r8
 800160e:	4638      	mov	r0, r7
 8001610:	47c8      	blx	r9
 8001612:	3001      	adds	r0, #1
 8001614:	d0e6      	beq.n	80015e4 <_printf_common+0xa4>
 8001616:	3601      	adds	r6, #1
 8001618:	e7d9      	b.n	80015ce <_printf_common+0x8e>
	...

0800161c <_printf_i>:
 800161c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001620:	7e0f      	ldrb	r7, [r1, #24]
 8001622:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001624:	2f78      	cmp	r7, #120	@ 0x78
 8001626:	4691      	mov	r9, r2
 8001628:	4680      	mov	r8, r0
 800162a:	460c      	mov	r4, r1
 800162c:	469a      	mov	sl, r3
 800162e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001632:	d807      	bhi.n	8001644 <_printf_i+0x28>
 8001634:	2f62      	cmp	r7, #98	@ 0x62
 8001636:	d80a      	bhi.n	800164e <_printf_i+0x32>
 8001638:	2f00      	cmp	r7, #0
 800163a:	f000 80d1 	beq.w	80017e0 <_printf_i+0x1c4>
 800163e:	2f58      	cmp	r7, #88	@ 0x58
 8001640:	f000 80b8 	beq.w	80017b4 <_printf_i+0x198>
 8001644:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001648:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800164c:	e03a      	b.n	80016c4 <_printf_i+0xa8>
 800164e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001652:	2b15      	cmp	r3, #21
 8001654:	d8f6      	bhi.n	8001644 <_printf_i+0x28>
 8001656:	a101      	add	r1, pc, #4	@ (adr r1, 800165c <_printf_i+0x40>)
 8001658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800165c:	080016b5 	.word	0x080016b5
 8001660:	080016c9 	.word	0x080016c9
 8001664:	08001645 	.word	0x08001645
 8001668:	08001645 	.word	0x08001645
 800166c:	08001645 	.word	0x08001645
 8001670:	08001645 	.word	0x08001645
 8001674:	080016c9 	.word	0x080016c9
 8001678:	08001645 	.word	0x08001645
 800167c:	08001645 	.word	0x08001645
 8001680:	08001645 	.word	0x08001645
 8001684:	08001645 	.word	0x08001645
 8001688:	080017c7 	.word	0x080017c7
 800168c:	080016f3 	.word	0x080016f3
 8001690:	08001781 	.word	0x08001781
 8001694:	08001645 	.word	0x08001645
 8001698:	08001645 	.word	0x08001645
 800169c:	080017e9 	.word	0x080017e9
 80016a0:	08001645 	.word	0x08001645
 80016a4:	080016f3 	.word	0x080016f3
 80016a8:	08001645 	.word	0x08001645
 80016ac:	08001645 	.word	0x08001645
 80016b0:	08001789 	.word	0x08001789
 80016b4:	6833      	ldr	r3, [r6, #0]
 80016b6:	1d1a      	adds	r2, r3, #4
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6032      	str	r2, [r6, #0]
 80016bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80016c4:	2301      	movs	r3, #1
 80016c6:	e09c      	b.n	8001802 <_printf_i+0x1e6>
 80016c8:	6833      	ldr	r3, [r6, #0]
 80016ca:	6820      	ldr	r0, [r4, #0]
 80016cc:	1d19      	adds	r1, r3, #4
 80016ce:	6031      	str	r1, [r6, #0]
 80016d0:	0606      	lsls	r6, r0, #24
 80016d2:	d501      	bpl.n	80016d8 <_printf_i+0xbc>
 80016d4:	681d      	ldr	r5, [r3, #0]
 80016d6:	e003      	b.n	80016e0 <_printf_i+0xc4>
 80016d8:	0645      	lsls	r5, r0, #25
 80016da:	d5fb      	bpl.n	80016d4 <_printf_i+0xb8>
 80016dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80016e0:	2d00      	cmp	r5, #0
 80016e2:	da03      	bge.n	80016ec <_printf_i+0xd0>
 80016e4:	232d      	movs	r3, #45	@ 0x2d
 80016e6:	426d      	negs	r5, r5
 80016e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80016ec:	4858      	ldr	r0, [pc, #352]	@ (8001850 <_printf_i+0x234>)
 80016ee:	230a      	movs	r3, #10
 80016f0:	e011      	b.n	8001716 <_printf_i+0xfa>
 80016f2:	6821      	ldr	r1, [r4, #0]
 80016f4:	6833      	ldr	r3, [r6, #0]
 80016f6:	0608      	lsls	r0, r1, #24
 80016f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80016fc:	d402      	bmi.n	8001704 <_printf_i+0xe8>
 80016fe:	0649      	lsls	r1, r1, #25
 8001700:	bf48      	it	mi
 8001702:	b2ad      	uxthmi	r5, r5
 8001704:	2f6f      	cmp	r7, #111	@ 0x6f
 8001706:	4852      	ldr	r0, [pc, #328]	@ (8001850 <_printf_i+0x234>)
 8001708:	6033      	str	r3, [r6, #0]
 800170a:	bf14      	ite	ne
 800170c:	230a      	movne	r3, #10
 800170e:	2308      	moveq	r3, #8
 8001710:	2100      	movs	r1, #0
 8001712:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001716:	6866      	ldr	r6, [r4, #4]
 8001718:	60a6      	str	r6, [r4, #8]
 800171a:	2e00      	cmp	r6, #0
 800171c:	db05      	blt.n	800172a <_printf_i+0x10e>
 800171e:	6821      	ldr	r1, [r4, #0]
 8001720:	432e      	orrs	r6, r5
 8001722:	f021 0104 	bic.w	r1, r1, #4
 8001726:	6021      	str	r1, [r4, #0]
 8001728:	d04b      	beq.n	80017c2 <_printf_i+0x1a6>
 800172a:	4616      	mov	r6, r2
 800172c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001730:	fb03 5711 	mls	r7, r3, r1, r5
 8001734:	5dc7      	ldrb	r7, [r0, r7]
 8001736:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800173a:	462f      	mov	r7, r5
 800173c:	42bb      	cmp	r3, r7
 800173e:	460d      	mov	r5, r1
 8001740:	d9f4      	bls.n	800172c <_printf_i+0x110>
 8001742:	2b08      	cmp	r3, #8
 8001744:	d10b      	bne.n	800175e <_printf_i+0x142>
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	07df      	lsls	r7, r3, #31
 800174a:	d508      	bpl.n	800175e <_printf_i+0x142>
 800174c:	6923      	ldr	r3, [r4, #16]
 800174e:	6861      	ldr	r1, [r4, #4]
 8001750:	4299      	cmp	r1, r3
 8001752:	bfde      	ittt	le
 8001754:	2330      	movle	r3, #48	@ 0x30
 8001756:	f806 3c01 	strble.w	r3, [r6, #-1]
 800175a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800175e:	1b92      	subs	r2, r2, r6
 8001760:	6122      	str	r2, [r4, #16]
 8001762:	f8cd a000 	str.w	sl, [sp]
 8001766:	464b      	mov	r3, r9
 8001768:	aa03      	add	r2, sp, #12
 800176a:	4621      	mov	r1, r4
 800176c:	4640      	mov	r0, r8
 800176e:	f7ff fee7 	bl	8001540 <_printf_common>
 8001772:	3001      	adds	r0, #1
 8001774:	d14a      	bne.n	800180c <_printf_i+0x1f0>
 8001776:	f04f 30ff 	mov.w	r0, #4294967295
 800177a:	b004      	add	sp, #16
 800177c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	f043 0320 	orr.w	r3, r3, #32
 8001786:	6023      	str	r3, [r4, #0]
 8001788:	4832      	ldr	r0, [pc, #200]	@ (8001854 <_printf_i+0x238>)
 800178a:	2778      	movs	r7, #120	@ 0x78
 800178c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	6831      	ldr	r1, [r6, #0]
 8001794:	061f      	lsls	r7, r3, #24
 8001796:	f851 5b04 	ldr.w	r5, [r1], #4
 800179a:	d402      	bmi.n	80017a2 <_printf_i+0x186>
 800179c:	065f      	lsls	r7, r3, #25
 800179e:	bf48      	it	mi
 80017a0:	b2ad      	uxthmi	r5, r5
 80017a2:	6031      	str	r1, [r6, #0]
 80017a4:	07d9      	lsls	r1, r3, #31
 80017a6:	bf44      	itt	mi
 80017a8:	f043 0320 	orrmi.w	r3, r3, #32
 80017ac:	6023      	strmi	r3, [r4, #0]
 80017ae:	b11d      	cbz	r5, 80017b8 <_printf_i+0x19c>
 80017b0:	2310      	movs	r3, #16
 80017b2:	e7ad      	b.n	8001710 <_printf_i+0xf4>
 80017b4:	4826      	ldr	r0, [pc, #152]	@ (8001850 <_printf_i+0x234>)
 80017b6:	e7e9      	b.n	800178c <_printf_i+0x170>
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	f023 0320 	bic.w	r3, r3, #32
 80017be:	6023      	str	r3, [r4, #0]
 80017c0:	e7f6      	b.n	80017b0 <_printf_i+0x194>
 80017c2:	4616      	mov	r6, r2
 80017c4:	e7bd      	b.n	8001742 <_printf_i+0x126>
 80017c6:	6833      	ldr	r3, [r6, #0]
 80017c8:	6825      	ldr	r5, [r4, #0]
 80017ca:	6961      	ldr	r1, [r4, #20]
 80017cc:	1d18      	adds	r0, r3, #4
 80017ce:	6030      	str	r0, [r6, #0]
 80017d0:	062e      	lsls	r6, r5, #24
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	d501      	bpl.n	80017da <_printf_i+0x1be>
 80017d6:	6019      	str	r1, [r3, #0]
 80017d8:	e002      	b.n	80017e0 <_printf_i+0x1c4>
 80017da:	0668      	lsls	r0, r5, #25
 80017dc:	d5fb      	bpl.n	80017d6 <_printf_i+0x1ba>
 80017de:	8019      	strh	r1, [r3, #0]
 80017e0:	2300      	movs	r3, #0
 80017e2:	6123      	str	r3, [r4, #16]
 80017e4:	4616      	mov	r6, r2
 80017e6:	e7bc      	b.n	8001762 <_printf_i+0x146>
 80017e8:	6833      	ldr	r3, [r6, #0]
 80017ea:	1d1a      	adds	r2, r3, #4
 80017ec:	6032      	str	r2, [r6, #0]
 80017ee:	681e      	ldr	r6, [r3, #0]
 80017f0:	6862      	ldr	r2, [r4, #4]
 80017f2:	2100      	movs	r1, #0
 80017f4:	4630      	mov	r0, r6
 80017f6:	f7fe fd0b 	bl	8000210 <memchr>
 80017fa:	b108      	cbz	r0, 8001800 <_printf_i+0x1e4>
 80017fc:	1b80      	subs	r0, r0, r6
 80017fe:	6060      	str	r0, [r4, #4]
 8001800:	6863      	ldr	r3, [r4, #4]
 8001802:	6123      	str	r3, [r4, #16]
 8001804:	2300      	movs	r3, #0
 8001806:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800180a:	e7aa      	b.n	8001762 <_printf_i+0x146>
 800180c:	6923      	ldr	r3, [r4, #16]
 800180e:	4632      	mov	r2, r6
 8001810:	4649      	mov	r1, r9
 8001812:	4640      	mov	r0, r8
 8001814:	47d0      	blx	sl
 8001816:	3001      	adds	r0, #1
 8001818:	d0ad      	beq.n	8001776 <_printf_i+0x15a>
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	079b      	lsls	r3, r3, #30
 800181e:	d413      	bmi.n	8001848 <_printf_i+0x22c>
 8001820:	68e0      	ldr	r0, [r4, #12]
 8001822:	9b03      	ldr	r3, [sp, #12]
 8001824:	4298      	cmp	r0, r3
 8001826:	bfb8      	it	lt
 8001828:	4618      	movlt	r0, r3
 800182a:	e7a6      	b.n	800177a <_printf_i+0x15e>
 800182c:	2301      	movs	r3, #1
 800182e:	4632      	mov	r2, r6
 8001830:	4649      	mov	r1, r9
 8001832:	4640      	mov	r0, r8
 8001834:	47d0      	blx	sl
 8001836:	3001      	adds	r0, #1
 8001838:	d09d      	beq.n	8001776 <_printf_i+0x15a>
 800183a:	3501      	adds	r5, #1
 800183c:	68e3      	ldr	r3, [r4, #12]
 800183e:	9903      	ldr	r1, [sp, #12]
 8001840:	1a5b      	subs	r3, r3, r1
 8001842:	42ab      	cmp	r3, r5
 8001844:	dcf2      	bgt.n	800182c <_printf_i+0x210>
 8001846:	e7eb      	b.n	8001820 <_printf_i+0x204>
 8001848:	2500      	movs	r5, #0
 800184a:	f104 0619 	add.w	r6, r4, #25
 800184e:	e7f5      	b.n	800183c <_printf_i+0x220>
 8001850:	08001ccc 	.word	0x08001ccc
 8001854:	08001cdd 	.word	0x08001cdd

08001858 <__sflush_r>:
 8001858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800185c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001860:	0716      	lsls	r6, r2, #28
 8001862:	4605      	mov	r5, r0
 8001864:	460c      	mov	r4, r1
 8001866:	d454      	bmi.n	8001912 <__sflush_r+0xba>
 8001868:	684b      	ldr	r3, [r1, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	dc02      	bgt.n	8001874 <__sflush_r+0x1c>
 800186e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001870:	2b00      	cmp	r3, #0
 8001872:	dd48      	ble.n	8001906 <__sflush_r+0xae>
 8001874:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001876:	2e00      	cmp	r6, #0
 8001878:	d045      	beq.n	8001906 <__sflush_r+0xae>
 800187a:	2300      	movs	r3, #0
 800187c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001880:	682f      	ldr	r7, [r5, #0]
 8001882:	6a21      	ldr	r1, [r4, #32]
 8001884:	602b      	str	r3, [r5, #0]
 8001886:	d030      	beq.n	80018ea <__sflush_r+0x92>
 8001888:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800188a:	89a3      	ldrh	r3, [r4, #12]
 800188c:	0759      	lsls	r1, r3, #29
 800188e:	d505      	bpl.n	800189c <__sflush_r+0x44>
 8001890:	6863      	ldr	r3, [r4, #4]
 8001892:	1ad2      	subs	r2, r2, r3
 8001894:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001896:	b10b      	cbz	r3, 800189c <__sflush_r+0x44>
 8001898:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800189a:	1ad2      	subs	r2, r2, r3
 800189c:	2300      	movs	r3, #0
 800189e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80018a0:	6a21      	ldr	r1, [r4, #32]
 80018a2:	4628      	mov	r0, r5
 80018a4:	47b0      	blx	r6
 80018a6:	1c43      	adds	r3, r0, #1
 80018a8:	89a3      	ldrh	r3, [r4, #12]
 80018aa:	d106      	bne.n	80018ba <__sflush_r+0x62>
 80018ac:	6829      	ldr	r1, [r5, #0]
 80018ae:	291d      	cmp	r1, #29
 80018b0:	d82b      	bhi.n	800190a <__sflush_r+0xb2>
 80018b2:	4a2a      	ldr	r2, [pc, #168]	@ (800195c <__sflush_r+0x104>)
 80018b4:	40ca      	lsrs	r2, r1
 80018b6:	07d6      	lsls	r6, r2, #31
 80018b8:	d527      	bpl.n	800190a <__sflush_r+0xb2>
 80018ba:	2200      	movs	r2, #0
 80018bc:	6062      	str	r2, [r4, #4]
 80018be:	04d9      	lsls	r1, r3, #19
 80018c0:	6922      	ldr	r2, [r4, #16]
 80018c2:	6022      	str	r2, [r4, #0]
 80018c4:	d504      	bpl.n	80018d0 <__sflush_r+0x78>
 80018c6:	1c42      	adds	r2, r0, #1
 80018c8:	d101      	bne.n	80018ce <__sflush_r+0x76>
 80018ca:	682b      	ldr	r3, [r5, #0]
 80018cc:	b903      	cbnz	r3, 80018d0 <__sflush_r+0x78>
 80018ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80018d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018d2:	602f      	str	r7, [r5, #0]
 80018d4:	b1b9      	cbz	r1, 8001906 <__sflush_r+0xae>
 80018d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80018da:	4299      	cmp	r1, r3
 80018dc:	d002      	beq.n	80018e4 <__sflush_r+0x8c>
 80018de:	4628      	mov	r0, r5
 80018e0:	f7ff fca2 	bl	8001228 <_free_r>
 80018e4:	2300      	movs	r3, #0
 80018e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80018e8:	e00d      	b.n	8001906 <__sflush_r+0xae>
 80018ea:	2301      	movs	r3, #1
 80018ec:	4628      	mov	r0, r5
 80018ee:	47b0      	blx	r6
 80018f0:	4602      	mov	r2, r0
 80018f2:	1c50      	adds	r0, r2, #1
 80018f4:	d1c9      	bne.n	800188a <__sflush_r+0x32>
 80018f6:	682b      	ldr	r3, [r5, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0c6      	beq.n	800188a <__sflush_r+0x32>
 80018fc:	2b1d      	cmp	r3, #29
 80018fe:	d001      	beq.n	8001904 <__sflush_r+0xac>
 8001900:	2b16      	cmp	r3, #22
 8001902:	d11e      	bne.n	8001942 <__sflush_r+0xea>
 8001904:	602f      	str	r7, [r5, #0]
 8001906:	2000      	movs	r0, #0
 8001908:	e022      	b.n	8001950 <__sflush_r+0xf8>
 800190a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800190e:	b21b      	sxth	r3, r3
 8001910:	e01b      	b.n	800194a <__sflush_r+0xf2>
 8001912:	690f      	ldr	r7, [r1, #16]
 8001914:	2f00      	cmp	r7, #0
 8001916:	d0f6      	beq.n	8001906 <__sflush_r+0xae>
 8001918:	0793      	lsls	r3, r2, #30
 800191a:	680e      	ldr	r6, [r1, #0]
 800191c:	bf08      	it	eq
 800191e:	694b      	ldreq	r3, [r1, #20]
 8001920:	600f      	str	r7, [r1, #0]
 8001922:	bf18      	it	ne
 8001924:	2300      	movne	r3, #0
 8001926:	eba6 0807 	sub.w	r8, r6, r7
 800192a:	608b      	str	r3, [r1, #8]
 800192c:	f1b8 0f00 	cmp.w	r8, #0
 8001930:	dde9      	ble.n	8001906 <__sflush_r+0xae>
 8001932:	6a21      	ldr	r1, [r4, #32]
 8001934:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001936:	4643      	mov	r3, r8
 8001938:	463a      	mov	r2, r7
 800193a:	4628      	mov	r0, r5
 800193c:	47b0      	blx	r6
 800193e:	2800      	cmp	r0, #0
 8001940:	dc08      	bgt.n	8001954 <__sflush_r+0xfc>
 8001942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800194a:	81a3      	strh	r3, [r4, #12]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001954:	4407      	add	r7, r0
 8001956:	eba8 0800 	sub.w	r8, r8, r0
 800195a:	e7e7      	b.n	800192c <__sflush_r+0xd4>
 800195c:	20400001 	.word	0x20400001

08001960 <_fflush_r>:
 8001960:	b538      	push	{r3, r4, r5, lr}
 8001962:	690b      	ldr	r3, [r1, #16]
 8001964:	4605      	mov	r5, r0
 8001966:	460c      	mov	r4, r1
 8001968:	b913      	cbnz	r3, 8001970 <_fflush_r+0x10>
 800196a:	2500      	movs	r5, #0
 800196c:	4628      	mov	r0, r5
 800196e:	bd38      	pop	{r3, r4, r5, pc}
 8001970:	b118      	cbz	r0, 800197a <_fflush_r+0x1a>
 8001972:	6a03      	ldr	r3, [r0, #32]
 8001974:	b90b      	cbnz	r3, 800197a <_fflush_r+0x1a>
 8001976:	f7ff fa45 	bl	8000e04 <__sinit>
 800197a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f3      	beq.n	800196a <_fflush_r+0xa>
 8001982:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001984:	07d0      	lsls	r0, r2, #31
 8001986:	d404      	bmi.n	8001992 <_fflush_r+0x32>
 8001988:	0599      	lsls	r1, r3, #22
 800198a:	d402      	bmi.n	8001992 <_fflush_r+0x32>
 800198c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800198e:	f7ff fc48 	bl	8001222 <__retarget_lock_acquire_recursive>
 8001992:	4628      	mov	r0, r5
 8001994:	4621      	mov	r1, r4
 8001996:	f7ff ff5f 	bl	8001858 <__sflush_r>
 800199a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800199c:	07da      	lsls	r2, r3, #31
 800199e:	4605      	mov	r5, r0
 80019a0:	d4e4      	bmi.n	800196c <_fflush_r+0xc>
 80019a2:	89a3      	ldrh	r3, [r4, #12]
 80019a4:	059b      	lsls	r3, r3, #22
 80019a6:	d4e1      	bmi.n	800196c <_fflush_r+0xc>
 80019a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019aa:	f7ff fc3b 	bl	8001224 <__retarget_lock_release_recursive>
 80019ae:	e7dd      	b.n	800196c <_fflush_r+0xc>

080019b0 <__swhatbuf_r>:
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	460c      	mov	r4, r1
 80019b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019b8:	2900      	cmp	r1, #0
 80019ba:	b096      	sub	sp, #88	@ 0x58
 80019bc:	4615      	mov	r5, r2
 80019be:	461e      	mov	r6, r3
 80019c0:	da0d      	bge.n	80019de <__swhatbuf_r+0x2e>
 80019c2:	89a3      	ldrh	r3, [r4, #12]
 80019c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2340      	movne	r3, #64	@ 0x40
 80019d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80019d4:	2000      	movs	r0, #0
 80019d6:	6031      	str	r1, [r6, #0]
 80019d8:	602b      	str	r3, [r5, #0]
 80019da:	b016      	add	sp, #88	@ 0x58
 80019dc:	bd70      	pop	{r4, r5, r6, pc}
 80019de:	466a      	mov	r2, sp
 80019e0:	f000 f87c 	bl	8001adc <_fstat_r>
 80019e4:	2800      	cmp	r0, #0
 80019e6:	dbec      	blt.n	80019c2 <__swhatbuf_r+0x12>
 80019e8:	9901      	ldr	r1, [sp, #4]
 80019ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80019ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80019f2:	4259      	negs	r1, r3
 80019f4:	4159      	adcs	r1, r3
 80019f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019fa:	e7eb      	b.n	80019d4 <__swhatbuf_r+0x24>

080019fc <__smakebuf_r>:
 80019fc:	898b      	ldrh	r3, [r1, #12]
 80019fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a00:	079d      	lsls	r5, r3, #30
 8001a02:	4606      	mov	r6, r0
 8001a04:	460c      	mov	r4, r1
 8001a06:	d507      	bpl.n	8001a18 <__smakebuf_r+0x1c>
 8001a08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001a0c:	6023      	str	r3, [r4, #0]
 8001a0e:	6123      	str	r3, [r4, #16]
 8001a10:	2301      	movs	r3, #1
 8001a12:	6163      	str	r3, [r4, #20]
 8001a14:	b003      	add	sp, #12
 8001a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a18:	ab01      	add	r3, sp, #4
 8001a1a:	466a      	mov	r2, sp
 8001a1c:	f7ff ffc8 	bl	80019b0 <__swhatbuf_r>
 8001a20:	9f00      	ldr	r7, [sp, #0]
 8001a22:	4605      	mov	r5, r0
 8001a24:	4639      	mov	r1, r7
 8001a26:	4630      	mov	r0, r6
 8001a28:	f7ff f8d4 	bl	8000bd4 <_malloc_r>
 8001a2c:	b948      	cbnz	r0, 8001a42 <__smakebuf_r+0x46>
 8001a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a32:	059a      	lsls	r2, r3, #22
 8001a34:	d4ee      	bmi.n	8001a14 <__smakebuf_r+0x18>
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	f043 0302 	orr.w	r3, r3, #2
 8001a3e:	81a3      	strh	r3, [r4, #12]
 8001a40:	e7e2      	b.n	8001a08 <__smakebuf_r+0xc>
 8001a42:	89a3      	ldrh	r3, [r4, #12]
 8001a44:	6020      	str	r0, [r4, #0]
 8001a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a4a:	81a3      	strh	r3, [r4, #12]
 8001a4c:	9b01      	ldr	r3, [sp, #4]
 8001a4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001a52:	b15b      	cbz	r3, 8001a6c <__smakebuf_r+0x70>
 8001a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a58:	4630      	mov	r0, r6
 8001a5a:	f000 f851 	bl	8001b00 <_isatty_r>
 8001a5e:	b128      	cbz	r0, 8001a6c <__smakebuf_r+0x70>
 8001a60:	89a3      	ldrh	r3, [r4, #12]
 8001a62:	f023 0303 	bic.w	r3, r3, #3
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	81a3      	strh	r3, [r4, #12]
 8001a6c:	89a3      	ldrh	r3, [r4, #12]
 8001a6e:	431d      	orrs	r5, r3
 8001a70:	81a5      	strh	r5, [r4, #12]
 8001a72:	e7cf      	b.n	8001a14 <__smakebuf_r+0x18>

08001a74 <_putc_r>:
 8001a74:	b570      	push	{r4, r5, r6, lr}
 8001a76:	460d      	mov	r5, r1
 8001a78:	4614      	mov	r4, r2
 8001a7a:	4606      	mov	r6, r0
 8001a7c:	b118      	cbz	r0, 8001a86 <_putc_r+0x12>
 8001a7e:	6a03      	ldr	r3, [r0, #32]
 8001a80:	b90b      	cbnz	r3, 8001a86 <_putc_r+0x12>
 8001a82:	f7ff f9bf 	bl	8000e04 <__sinit>
 8001a86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001a88:	07d8      	lsls	r0, r3, #31
 8001a8a:	d405      	bmi.n	8001a98 <_putc_r+0x24>
 8001a8c:	89a3      	ldrh	r3, [r4, #12]
 8001a8e:	0599      	lsls	r1, r3, #22
 8001a90:	d402      	bmi.n	8001a98 <_putc_r+0x24>
 8001a92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a94:	f7ff fbc5 	bl	8001222 <__retarget_lock_acquire_recursive>
 8001a98:	68a3      	ldr	r3, [r4, #8]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	60a3      	str	r3, [r4, #8]
 8001aa0:	da05      	bge.n	8001aae <_putc_r+0x3a>
 8001aa2:	69a2      	ldr	r2, [r4, #24]
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	db12      	blt.n	8001ace <_putc_r+0x5a>
 8001aa8:	b2eb      	uxtb	r3, r5
 8001aaa:	2b0a      	cmp	r3, #10
 8001aac:	d00f      	beq.n	8001ace <_putc_r+0x5a>
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	6022      	str	r2, [r4, #0]
 8001ab4:	701d      	strb	r5, [r3, #0]
 8001ab6:	b2ed      	uxtb	r5, r5
 8001ab8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001aba:	07da      	lsls	r2, r3, #31
 8001abc:	d405      	bmi.n	8001aca <_putc_r+0x56>
 8001abe:	89a3      	ldrh	r3, [r4, #12]
 8001ac0:	059b      	lsls	r3, r3, #22
 8001ac2:	d402      	bmi.n	8001aca <_putc_r+0x56>
 8001ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ac6:	f7ff fbad 	bl	8001224 <__retarget_lock_release_recursive>
 8001aca:	4628      	mov	r0, r5
 8001acc:	bd70      	pop	{r4, r5, r6, pc}
 8001ace:	4629      	mov	r1, r5
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	4630      	mov	r0, r6
 8001ad4:	f7ff fa87 	bl	8000fe6 <__swbuf_r>
 8001ad8:	4605      	mov	r5, r0
 8001ada:	e7ed      	b.n	8001ab8 <_putc_r+0x44>

08001adc <_fstat_r>:
 8001adc:	b538      	push	{r3, r4, r5, lr}
 8001ade:	4d07      	ldr	r5, [pc, #28]	@ (8001afc <_fstat_r+0x20>)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	602b      	str	r3, [r5, #0]
 8001aea:	f7fe feac 	bl	8000846 <_fstat>
 8001aee:	1c43      	adds	r3, r0, #1
 8001af0:	d102      	bne.n	8001af8 <_fstat_r+0x1c>
 8001af2:	682b      	ldr	r3, [r5, #0]
 8001af4:	b103      	cbz	r3, 8001af8 <_fstat_r+0x1c>
 8001af6:	6023      	str	r3, [r4, #0]
 8001af8:	bd38      	pop	{r3, r4, r5, pc}
 8001afa:	bf00      	nop
 8001afc:	200001cc 	.word	0x200001cc

08001b00 <_isatty_r>:
 8001b00:	b538      	push	{r3, r4, r5, lr}
 8001b02:	4d06      	ldr	r5, [pc, #24]	@ (8001b1c <_isatty_r+0x1c>)
 8001b04:	2300      	movs	r3, #0
 8001b06:	4604      	mov	r4, r0
 8001b08:	4608      	mov	r0, r1
 8001b0a:	602b      	str	r3, [r5, #0]
 8001b0c:	f7fe feab 	bl	8000866 <_isatty>
 8001b10:	1c43      	adds	r3, r0, #1
 8001b12:	d102      	bne.n	8001b1a <_isatty_r+0x1a>
 8001b14:	682b      	ldr	r3, [r5, #0]
 8001b16:	b103      	cbz	r3, 8001b1a <_isatty_r+0x1a>
 8001b18:	6023      	str	r3, [r4, #0]
 8001b1a:	bd38      	pop	{r3, r4, r5, pc}
 8001b1c:	200001cc 	.word	0x200001cc

08001b20 <_init>:
 8001b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b22:	bf00      	nop
 8001b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b26:	bc08      	pop	{r3}
 8001b28:	469e      	mov	lr, r3
 8001b2a:	4770      	bx	lr

08001b2c <_fini>:
 8001b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2e:	bf00      	nop
 8001b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b32:	bc08      	pop	{r3}
 8001b34:	469e      	mov	lr, r3
 8001b36:	4770      	bx	lr
