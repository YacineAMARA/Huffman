
Huffman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a08  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08001bd8  08001bd8  00002bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e48  08001e48  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001e48  08001e48  00002e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e50  08001e50  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e50  08001e50  00002e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e54  08001e54  00002e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001e58  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000060  08001eb8  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08001eb8  000031d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a6c  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cf7  00000000  00000000  00005afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  000067f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c4  00000000  00000000  00006a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af83  00000000  00000000  00006c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000041f8  00000000  00000000  00021bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091010  00000000  00000000  00025dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6ddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001014  00000000  00000000  000b6e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b7e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001bc0 	.word	0x08001bc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08001bc0 	.word	0x08001bc0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <creerFeuille>:
#include <stdlib.h>

uint32_t compte = 0;
/////////////////////////////////////////////////////////////////////////////////////////////////
	void creerFeuille(struct noeud * arbre[256], uint32_t tab[256])
	{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]


		for(uint32_t i=0;i<256;i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e04d      	b.n	800035c <creerFeuille+0xac>
		{
			if (tab[i] != 0)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	4413      	add	r3, r2
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d043      	beq.n	8000356 <creerFeuille+0xa6>
			{
				arbre[compte]= malloc(sizeof(struct noeud));
 80002ce:	4b27      	ldr	r3, [pc, #156]	@ (800036c <creerFeuille+0xbc>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	18d4      	adds	r4, r2, r3
 80002d8:	2018      	movs	r0, #24
 80002da:	f000 fca1 	bl	8000c20 <malloc>
 80002de:	4603      	mov	r3, r0
 80002e0:	6023      	str	r3, [r4, #0]
				arbre[compte]->c = i;
 80002e2:	4b22      	ldr	r3, [pc, #136]	@ (800036c <creerFeuille+0xbc>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	4413      	add	r3, r2
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	701a      	strb	r2, [r3, #0]
				arbre[compte]->occurence = tab[i];
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	683a      	ldr	r2, [r7, #0]
 80002fa:	441a      	add	r2, r3
 80002fc:	4b1b      	ldr	r3, [pc, #108]	@ (800036c <creerFeuille+0xbc>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	6879      	ldr	r1, [r7, #4]
 8000304:	440b      	add	r3, r1
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	605a      	str	r2, [r3, #4]
				arbre[compte]->code = 0;
 800030c:	4b17      	ldr	r3, [pc, #92]	@ (800036c <creerFeuille+0xbc>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
				arbre[compte]->tailleCode = 0;
 800031c:	4b13      	ldr	r3, [pc, #76]	@ (800036c <creerFeuille+0xbc>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	4413      	add	r3, r2
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
				arbre[compte]->droite = NULL;
 800032c:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <creerFeuille+0xbc>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	4413      	add	r3, r2
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
				arbre[compte]->gauche = NULL;
 800033c:	4b0b      	ldr	r3, [pc, #44]	@ (800036c <creerFeuille+0xbc>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]

				compte++;
 800034c:	4b07      	ldr	r3, [pc, #28]	@ (800036c <creerFeuille+0xbc>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	4a06      	ldr	r2, [pc, #24]	@ (800036c <creerFeuille+0xbc>)
 8000354:	6013      	str	r3, [r2, #0]
		for(uint32_t i=0;i<256;i++)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	3301      	adds	r3, #1
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	2bff      	cmp	r3, #255	@ 0xff
 8000360:	d9ae      	bls.n	80002c0 <creerFeuille+0x10>
			}
		}
	}
 8000362:	bf00      	nop
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bd90      	pop	{r4, r7, pc}
 800036c:	2000007c 	.word	0x2000007c

08000370 <afficherTabArbreHuffman>:
		}
	return compteur;
	}
/////////////////////////////////////////////////////////////////////////////////////////////////
	void afficherTabArbreHuffman(struct noeud* arbre[256] , uint32_t taille)
	{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]

		for(uint32_t i=0;i<taille;i++)
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	e02d      	b.n	80003dc <afficherTabArbreHuffman+0x6c>
		{
			printf("le caractere initial est %c \r\n",arbre[i]->c);
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	4413      	add	r3, r2
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4619      	mov	r1, r3
 800038e:	4818      	ldr	r0, [pc, #96]	@ (80003f0 <afficherTabArbreHuffman+0x80>)
 8000390:	f000 fdbe 	bl	8000f10 <iprintf>
			printf("le nombre d'occurences est %d \r\n",arbre[i]->occurence);
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	4413      	add	r3, r2
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	4619      	mov	r1, r3
 80003a2:	4814      	ldr	r0, [pc, #80]	@ (80003f4 <afficherTabArbreHuffman+0x84>)
 80003a4:	f000 fdb4 	bl	8000f10 <iprintf>
			printf("le code binaire dans l'arbre est %x \r\n",arbre[i]->code);
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	4413      	add	r3, r2
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4619      	mov	r1, r3
 80003b6:	4810      	ldr	r0, [pc, #64]	@ (80003f8 <afficherTabArbreHuffman+0x88>)
 80003b8:	f000 fdaa 	bl	8000f10 <iprintf>
			printf("le nombre de bits du code est %d \r\n",arbre[i]->tailleCode);
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	4413      	add	r3, r2
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	4619      	mov	r1, r3
 80003ca:	480c      	ldr	r0, [pc, #48]	@ (80003fc <afficherTabArbreHuffman+0x8c>)
 80003cc:	f000 fda0 	bl	8000f10 <iprintf>
			printf("\n");
 80003d0:	200a      	movs	r0, #10
 80003d2:	f000 fdaf 	bl	8000f34 <putchar>
		for(uint32_t i=0;i<taille;i++)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3301      	adds	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fa      	ldr	r2, [r7, #12]
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d3cd      	bcc.n	8000380 <afficherTabArbreHuffman+0x10>
		}
	}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	08001bd8 	.word	0x08001bd8
 80003f4:	08001bf8 	.word	0x08001bf8
 80003f8:	08001c1c 	.word	0x08001c1c
 80003fc:	08001c44 	.word	0x08001c44

08000400 <trieArbre>:
				}
	return compteur;
	}*/
//////////////////////////////////////////////////////////////////////////////////////////////////
	void trieArbre(struct noeud* arbre[256] , uint32_t taille)
	{
 8000400:	b480      	push	{r7}
 8000402:	b087      	sub	sp, #28
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
		struct noeud* temp;

		    for (uint32_t i = 0; i < taille - 1; i++)
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e036      	b.n	800047e <trieArbre+0x7e>
		    {
		        for (uint32_t j = 0; j < taille - i - 1; j++)
 8000410:	2300      	movs	r3, #0
 8000412:	613b      	str	r3, [r7, #16]
 8000414:	e029      	b.n	800046a <trieArbre+0x6a>
		        {
		            if (arbre[j]->occurence > arbre[j + 1]->occurence)
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	685a      	ldr	r2, [r3, #4]
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	3301      	adds	r3, #1
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	6879      	ldr	r1, [r7, #4]
 800042a:	440b      	add	r3, r1
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	429a      	cmp	r2, r3
 8000432:	d917      	bls.n	8000464 <trieArbre+0x64>
		            {
		                // Échange des éléments
		                temp = arbre[j];
 8000434:	693b      	ldr	r3, [r7, #16]
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	4413      	add	r3, r2
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	60fb      	str	r3, [r7, #12]
		                arbre[j] = arbre[j + 1];
 8000440:	693b      	ldr	r3, [r7, #16]
 8000442:	3301      	adds	r3, #1
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	441a      	add	r2, r3
 800044a:	693b      	ldr	r3, [r7, #16]
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	440b      	add	r3, r1
 8000452:	6812      	ldr	r2, [r2, #0]
 8000454:	601a      	str	r2, [r3, #0]
		                arbre[j + 1] = temp;
 8000456:	693b      	ldr	r3, [r7, #16]
 8000458:	3301      	adds	r3, #1
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	4413      	add	r3, r2
 8000460:	68fa      	ldr	r2, [r7, #12]
 8000462:	601a      	str	r2, [r3, #0]
		        for (uint32_t j = 0; j < taille - i - 1; j++)
 8000464:	693b      	ldr	r3, [r7, #16]
 8000466:	3301      	adds	r3, #1
 8000468:	613b      	str	r3, [r7, #16]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	3b01      	subs	r3, #1
 8000472:	693a      	ldr	r2, [r7, #16]
 8000474:	429a      	cmp	r2, r3
 8000476:	d3ce      	bcc.n	8000416 <trieArbre+0x16>
		    for (uint32_t i = 0; i < taille - 1; i++)
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	3301      	adds	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	3b01      	subs	r3, #1
 8000482:	697a      	ldr	r2, [r7, #20]
 8000484:	429a      	cmp	r2, r3
 8000486:	d3c3      	bcc.n	8000410 <trieArbre+0x10>
		            }
		        }
		    }
	}
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	371c      	adds	r7, #28
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <creeRacine>:
//////////////////////////////////////////////////////////////////////////////////////////////////
	struct noeud* creeRacine(struct noeud * arbre[256], uint32_t taille)
	{
 8000496:	b480      	push	{r7}
 8000498:	b085      	sub	sp, #20
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
 800049e:	6039      	str	r1, [r7, #0]
		struct noeud* racine;

		for (uint32_t i=1 ; i < taille ; i++)
 80004a0:	2301      	movs	r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	e034      	b.n	8000510 <creeRacine+0x7a>
		{
			racine = arbre[i] ;
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	4413      	add	r3, r2
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	60fb      	str	r3, [r7, #12]

			racine->c= '!';
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	2221      	movs	r2, #33	@ 0x21
 80004b6:	701a      	strb	r2, [r3, #0]
			racine->occurence = arbre[i-1]->occurence + arbre[i]->occurence ;
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80004be:	3b01      	subs	r3, #1
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	685a      	ldr	r2, [r3, #4]
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	6879      	ldr	r1, [r7, #4]
 80004d0:	440b      	add	r3, r1
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	441a      	add	r2, r3
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	605a      	str	r2, [r3, #4]
			racine->code = 0;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
			racine->tailleCode =0;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
			racine->droite = arbre[i] ;
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4413      	add	r3, r2
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	615a      	str	r2, [r3, #20]
			racine->gauche = arbre[i-1] ;
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80004fc:	3b01      	subs	r3, #1
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4413      	add	r3, r2
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	611a      	str	r2, [r3, #16]
		for (uint32_t i=1 ; i < taille ; i++)
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	3301      	adds	r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68ba      	ldr	r2, [r7, #8]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	429a      	cmp	r2, r3
 8000516:	d3c6      	bcc.n	80004a6 <creeRacine+0x10>
		}
		return racine;
 8000518:	68fb      	ldr	r3, [r7, #12]
	}
 800051a:	4618      	mov	r0, r3
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <afficherRacine>:

///////////////////////////////////////////////////////////////////////////////////////////////////////
	void afficherRacine(struct noeud* laracine)
	{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
		printf("affichege de la racine \r\n");
 8000530:	4819      	ldr	r0, [pc, #100]	@ (8000598 <afficherRacine+0x70>)
 8000532:	f000 fd5d 	bl	8000ff0 <puts>
		printf("\n");
 8000536:	200a      	movs	r0, #10
 8000538:	f000 fcfc 	bl	8000f34 <putchar>

		printf("le caractere initial est %c \r\n",laracine->c);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	4816      	ldr	r0, [pc, #88]	@ (800059c <afficherRacine+0x74>)
 8000544:	f000 fce4 	bl	8000f10 <iprintf>
		printf("le nombre d'occurences est %d \r\n",laracine->occurence);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	4619      	mov	r1, r3
 800054e:	4814      	ldr	r0, [pc, #80]	@ (80005a0 <afficherRacine+0x78>)
 8000550:	f000 fcde 	bl	8000f10 <iprintf>
		printf("le code binaire dans l'arbre est %x \r\n",laracine->code);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	4619      	mov	r1, r3
 800055a:	4812      	ldr	r0, [pc, #72]	@ (80005a4 <afficherRacine+0x7c>)
 800055c:	f000 fcd8 	bl	8000f10 <iprintf>
		printf("le nombre de bits du code est %d \r\n",laracine->tailleCode);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	4619      	mov	r1, r3
 8000566:	4810      	ldr	r0, [pc, #64]	@ (80005a8 <afficherRacine+0x80>)
 8000568:	f000 fcd2 	bl	8000f10 <iprintf>
		printf("le caractere droit est %c \r\n",laracine->droite->c);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4619      	mov	r1, r3
 8000574:	480d      	ldr	r0, [pc, #52]	@ (80005ac <afficherRacine+0x84>)
 8000576:	f000 fccb 	bl	8000f10 <iprintf>
		printf("le caractere gauche est %c \r\n",laracine->gauche->c);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	691b      	ldr	r3, [r3, #16]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	480b      	ldr	r0, [pc, #44]	@ (80005b0 <afficherRacine+0x88>)
 8000584:	f000 fcc4 	bl	8000f10 <iprintf>

		printf("\n");
 8000588:	200a      	movs	r0, #10
 800058a:	f000 fcd3 	bl	8000f34 <putchar>
	}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	08001c68 	.word	0x08001c68
 800059c:	08001bd8 	.word	0x08001bd8
 80005a0:	08001bf8 	.word	0x08001bf8
 80005a4:	08001c1c 	.word	0x08001c1c
 80005a8:	08001c44 	.word	0x08001c44
 80005ac:	08001c84 	.word	0x08001c84
 80005b0:	08001ca4 	.word	0x08001ca4

080005b4 <parcourirArbre>:
///////////////////////////////////////////////////////////////////////////////////////////////////////

	void parcourirArbre(struct noeud* ptrNoeud)
	{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
		uint32_t test=0;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]

		if (ptrNoeud->droite == NULL && ptrNoeud->gauche == NULL)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d113      	bne.n	80005f0 <parcourirArbre+0x3c>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d10f      	bne.n	80005f0 <parcourirArbre+0x3c>
		{
			printf("Je suis une feuille\r\n");
 80005d0:	482c      	ldr	r0, [pc, #176]	@ (8000684 <parcourirArbre+0xd0>)
 80005d2:	f000 fd0d 	bl	8000ff0 <puts>
			printf("mon caractere initial est %c \r\n",ptrNoeud->c);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	482a      	ldr	r0, [pc, #168]	@ (8000688 <parcourirArbre+0xd4>)
 80005de:	f000 fc97 	bl	8000f10 <iprintf>
			printf("mon nombre d'occurences est %d \r\n",ptrNoeud->occurence);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4828      	ldr	r0, [pc, #160]	@ (800068c <parcourirArbre+0xd8>)
 80005ea:	f000 fc91 	bl	8000f10 <iprintf>
 80005ee:	e043      	b.n	8000678 <parcourirArbre+0xc4>
		}

		else
		{
			printf("Je suis un nœud\r\n");
 80005f0:	4827      	ldr	r0, [pc, #156]	@ (8000690 <parcourirArbre+0xdc>)
 80005f2:	f000 fcfd 	bl	8000ff0 <puts>
			//afficher le noeud
			printf("mon caractere initial est %c \r\n",ptrNoeud->c);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4619      	mov	r1, r3
 80005fc:	4822      	ldr	r0, [pc, #136]	@ (8000688 <parcourirArbre+0xd4>)
 80005fe:	f000 fc87 	bl	8000f10 <iprintf>
			printf("mon nombre d'occurences est %d \r\n",ptrNoeud->occurence);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	4619      	mov	r1, r3
 8000608:	4820      	ldr	r0, [pc, #128]	@ (800068c <parcourirArbre+0xd8>)
 800060a:	f000 fc81 	bl	8000f10 <iprintf>
			printf("\r\n");
 800060e:	4821      	ldr	r0, [pc, #132]	@ (8000694 <parcourirArbre+0xe0>)
 8000610:	f000 fcee 	bl	8000ff0 <puts>
			// afficher gauche et droit du noeud
			printf("mon caractere initial droit est %c \r\n",ptrNoeud->droite->c);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4619      	mov	r1, r3
 800061c:	481e      	ldr	r0, [pc, #120]	@ (8000698 <parcourirArbre+0xe4>)
 800061e:	f000 fc77 	bl	8000f10 <iprintf>
			printf("son nombre d'occurences est %d \r\n",ptrNoeud->droite->occurence);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	4619      	mov	r1, r3
 800062a:	481c      	ldr	r0, [pc, #112]	@ (800069c <parcourirArbre+0xe8>)
 800062c:	f000 fc70 	bl	8000f10 <iprintf>
			printf("\r\n");
 8000630:	4818      	ldr	r0, [pc, #96]	@ (8000694 <parcourirArbre+0xe0>)
 8000632:	f000 fcdd 	bl	8000ff0 <puts>
			printf("mon caractere initial gauche est %c \r\n",ptrNoeud->gauche->c);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	4818      	ldr	r0, [pc, #96]	@ (80006a0 <parcourirArbre+0xec>)
 8000640:	f000 fc66 	bl	8000f10 <iprintf>
			printf("son nombre d'occurences est %d \r\n",ptrNoeud->gauche->occurence);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	691b      	ldr	r3, [r3, #16]
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	4619      	mov	r1, r3
 800064c:	4813      	ldr	r0, [pc, #76]	@ (800069c <parcourirArbre+0xe8>)
 800064e:	f000 fc5f 	bl	8000f10 <iprintf>


			if(test % 2 == 0)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d108      	bne.n	800066e <parcourirArbre+0xba>
			{
				parcourirArbre (ptrNoeud->gauche); // On va a gauche
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ffa7 	bl	80005b4 <parcourirArbre>
				test++;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3301      	adds	r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	e004      	b.n	8000678 <parcourirArbre+0xc4>
			}
			else
			{
				parcourirArbre (ptrNoeud->droite); //On va a droite
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff9e 	bl	80005b4 <parcourirArbre>
			}
		}
		test=0;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
	}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	08001cc4 	.word	0x08001cc4
 8000688:	08001cdc 	.word	0x08001cdc
 800068c:	08001cfc 	.word	0x08001cfc
 8000690:	08001d20 	.word	0x08001d20
 8000694:	08001d34 	.word	0x08001d34
 8000698:	08001d38 	.word	0x08001d38
 800069c:	08001d60 	.word	0x08001d60
 80006a0:	08001d84 	.word	0x08001d84

080006a4 <GPIO_Init>:
#include <stdint.h>
#include <stm32f446xx.h>
#include "main.h"
#include "gpio.h"

void GPIO_Init(void){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <GPIO_Init+0x30>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ac:	4a09      	ldr	r2, [pc, #36]	@ (80006d4 <GPIO_Init+0x30>)
 80006ae:	f043 0305 	orr.w	r3, r3, #5
 80006b2:	6313      	str	r3, [r2, #48]	@ 0x30

	/* GPIO Init */
	GPIOA->MODER |= OUTPUT_MODE <<10;		// PA5 Output LED
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <GPIO_Init+0x34>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a07      	ldr	r2, [pc, #28]	@ (80006d8 <GPIO_Init+0x34>)
 80006ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006be:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= INPUT_MODE	<< 26;		// PC13 Input Push-Button
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <GPIO_Init+0x38>)
 80006c2:	4a06      	ldr	r2, [pc, #24]	@ (80006dc <GPIO_Init+0x38>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020000 	.word	0x40020000
 80006dc:	40020800 	.word	0x40020800

080006e0 <SysTick_Handler>:
#include "interrupt.h"

extern uint32_t ticks;

// Interrupt Handler for SysTick Interrupt
void SysTick_Handler(void){
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	ticks++;
 80006e4:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <SysTick_Handler+0x18>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	4a03      	ldr	r2, [pc, #12]	@ (80006f8 <SysTick_Handler+0x18>)
 80006ec:	6013      	str	r3, [r2, #0]
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	20000084 	.word	0x20000084

080006fc <main>:
#include "occurence.h"
#include "arbre.h"


int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	f5ad 6d01 	sub.w	sp, sp, #2064	@ 0x810
 8000702:	af00      	add	r7, sp, #0
	FPU_Init();
 8000704:	f000 fa50 	bl	8000ba8 <FPU_Init>
	GPIO_Init();
 8000708:	f7ff ffcc 	bl	80006a4 <GPIO_Init>
	USART2_Init();
 800070c:	f000 f9ca 	bl	8000aa4 <USART2_Init>
	SYSTICK_Init();
 8000710:	f000 f994 	bl	8000a3c <SYSTICK_Init>

	uint8_t texte[]="aaaabbbccd";
 8000714:	4a2c      	ldr	r2, [pc, #176]	@ (80007c8 <main+0xcc>)
 8000716:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800071a:	ca07      	ldmia	r2, {r0, r1, r2}
 800071c:	c303      	stmia	r3!, {r0, r1}
 800071e:	801a      	strh	r2, [r3, #0]
 8000720:	3302      	adds	r3, #2
 8000722:	0c12      	lsrs	r2, r2, #16
 8000724:	701a      	strb	r2, [r3, #0]
	uint32_t tabCaractere [256]={0};
 8000726:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800072a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800072e:	4618      	mov	r0, r3
 8000730:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000734:	461a      	mov	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f000 fd3a 	bl	80011b0 <memset>
	extern uint32_t compte ; //pour la taille de l'arbre
	struct noeud* racine;



	occurence(texte , tabCaractere);
 800073c:	f507 6280 	add.w	r2, r7, #1024	@ 0x400
 8000740:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f848 	bl	80007dc <occurence>
	//nbrCaractereDifferent = comptage_de_caracteres_utiliser(tabCaractere);
	creerFeuille(arbreHuffman,tabCaractere);
 800074c:	f507 6280 	add.w	r2, r7, #1024	@ 0x400
 8000750:	463b      	mov	r3, r7
 8000752:	4611      	mov	r1, r2
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fdab 	bl	80002b0 <creerFeuille>
	//printf("arbre non trier\r\n");
	//afficherTabArbreHuffman(arbreHuffman , compte);
//////////////////////////////////////////////////////////////////////////
	trieArbre(arbreHuffman, compte);
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <main+0xd0>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	463b      	mov	r3, r7
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fe4c 	bl	8000400 <trieArbre>
	printf("arbre trier\r\n");
 8000768:	4819      	ldr	r0, [pc, #100]	@ (80007d0 <main+0xd4>)
 800076a:	f000 fc41 	bl	8000ff0 <puts>
	afficherTabArbreHuffman(arbreHuffman , compte);
 800076e:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <main+0xd0>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	463b      	mov	r3, r7
 8000774:	4611      	mov	r1, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fdfa 	bl	8000370 <afficherTabArbreHuffman>
/////////////////////////////////////////////////////////////////////////////////////


	racine = creeRacine(arbreHuffman , compte);
 800077c:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <main+0xd0>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	463b      	mov	r3, r7
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fe86 	bl	8000496 <creeRacine>
 800078a:	f8c7 080c 	str.w	r0, [r7, #2060]	@ 0x80c
	printf("arbre apres creation de la racine \r\n");
 800078e:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <main+0xd8>)
 8000790:	f000 fc2e 	bl	8000ff0 <puts>
	afficherTabArbreHuffman(arbreHuffman , compte);
 8000794:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <main+0xd0>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	463b      	mov	r3, r7
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fde7 	bl	8000370 <afficherTabArbreHuffman>

	afficherRacine(racine);
 80007a2:	f8d7 080c 	ldr.w	r0, [r7, #2060]	@ 0x80c
 80007a6:	f7ff febf 	bl	8000528 <afficherRacine>

	parcourirArbre(racine);
 80007aa:	f8d7 080c 	ldr.w	r0, [r7, #2060]	@ 0x80c
 80007ae:	f7ff ff01 	bl	80005b4 <parcourirArbre>



	while(1){
		SYSTICK_Delay(100);
 80007b2:	2064      	movs	r0, #100	@ 0x64
 80007b4:	f000 f954 	bl	8000a60 <SYSTICK_Delay>
		GPIOA->ODR ^= 1<<5;
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <main+0xdc>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	4a06      	ldr	r2, [pc, #24]	@ (80007d8 <main+0xdc>)
 80007be:	f083 0320 	eor.w	r3, r3, #32
 80007c2:	6153      	str	r3, [r2, #20]
		SYSTICK_Delay(100);
 80007c4:	bf00      	nop
 80007c6:	e7f4      	b.n	80007b2 <main+0xb6>
 80007c8:	08001de0 	.word	0x08001de0
 80007cc:	2000007c 	.word	0x2000007c
 80007d0:	08001dac 	.word	0x08001dac
 80007d4:	08001dbc 	.word	0x08001dbc
 80007d8:	40020000 	.word	0x40020000

080007dc <occurence>:
#include <stdint.h>
#include <stdio.h>
#include "occurence.h"

	void occurence(uint8_t* chaine , uint32_t tab[256])
	{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
		uint32_t i=0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
		uint32_t c;
		while(*(chaine+i) !='\0')
 80007ea:	e00e      	b.n	800080a <occurence+0x2e>
		{
			c=chaine[i];
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	60fb      	str	r3, [r7, #12]
			tab[c]++;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	3201      	adds	r2, #1
 8000802:	601a      	str	r2, [r3, #0]
			i++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
		while(*(chaine+i) !='\0')
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1ea      	bne.n	80007ec <occurence+0x10>
		}

		for(uint32_t j=0;j<256;j++)
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	e013      	b.n	8000844 <occurence+0x68>
		{
			if (tab[j] != 0)
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	4413      	add	r3, r2
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d009      	beq.n	800083e <occurence+0x62>
			{
			printf("le nombre d'occurence de %c est %ld \r\n",j,tab[j]);
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	4413      	add	r3, r2
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	6939      	ldr	r1, [r7, #16]
 8000838:	4807      	ldr	r0, [pc, #28]	@ (8000858 <occurence+0x7c>)
 800083a:	f000 fb69 	bl	8000f10 <iprintf>
		for(uint32_t j=0;j<256;j++)
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	3301      	adds	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	2bff      	cmp	r3, #255	@ 0xff
 8000848:	d9e8      	bls.n	800081c <occurence+0x40>
			}
		}
		printf("\n");
 800084a:	200a      	movs	r0, #10
 800084c:	f000 fb72 	bl	8000f34 <putchar>
	}
 8000850:	bf00      	nop
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	08001dec 	.word	0x08001dec

0800085c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	e00a      	b.n	8000884 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800086e:	f000 f993 	bl	8000b98 <__io_getchar>
 8000872:	4601      	mov	r1, r0
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	60ba      	str	r2, [r7, #8]
 800087a:	b2ca      	uxtb	r2, r1
 800087c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	3301      	adds	r3, #1
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	429a      	cmp	r2, r3
 800088a:	dbf0      	blt.n	800086e <_read+0x12>
	}

return len;
 800088c:	687b      	ldr	r3, [r7, #4]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	e009      	b.n	80008bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	60ba      	str	r2, [r7, #8]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f963 	bl	8000b7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3301      	adds	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbf1      	blt.n	80008a8 <_write+0x12>
	}
	return len;
 80008c4:	687b      	ldr	r3, [r7, #4]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <_close>:

int _close(int file)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
	return -1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008f6:	605a      	str	r2, [r3, #4]
	return 0;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_isatty>:

int _isatty(int file)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
	return 1;
 800090e:	2301      	movs	r3, #1
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	return 0;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000940:	4a14      	ldr	r2, [pc, #80]	@ (8000994 <_sbrk+0x5c>)
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <_sbrk+0x60>)
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800094c:	4b13      	ldr	r3, [pc, #76]	@ (800099c <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000954:	4b11      	ldr	r3, [pc, #68]	@ (800099c <_sbrk+0x64>)
 8000956:	4a12      	ldr	r2, [pc, #72]	@ (80009a0 <_sbrk+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	429a      	cmp	r2, r3
 8000966:	d207      	bcs.n	8000978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000968:	f000 fc80 	bl	800126c <__errno>
 800096c:	4603      	mov	r3, r0
 800096e:	220c      	movs	r2, #12
 8000970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	e009      	b.n	800098c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097e:	4b07      	ldr	r3, [pc, #28]	@ (800099c <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	4a05      	ldr	r2, [pc, #20]	@ (800099c <_sbrk+0x64>)
 8000988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20020000 	.word	0x20020000
 8000998:	00000400 	.word	0x00000400
 800099c:	20000080 	.word	0x20000080
 80009a0:	200001d8 	.word	0x200001d8

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	490c      	ldr	r1, [pc, #48]	@ (80009f0 <__NVIC_SetPriority+0x4c>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	@ (80009f4 <__NVIC_SetPriority+0x50>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	3b04      	subs	r3, #4
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a08:	d301      	bcc.n	8000a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00f      	b.n	8000a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <SysTick_Config+0x40>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a16:	210f      	movs	r1, #15
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f7ff ffc2 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <SysTick_Config+0x40>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a26:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <SysTick_Config+0x40>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <SYSTICK_Init>:

//////////////////////////////////////////////
////////////// SYSTICK TIMER /////////////////
//////////////////////////////////////////////

void SYSTICK_Init(void){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <SYSTICK_Init+0x1c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SYSTICK_Init+0x20>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	099b      	lsrs	r3, r3, #6
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ffd3 	bl	80009f8 <SysTick_Config>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	10624dd3 	.word	0x10624dd3

08000a60 <SYSTICK_Delay>:
/**
 * Millisecond delays with Systick Timer, blocking function
 * @param delay : milliseconds to wait
 */
void SYSTICK_Delay(uint32_t Delay)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = SYSTICK_Get();
 8000a68:	f000 f810 	bl	8000a8c <SYSTICK_Get>
 8000a6c:	60f8      	str	r0, [r7, #12]

	while((SYSTICK_Get() - tickstart) < Delay);
 8000a6e:	bf00      	nop
 8000a70:	f000 f80c 	bl	8000a8c <SYSTICK_Get>
 8000a74:	4602      	mov	r2, r0
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d8f7      	bhi.n	8000a70 <SYSTICK_Delay+0x10>
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <SYSTICK_Get>:

uint32_t SYSTICK_Get(void){
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
	return ticks;
 8000a90:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <SYSTICK_Get+0x14>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000084 	.word	0x20000084

08000aa4 <USART2_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "usart.h"


void USART2_Init(void){
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <USART2_Init+0x74>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aac:	4a1a      	ldr	r2, [pc, #104]	@ (8000b18 <USART2_Init+0x74>)
 8000aae:	f043 0305 	orr.w	r3, r3, #5
 8000ab2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <USART2_Init+0x74>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab8:	4a17      	ldr	r2, [pc, #92]	@ (8000b18 <USART2_Init+0x74>)
 8000aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000abe:	6413      	str	r3, [r2, #64]	@ 0x40
	USART2->CR1 |= USART_CR1_UE;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <USART2_Init+0x78>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	4a15      	ldr	r2, [pc, #84]	@ (8000b1c <USART2_Init+0x78>)
 8000ac6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000aca:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <USART2_Init+0x7c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	@ (8000b20 <USART2_Init+0x7c>)
 8000ad2:	f043 0320 	orr.w	r3, r3, #32
 8000ad6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <USART2_Init+0x7c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a10      	ldr	r2, [pc, #64]	@ (8000b20 <USART2_Init+0x7c>)
 8000ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <USART2_Init+0x7c>)
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b20 <USART2_Init+0x7c>)
 8000aea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000aee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 8000af0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <USART2_Init+0x7c>)
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <USART2_Init+0x7c>)
 8000af6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000afa:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <USART2_Init+0x78>)
 8000afe:	228b      	movs	r2, #139	@ 0x8b
 8000b00:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <USART2_Init+0x78>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	4a05      	ldr	r2, [pc, #20]	@ (8000b1c <USART2_Init+0x78>)
 8000b08:	f043 030c 	orr.w	r3, r3, #12
 8000b0c:	60d3      	str	r3, [r2, #12]
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	40020000 	.word	0x40020000

08000b24 <USART2_TransmitChar>:


void USART2_TransmitChar(uint8_t data){
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	USART2->DR = data;
 8000b2e:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <USART2_TransmitChar+0x2c>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	6053      	str	r3, [r2, #4]
	while( (USART2->SR & USART_SR_TXE)==0 );
 8000b34:	bf00      	nop
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <USART2_TransmitChar+0x2c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0f9      	beq.n	8000b36 <USART2_TransmitChar+0x12>
}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40004400 	.word	0x40004400

08000b54 <USART2_ReceiveChar>:


uint8_t USART2_ReceiveChar(void){
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	while( (USART2->SR & USART_SR_RXNE)==0 );
 8000b58:	bf00      	nop
 8000b5a:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <USART2_ReceiveChar+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0f9      	beq.n	8000b5a <USART2_ReceiveChar+0x6>
	return USART2->DR;
 8000b66:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <USART2_ReceiveChar+0x24>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	b2db      	uxtb	r3, r3

}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40004400 	.word	0x40004400

08000b7c <__io_putchar>:
#include "util.h"
#include "usart.h"


/* Send on USART2 PA2*/
int __io_putchar(int ch){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	USART2_TransmitChar(ch);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ffcb 	bl	8000b24 <USART2_TransmitChar>
	return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <__io_getchar>:

/* Receive on USART2 PA3 */
int __io_getchar(void){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	return USART2_ReceiveChar();
 8000b9c:	f7ff ffda 	bl	8000b54 <USART2_ReceiveChar>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <FPU_Init>:
/* For scanf function */
void SCANF_Init(void){
	setvbuf(stdin, NULL, _IONBF, 0);
}

void FPU_Init(void){
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <FPU_Init+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <FPU_Init+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bcc:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000bfa:	f000 fb3d 	bl	8001278 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000bfe:	f7ff fd7d 	bl	80006fc <main>

08000c02 <LoopForever>:

LoopForever:
  b LoopForever
 8000c02:	e7fe      	b.n	8000c02 <LoopForever>
  ldr   r0, =_estack
 8000c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c10:	08001e58 	.word	0x08001e58
  ldr r2, =_sbss
 8000c14:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c18:	200001d4 	.word	0x200001d4

08000c1c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <malloc>:
 8000c20:	4b02      	ldr	r3, [pc, #8]	@ (8000c2c <malloc+0xc>)
 8000c22:	4601      	mov	r1, r0
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	f000 b825 	b.w	8000c74 <_malloc_r>
 8000c2a:	bf00      	nop
 8000c2c:	20000010 	.word	0x20000010

08000c30 <sbrk_aligned>:
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	4e0f      	ldr	r6, [pc, #60]	@ (8000c70 <sbrk_aligned+0x40>)
 8000c34:	460c      	mov	r4, r1
 8000c36:	6831      	ldr	r1, [r6, #0]
 8000c38:	4605      	mov	r5, r0
 8000c3a:	b911      	cbnz	r1, 8000c42 <sbrk_aligned+0x12>
 8000c3c:	f000 faf4 	bl	8001228 <_sbrk_r>
 8000c40:	6030      	str	r0, [r6, #0]
 8000c42:	4621      	mov	r1, r4
 8000c44:	4628      	mov	r0, r5
 8000c46:	f000 faef 	bl	8001228 <_sbrk_r>
 8000c4a:	1c43      	adds	r3, r0, #1
 8000c4c:	d103      	bne.n	8000c56 <sbrk_aligned+0x26>
 8000c4e:	f04f 34ff 	mov.w	r4, #4294967295
 8000c52:	4620      	mov	r0, r4
 8000c54:	bd70      	pop	{r4, r5, r6, pc}
 8000c56:	1cc4      	adds	r4, r0, #3
 8000c58:	f024 0403 	bic.w	r4, r4, #3
 8000c5c:	42a0      	cmp	r0, r4
 8000c5e:	d0f8      	beq.n	8000c52 <sbrk_aligned+0x22>
 8000c60:	1a21      	subs	r1, r4, r0
 8000c62:	4628      	mov	r0, r5
 8000c64:	f000 fae0 	bl	8001228 <_sbrk_r>
 8000c68:	3001      	adds	r0, #1
 8000c6a:	d1f2      	bne.n	8000c52 <sbrk_aligned+0x22>
 8000c6c:	e7ef      	b.n	8000c4e <sbrk_aligned+0x1e>
 8000c6e:	bf00      	nop
 8000c70:	20000088 	.word	0x20000088

08000c74 <_malloc_r>:
 8000c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c78:	1ccd      	adds	r5, r1, #3
 8000c7a:	f025 0503 	bic.w	r5, r5, #3
 8000c7e:	3508      	adds	r5, #8
 8000c80:	2d0c      	cmp	r5, #12
 8000c82:	bf38      	it	cc
 8000c84:	250c      	movcc	r5, #12
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	4606      	mov	r6, r0
 8000c8a:	db01      	blt.n	8000c90 <_malloc_r+0x1c>
 8000c8c:	42a9      	cmp	r1, r5
 8000c8e:	d904      	bls.n	8000c9a <_malloc_r+0x26>
 8000c90:	230c      	movs	r3, #12
 8000c92:	6033      	str	r3, [r6, #0]
 8000c94:	2000      	movs	r0, #0
 8000c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d70 <_malloc_r+0xfc>
 8000c9e:	f000 f869 	bl	8000d74 <__malloc_lock>
 8000ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ca6:	461c      	mov	r4, r3
 8000ca8:	bb44      	cbnz	r4, 8000cfc <_malloc_r+0x88>
 8000caa:	4629      	mov	r1, r5
 8000cac:	4630      	mov	r0, r6
 8000cae:	f7ff ffbf 	bl	8000c30 <sbrk_aligned>
 8000cb2:	1c43      	adds	r3, r0, #1
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	d158      	bne.n	8000d6a <_malloc_r+0xf6>
 8000cb8:	f8d8 4000 	ldr.w	r4, [r8]
 8000cbc:	4627      	mov	r7, r4
 8000cbe:	2f00      	cmp	r7, #0
 8000cc0:	d143      	bne.n	8000d4a <_malloc_r+0xd6>
 8000cc2:	2c00      	cmp	r4, #0
 8000cc4:	d04b      	beq.n	8000d5e <_malloc_r+0xea>
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	4639      	mov	r1, r7
 8000cca:	4630      	mov	r0, r6
 8000ccc:	eb04 0903 	add.w	r9, r4, r3
 8000cd0:	f000 faaa 	bl	8001228 <_sbrk_r>
 8000cd4:	4581      	cmp	r9, r0
 8000cd6:	d142      	bne.n	8000d5e <_malloc_r+0xea>
 8000cd8:	6821      	ldr	r1, [r4, #0]
 8000cda:	1a6d      	subs	r5, r5, r1
 8000cdc:	4629      	mov	r1, r5
 8000cde:	4630      	mov	r0, r6
 8000ce0:	f7ff ffa6 	bl	8000c30 <sbrk_aligned>
 8000ce4:	3001      	adds	r0, #1
 8000ce6:	d03a      	beq.n	8000d5e <_malloc_r+0xea>
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	442b      	add	r3, r5
 8000cec:	6023      	str	r3, [r4, #0]
 8000cee:	f8d8 3000 	ldr.w	r3, [r8]
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	bb62      	cbnz	r2, 8000d50 <_malloc_r+0xdc>
 8000cf6:	f8c8 7000 	str.w	r7, [r8]
 8000cfa:	e00f      	b.n	8000d1c <_malloc_r+0xa8>
 8000cfc:	6822      	ldr	r2, [r4, #0]
 8000cfe:	1b52      	subs	r2, r2, r5
 8000d00:	d420      	bmi.n	8000d44 <_malloc_r+0xd0>
 8000d02:	2a0b      	cmp	r2, #11
 8000d04:	d917      	bls.n	8000d36 <_malloc_r+0xc2>
 8000d06:	1961      	adds	r1, r4, r5
 8000d08:	42a3      	cmp	r3, r4
 8000d0a:	6025      	str	r5, [r4, #0]
 8000d0c:	bf18      	it	ne
 8000d0e:	6059      	strne	r1, [r3, #4]
 8000d10:	6863      	ldr	r3, [r4, #4]
 8000d12:	bf08      	it	eq
 8000d14:	f8c8 1000 	streq.w	r1, [r8]
 8000d18:	5162      	str	r2, [r4, r5]
 8000d1a:	604b      	str	r3, [r1, #4]
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	f000 f82f 	bl	8000d80 <__malloc_unlock>
 8000d22:	f104 000b 	add.w	r0, r4, #11
 8000d26:	1d23      	adds	r3, r4, #4
 8000d28:	f020 0007 	bic.w	r0, r0, #7
 8000d2c:	1ac2      	subs	r2, r0, r3
 8000d2e:	bf1c      	itt	ne
 8000d30:	1a1b      	subne	r3, r3, r0
 8000d32:	50a3      	strne	r3, [r4, r2]
 8000d34:	e7af      	b.n	8000c96 <_malloc_r+0x22>
 8000d36:	6862      	ldr	r2, [r4, #4]
 8000d38:	42a3      	cmp	r3, r4
 8000d3a:	bf0c      	ite	eq
 8000d3c:	f8c8 2000 	streq.w	r2, [r8]
 8000d40:	605a      	strne	r2, [r3, #4]
 8000d42:	e7eb      	b.n	8000d1c <_malloc_r+0xa8>
 8000d44:	4623      	mov	r3, r4
 8000d46:	6864      	ldr	r4, [r4, #4]
 8000d48:	e7ae      	b.n	8000ca8 <_malloc_r+0x34>
 8000d4a:	463c      	mov	r4, r7
 8000d4c:	687f      	ldr	r7, [r7, #4]
 8000d4e:	e7b6      	b.n	8000cbe <_malloc_r+0x4a>
 8000d50:	461a      	mov	r2, r3
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	42a3      	cmp	r3, r4
 8000d56:	d1fb      	bne.n	8000d50 <_malloc_r+0xdc>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6053      	str	r3, [r2, #4]
 8000d5c:	e7de      	b.n	8000d1c <_malloc_r+0xa8>
 8000d5e:	230c      	movs	r3, #12
 8000d60:	6033      	str	r3, [r6, #0]
 8000d62:	4630      	mov	r0, r6
 8000d64:	f000 f80c 	bl	8000d80 <__malloc_unlock>
 8000d68:	e794      	b.n	8000c94 <_malloc_r+0x20>
 8000d6a:	6005      	str	r5, [r0, #0]
 8000d6c:	e7d6      	b.n	8000d1c <_malloc_r+0xa8>
 8000d6e:	bf00      	nop
 8000d70:	2000008c 	.word	0x2000008c

08000d74 <__malloc_lock>:
 8000d74:	4801      	ldr	r0, [pc, #4]	@ (8000d7c <__malloc_lock+0x8>)
 8000d76:	f000 baa4 	b.w	80012c2 <__retarget_lock_acquire_recursive>
 8000d7a:	bf00      	nop
 8000d7c:	200001d0 	.word	0x200001d0

08000d80 <__malloc_unlock>:
 8000d80:	4801      	ldr	r0, [pc, #4]	@ (8000d88 <__malloc_unlock+0x8>)
 8000d82:	f000 ba9f 	b.w	80012c4 <__retarget_lock_release_recursive>
 8000d86:	bf00      	nop
 8000d88:	200001d0 	.word	0x200001d0

08000d8c <std>:
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	b510      	push	{r4, lr}
 8000d90:	4604      	mov	r4, r0
 8000d92:	e9c0 3300 	strd	r3, r3, [r0]
 8000d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d9a:	6083      	str	r3, [r0, #8]
 8000d9c:	8181      	strh	r1, [r0, #12]
 8000d9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000da0:	81c2      	strh	r2, [r0, #14]
 8000da2:	6183      	str	r3, [r0, #24]
 8000da4:	4619      	mov	r1, r3
 8000da6:	2208      	movs	r2, #8
 8000da8:	305c      	adds	r0, #92	@ 0x5c
 8000daa:	f000 fa01 	bl	80011b0 <memset>
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <std+0x58>)
 8000db0:	6263      	str	r3, [r4, #36]	@ 0x24
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <std+0x5c>)
 8000db4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000db6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <std+0x60>)
 8000db8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000dba:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <std+0x64>)
 8000dbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <std+0x68>)
 8000dc0:	6224      	str	r4, [r4, #32]
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	d006      	beq.n	8000dd4 <std+0x48>
 8000dc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000dca:	4294      	cmp	r4, r2
 8000dcc:	d002      	beq.n	8000dd4 <std+0x48>
 8000dce:	33d0      	adds	r3, #208	@ 0xd0
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	d105      	bne.n	8000de0 <std+0x54>
 8000dd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ddc:	f000 ba70 	b.w	80012c0 <__retarget_lock_init_recursive>
 8000de0:	bd10      	pop	{r4, pc}
 8000de2:	bf00      	nop
 8000de4:	08001001 	.word	0x08001001
 8000de8:	08001023 	.word	0x08001023
 8000dec:	0800105b 	.word	0x0800105b
 8000df0:	0800107f 	.word	0x0800107f
 8000df4:	20000090 	.word	0x20000090

08000df8 <stdio_exit_handler>:
 8000df8:	4a02      	ldr	r2, [pc, #8]	@ (8000e04 <stdio_exit_handler+0xc>)
 8000dfa:	4903      	ldr	r1, [pc, #12]	@ (8000e08 <stdio_exit_handler+0x10>)
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <stdio_exit_handler+0x14>)
 8000dfe:	f000 b869 	b.w	8000ed4 <_fwalk_sglue>
 8000e02:	bf00      	nop
 8000e04:	20000004 	.word	0x20000004
 8000e08:	08001a01 	.word	0x08001a01
 8000e0c:	20000014 	.word	0x20000014

08000e10 <cleanup_stdio>:
 8000e10:	6841      	ldr	r1, [r0, #4]
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <cleanup_stdio+0x34>)
 8000e14:	4299      	cmp	r1, r3
 8000e16:	b510      	push	{r4, lr}
 8000e18:	4604      	mov	r4, r0
 8000e1a:	d001      	beq.n	8000e20 <cleanup_stdio+0x10>
 8000e1c:	f000 fdf0 	bl	8001a00 <_fflush_r>
 8000e20:	68a1      	ldr	r1, [r4, #8]
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <cleanup_stdio+0x38>)
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d002      	beq.n	8000e2e <cleanup_stdio+0x1e>
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f000 fde9 	bl	8001a00 <_fflush_r>
 8000e2e:	68e1      	ldr	r1, [r4, #12]
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <cleanup_stdio+0x3c>)
 8000e32:	4299      	cmp	r1, r3
 8000e34:	d004      	beq.n	8000e40 <cleanup_stdio+0x30>
 8000e36:	4620      	mov	r0, r4
 8000e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e3c:	f000 bde0 	b.w	8001a00 <_fflush_r>
 8000e40:	bd10      	pop	{r4, pc}
 8000e42:	bf00      	nop
 8000e44:	20000090 	.word	0x20000090
 8000e48:	200000f8 	.word	0x200000f8
 8000e4c:	20000160 	.word	0x20000160

08000e50 <global_stdio_init.part.0>:
 8000e50:	b510      	push	{r4, lr}
 8000e52:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <global_stdio_init.part.0+0x30>)
 8000e54:	4c0b      	ldr	r4, [pc, #44]	@ (8000e84 <global_stdio_init.part.0+0x34>)
 8000e56:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <global_stdio_init.part.0+0x38>)
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2104      	movs	r1, #4
 8000e60:	f7ff ff94 	bl	8000d8c <std>
 8000e64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2109      	movs	r1, #9
 8000e6c:	f7ff ff8e 	bl	8000d8c <std>
 8000e70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000e74:	2202      	movs	r2, #2
 8000e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e7a:	2112      	movs	r1, #18
 8000e7c:	f7ff bf86 	b.w	8000d8c <std>
 8000e80:	200001c8 	.word	0x200001c8
 8000e84:	20000090 	.word	0x20000090
 8000e88:	08000df9 	.word	0x08000df9

08000e8c <__sfp_lock_acquire>:
 8000e8c:	4801      	ldr	r0, [pc, #4]	@ (8000e94 <__sfp_lock_acquire+0x8>)
 8000e8e:	f000 ba18 	b.w	80012c2 <__retarget_lock_acquire_recursive>
 8000e92:	bf00      	nop
 8000e94:	200001d1 	.word	0x200001d1

08000e98 <__sfp_lock_release>:
 8000e98:	4801      	ldr	r0, [pc, #4]	@ (8000ea0 <__sfp_lock_release+0x8>)
 8000e9a:	f000 ba13 	b.w	80012c4 <__retarget_lock_release_recursive>
 8000e9e:	bf00      	nop
 8000ea0:	200001d1 	.word	0x200001d1

08000ea4 <__sinit>:
 8000ea4:	b510      	push	{r4, lr}
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	f7ff fff0 	bl	8000e8c <__sfp_lock_acquire>
 8000eac:	6a23      	ldr	r3, [r4, #32]
 8000eae:	b11b      	cbz	r3, 8000eb8 <__sinit+0x14>
 8000eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000eb4:	f7ff bff0 	b.w	8000e98 <__sfp_lock_release>
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <__sinit+0x28>)
 8000eba:	6223      	str	r3, [r4, #32]
 8000ebc:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <__sinit+0x2c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f5      	bne.n	8000eb0 <__sinit+0xc>
 8000ec4:	f7ff ffc4 	bl	8000e50 <global_stdio_init.part.0>
 8000ec8:	e7f2      	b.n	8000eb0 <__sinit+0xc>
 8000eca:	bf00      	nop
 8000ecc:	08000e11 	.word	0x08000e11
 8000ed0:	200001c8 	.word	0x200001c8

08000ed4 <_fwalk_sglue>:
 8000ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ed8:	4607      	mov	r7, r0
 8000eda:	4688      	mov	r8, r1
 8000edc:	4614      	mov	r4, r2
 8000ede:	2600      	movs	r6, #0
 8000ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8000ee8:	d505      	bpl.n	8000ef6 <_fwalk_sglue+0x22>
 8000eea:	6824      	ldr	r4, [r4, #0]
 8000eec:	2c00      	cmp	r4, #0
 8000eee:	d1f7      	bne.n	8000ee0 <_fwalk_sglue+0xc>
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ef6:	89ab      	ldrh	r3, [r5, #12]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d907      	bls.n	8000f0c <_fwalk_sglue+0x38>
 8000efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f00:	3301      	adds	r3, #1
 8000f02:	d003      	beq.n	8000f0c <_fwalk_sglue+0x38>
 8000f04:	4629      	mov	r1, r5
 8000f06:	4638      	mov	r0, r7
 8000f08:	47c0      	blx	r8
 8000f0a:	4306      	orrs	r6, r0
 8000f0c:	3568      	adds	r5, #104	@ 0x68
 8000f0e:	e7e9      	b.n	8000ee4 <_fwalk_sglue+0x10>

08000f10 <iprintf>:
 8000f10:	b40f      	push	{r0, r1, r2, r3}
 8000f12:	b507      	push	{r0, r1, r2, lr}
 8000f14:	4906      	ldr	r1, [pc, #24]	@ (8000f30 <iprintf+0x20>)
 8000f16:	ab04      	add	r3, sp, #16
 8000f18:	6808      	ldr	r0, [r1, #0]
 8000f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f1e:	6881      	ldr	r1, [r0, #8]
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	f000 fa45 	bl	80013b0 <_vfiprintf_r>
 8000f26:	b003      	add	sp, #12
 8000f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4770      	bx	lr
 8000f30:	20000010 	.word	0x20000010

08000f34 <putchar>:
 8000f34:	4b02      	ldr	r3, [pc, #8]	@ (8000f40 <putchar+0xc>)
 8000f36:	4601      	mov	r1, r0
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	6882      	ldr	r2, [r0, #8]
 8000f3c:	f000 bdea 	b.w	8001b14 <_putc_r>
 8000f40:	20000010 	.word	0x20000010

08000f44 <_puts_r>:
 8000f44:	6a03      	ldr	r3, [r0, #32]
 8000f46:	b570      	push	{r4, r5, r6, lr}
 8000f48:	6884      	ldr	r4, [r0, #8]
 8000f4a:	4605      	mov	r5, r0
 8000f4c:	460e      	mov	r6, r1
 8000f4e:	b90b      	cbnz	r3, 8000f54 <_puts_r+0x10>
 8000f50:	f7ff ffa8 	bl	8000ea4 <__sinit>
 8000f54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000f56:	07db      	lsls	r3, r3, #31
 8000f58:	d405      	bmi.n	8000f66 <_puts_r+0x22>
 8000f5a:	89a3      	ldrh	r3, [r4, #12]
 8000f5c:	0598      	lsls	r0, r3, #22
 8000f5e:	d402      	bmi.n	8000f66 <_puts_r+0x22>
 8000f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f62:	f000 f9ae 	bl	80012c2 <__retarget_lock_acquire_recursive>
 8000f66:	89a3      	ldrh	r3, [r4, #12]
 8000f68:	0719      	lsls	r1, r3, #28
 8000f6a:	d502      	bpl.n	8000f72 <_puts_r+0x2e>
 8000f6c:	6923      	ldr	r3, [r4, #16]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d135      	bne.n	8000fde <_puts_r+0x9a>
 8000f72:	4621      	mov	r1, r4
 8000f74:	4628      	mov	r0, r5
 8000f76:	f000 f8c5 	bl	8001104 <__swsetup_r>
 8000f7a:	b380      	cbz	r0, 8000fde <_puts_r+0x9a>
 8000f7c:	f04f 35ff 	mov.w	r5, #4294967295
 8000f80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000f82:	07da      	lsls	r2, r3, #31
 8000f84:	d405      	bmi.n	8000f92 <_puts_r+0x4e>
 8000f86:	89a3      	ldrh	r3, [r4, #12]
 8000f88:	059b      	lsls	r3, r3, #22
 8000f8a:	d402      	bmi.n	8000f92 <_puts_r+0x4e>
 8000f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f8e:	f000 f999 	bl	80012c4 <__retarget_lock_release_recursive>
 8000f92:	4628      	mov	r0, r5
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	da04      	bge.n	8000fa4 <_puts_r+0x60>
 8000f9a:	69a2      	ldr	r2, [r4, #24]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dc17      	bgt.n	8000fd0 <_puts_r+0x8c>
 8000fa0:	290a      	cmp	r1, #10
 8000fa2:	d015      	beq.n	8000fd0 <_puts_r+0x8c>
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	6022      	str	r2, [r4, #0]
 8000faa:	7019      	strb	r1, [r3, #0]
 8000fac:	68a3      	ldr	r3, [r4, #8]
 8000fae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	60a3      	str	r3, [r4, #8]
 8000fb6:	2900      	cmp	r1, #0
 8000fb8:	d1ed      	bne.n	8000f96 <_puts_r+0x52>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	da11      	bge.n	8000fe2 <_puts_r+0x9e>
 8000fbe:	4622      	mov	r2, r4
 8000fc0:	210a      	movs	r1, #10
 8000fc2:	4628      	mov	r0, r5
 8000fc4:	f000 f85f 	bl	8001086 <__swbuf_r>
 8000fc8:	3001      	adds	r0, #1
 8000fca:	d0d7      	beq.n	8000f7c <_puts_r+0x38>
 8000fcc:	250a      	movs	r5, #10
 8000fce:	e7d7      	b.n	8000f80 <_puts_r+0x3c>
 8000fd0:	4622      	mov	r2, r4
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	f000 f857 	bl	8001086 <__swbuf_r>
 8000fd8:	3001      	adds	r0, #1
 8000fda:	d1e7      	bne.n	8000fac <_puts_r+0x68>
 8000fdc:	e7ce      	b.n	8000f7c <_puts_r+0x38>
 8000fde:	3e01      	subs	r6, #1
 8000fe0:	e7e4      	b.n	8000fac <_puts_r+0x68>
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	6022      	str	r2, [r4, #0]
 8000fe8:	220a      	movs	r2, #10
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e7ee      	b.n	8000fcc <_puts_r+0x88>
	...

08000ff0 <puts>:
 8000ff0:	4b02      	ldr	r3, [pc, #8]	@ (8000ffc <puts+0xc>)
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f7ff bfa5 	b.w	8000f44 <_puts_r>
 8000ffa:	bf00      	nop
 8000ffc:	20000010 	.word	0x20000010

08001000 <__sread>:
 8001000:	b510      	push	{r4, lr}
 8001002:	460c      	mov	r4, r1
 8001004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001008:	f000 f8fc 	bl	8001204 <_read_r>
 800100c:	2800      	cmp	r0, #0
 800100e:	bfab      	itete	ge
 8001010:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001012:	89a3      	ldrhlt	r3, [r4, #12]
 8001014:	181b      	addge	r3, r3, r0
 8001016:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800101a:	bfac      	ite	ge
 800101c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800101e:	81a3      	strhlt	r3, [r4, #12]
 8001020:	bd10      	pop	{r4, pc}

08001022 <__swrite>:
 8001022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001026:	461f      	mov	r7, r3
 8001028:	898b      	ldrh	r3, [r1, #12]
 800102a:	05db      	lsls	r3, r3, #23
 800102c:	4605      	mov	r5, r0
 800102e:	460c      	mov	r4, r1
 8001030:	4616      	mov	r6, r2
 8001032:	d505      	bpl.n	8001040 <__swrite+0x1e>
 8001034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001038:	2302      	movs	r3, #2
 800103a:	2200      	movs	r2, #0
 800103c:	f000 f8d0 	bl	80011e0 <_lseek_r>
 8001040:	89a3      	ldrh	r3, [r4, #12]
 8001042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001046:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800104a:	81a3      	strh	r3, [r4, #12]
 800104c:	4632      	mov	r2, r6
 800104e:	463b      	mov	r3, r7
 8001050:	4628      	mov	r0, r5
 8001052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001056:	f000 b8f7 	b.w	8001248 <_write_r>

0800105a <__sseek>:
 800105a:	b510      	push	{r4, lr}
 800105c:	460c      	mov	r4, r1
 800105e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001062:	f000 f8bd 	bl	80011e0 <_lseek_r>
 8001066:	1c43      	adds	r3, r0, #1
 8001068:	89a3      	ldrh	r3, [r4, #12]
 800106a:	bf15      	itete	ne
 800106c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800106e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001072:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001076:	81a3      	strheq	r3, [r4, #12]
 8001078:	bf18      	it	ne
 800107a:	81a3      	strhne	r3, [r4, #12]
 800107c:	bd10      	pop	{r4, pc}

0800107e <__sclose>:
 800107e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001082:	f000 b89d 	b.w	80011c0 <_close_r>

08001086 <__swbuf_r>:
 8001086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001088:	460e      	mov	r6, r1
 800108a:	4614      	mov	r4, r2
 800108c:	4605      	mov	r5, r0
 800108e:	b118      	cbz	r0, 8001098 <__swbuf_r+0x12>
 8001090:	6a03      	ldr	r3, [r0, #32]
 8001092:	b90b      	cbnz	r3, 8001098 <__swbuf_r+0x12>
 8001094:	f7ff ff06 	bl	8000ea4 <__sinit>
 8001098:	69a3      	ldr	r3, [r4, #24]
 800109a:	60a3      	str	r3, [r4, #8]
 800109c:	89a3      	ldrh	r3, [r4, #12]
 800109e:	071a      	lsls	r2, r3, #28
 80010a0:	d501      	bpl.n	80010a6 <__swbuf_r+0x20>
 80010a2:	6923      	ldr	r3, [r4, #16]
 80010a4:	b943      	cbnz	r3, 80010b8 <__swbuf_r+0x32>
 80010a6:	4621      	mov	r1, r4
 80010a8:	4628      	mov	r0, r5
 80010aa:	f000 f82b 	bl	8001104 <__swsetup_r>
 80010ae:	b118      	cbz	r0, 80010b8 <__swbuf_r+0x32>
 80010b0:	f04f 37ff 	mov.w	r7, #4294967295
 80010b4:	4638      	mov	r0, r7
 80010b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	6922      	ldr	r2, [r4, #16]
 80010bc:	1a98      	subs	r0, r3, r2
 80010be:	6963      	ldr	r3, [r4, #20]
 80010c0:	b2f6      	uxtb	r6, r6
 80010c2:	4283      	cmp	r3, r0
 80010c4:	4637      	mov	r7, r6
 80010c6:	dc05      	bgt.n	80010d4 <__swbuf_r+0x4e>
 80010c8:	4621      	mov	r1, r4
 80010ca:	4628      	mov	r0, r5
 80010cc:	f000 fc98 	bl	8001a00 <_fflush_r>
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d1ed      	bne.n	80010b0 <__swbuf_r+0x2a>
 80010d4:	68a3      	ldr	r3, [r4, #8]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	60a3      	str	r3, [r4, #8]
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	6022      	str	r2, [r4, #0]
 80010e0:	701e      	strb	r6, [r3, #0]
 80010e2:	6962      	ldr	r2, [r4, #20]
 80010e4:	1c43      	adds	r3, r0, #1
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d004      	beq.n	80010f4 <__swbuf_r+0x6e>
 80010ea:	89a3      	ldrh	r3, [r4, #12]
 80010ec:	07db      	lsls	r3, r3, #31
 80010ee:	d5e1      	bpl.n	80010b4 <__swbuf_r+0x2e>
 80010f0:	2e0a      	cmp	r6, #10
 80010f2:	d1df      	bne.n	80010b4 <__swbuf_r+0x2e>
 80010f4:	4621      	mov	r1, r4
 80010f6:	4628      	mov	r0, r5
 80010f8:	f000 fc82 	bl	8001a00 <_fflush_r>
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d0d9      	beq.n	80010b4 <__swbuf_r+0x2e>
 8001100:	e7d6      	b.n	80010b0 <__swbuf_r+0x2a>
	...

08001104 <__swsetup_r>:
 8001104:	b538      	push	{r3, r4, r5, lr}
 8001106:	4b29      	ldr	r3, [pc, #164]	@ (80011ac <__swsetup_r+0xa8>)
 8001108:	4605      	mov	r5, r0
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	460c      	mov	r4, r1
 800110e:	b118      	cbz	r0, 8001118 <__swsetup_r+0x14>
 8001110:	6a03      	ldr	r3, [r0, #32]
 8001112:	b90b      	cbnz	r3, 8001118 <__swsetup_r+0x14>
 8001114:	f7ff fec6 	bl	8000ea4 <__sinit>
 8001118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800111c:	0719      	lsls	r1, r3, #28
 800111e:	d422      	bmi.n	8001166 <__swsetup_r+0x62>
 8001120:	06da      	lsls	r2, r3, #27
 8001122:	d407      	bmi.n	8001134 <__swsetup_r+0x30>
 8001124:	2209      	movs	r2, #9
 8001126:	602a      	str	r2, [r5, #0]
 8001128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800112c:	81a3      	strh	r3, [r4, #12]
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	e033      	b.n	800119c <__swsetup_r+0x98>
 8001134:	0758      	lsls	r0, r3, #29
 8001136:	d512      	bpl.n	800115e <__swsetup_r+0x5a>
 8001138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800113a:	b141      	cbz	r1, 800114e <__swsetup_r+0x4a>
 800113c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001140:	4299      	cmp	r1, r3
 8001142:	d002      	beq.n	800114a <__swsetup_r+0x46>
 8001144:	4628      	mov	r0, r5
 8001146:	f000 f8bf 	bl	80012c8 <_free_r>
 800114a:	2300      	movs	r3, #0
 800114c:	6363      	str	r3, [r4, #52]	@ 0x34
 800114e:	89a3      	ldrh	r3, [r4, #12]
 8001150:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001154:	81a3      	strh	r3, [r4, #12]
 8001156:	2300      	movs	r3, #0
 8001158:	6063      	str	r3, [r4, #4]
 800115a:	6923      	ldr	r3, [r4, #16]
 800115c:	6023      	str	r3, [r4, #0]
 800115e:	89a3      	ldrh	r3, [r4, #12]
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	81a3      	strh	r3, [r4, #12]
 8001166:	6923      	ldr	r3, [r4, #16]
 8001168:	b94b      	cbnz	r3, 800117e <__swsetup_r+0x7a>
 800116a:	89a3      	ldrh	r3, [r4, #12]
 800116c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001174:	d003      	beq.n	800117e <__swsetup_r+0x7a>
 8001176:	4621      	mov	r1, r4
 8001178:	4628      	mov	r0, r5
 800117a:	f000 fc8f 	bl	8001a9c <__smakebuf_r>
 800117e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001182:	f013 0201 	ands.w	r2, r3, #1
 8001186:	d00a      	beq.n	800119e <__swsetup_r+0x9a>
 8001188:	2200      	movs	r2, #0
 800118a:	60a2      	str	r2, [r4, #8]
 800118c:	6962      	ldr	r2, [r4, #20]
 800118e:	4252      	negs	r2, r2
 8001190:	61a2      	str	r2, [r4, #24]
 8001192:	6922      	ldr	r2, [r4, #16]
 8001194:	b942      	cbnz	r2, 80011a8 <__swsetup_r+0xa4>
 8001196:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800119a:	d1c5      	bne.n	8001128 <__swsetup_r+0x24>
 800119c:	bd38      	pop	{r3, r4, r5, pc}
 800119e:	0799      	lsls	r1, r3, #30
 80011a0:	bf58      	it	pl
 80011a2:	6962      	ldrpl	r2, [r4, #20]
 80011a4:	60a2      	str	r2, [r4, #8]
 80011a6:	e7f4      	b.n	8001192 <__swsetup_r+0x8e>
 80011a8:	2000      	movs	r0, #0
 80011aa:	e7f7      	b.n	800119c <__swsetup_r+0x98>
 80011ac:	20000010 	.word	0x20000010

080011b0 <memset>:
 80011b0:	4402      	add	r2, r0
 80011b2:	4603      	mov	r3, r0
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d100      	bne.n	80011ba <memset+0xa>
 80011b8:	4770      	bx	lr
 80011ba:	f803 1b01 	strb.w	r1, [r3], #1
 80011be:	e7f9      	b.n	80011b4 <memset+0x4>

080011c0 <_close_r>:
 80011c0:	b538      	push	{r3, r4, r5, lr}
 80011c2:	4d06      	ldr	r5, [pc, #24]	@ (80011dc <_close_r+0x1c>)
 80011c4:	2300      	movs	r3, #0
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	602b      	str	r3, [r5, #0]
 80011cc:	f7ff fb7f 	bl	80008ce <_close>
 80011d0:	1c43      	adds	r3, r0, #1
 80011d2:	d102      	bne.n	80011da <_close_r+0x1a>
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	b103      	cbz	r3, 80011da <_close_r+0x1a>
 80011d8:	6023      	str	r3, [r4, #0]
 80011da:	bd38      	pop	{r3, r4, r5, pc}
 80011dc:	200001cc 	.word	0x200001cc

080011e0 <_lseek_r>:
 80011e0:	b538      	push	{r3, r4, r5, lr}
 80011e2:	4d07      	ldr	r5, [pc, #28]	@ (8001200 <_lseek_r+0x20>)
 80011e4:	4604      	mov	r4, r0
 80011e6:	4608      	mov	r0, r1
 80011e8:	4611      	mov	r1, r2
 80011ea:	2200      	movs	r2, #0
 80011ec:	602a      	str	r2, [r5, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	f7ff fb94 	bl	800091c <_lseek>
 80011f4:	1c43      	adds	r3, r0, #1
 80011f6:	d102      	bne.n	80011fe <_lseek_r+0x1e>
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	b103      	cbz	r3, 80011fe <_lseek_r+0x1e>
 80011fc:	6023      	str	r3, [r4, #0]
 80011fe:	bd38      	pop	{r3, r4, r5, pc}
 8001200:	200001cc 	.word	0x200001cc

08001204 <_read_r>:
 8001204:	b538      	push	{r3, r4, r5, lr}
 8001206:	4d07      	ldr	r5, [pc, #28]	@ (8001224 <_read_r+0x20>)
 8001208:	4604      	mov	r4, r0
 800120a:	4608      	mov	r0, r1
 800120c:	4611      	mov	r1, r2
 800120e:	2200      	movs	r2, #0
 8001210:	602a      	str	r2, [r5, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	f7ff fb22 	bl	800085c <_read>
 8001218:	1c43      	adds	r3, r0, #1
 800121a:	d102      	bne.n	8001222 <_read_r+0x1e>
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	b103      	cbz	r3, 8001222 <_read_r+0x1e>
 8001220:	6023      	str	r3, [r4, #0]
 8001222:	bd38      	pop	{r3, r4, r5, pc}
 8001224:	200001cc 	.word	0x200001cc

08001228 <_sbrk_r>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4d06      	ldr	r5, [pc, #24]	@ (8001244 <_sbrk_r+0x1c>)
 800122c:	2300      	movs	r3, #0
 800122e:	4604      	mov	r4, r0
 8001230:	4608      	mov	r0, r1
 8001232:	602b      	str	r3, [r5, #0]
 8001234:	f7ff fb80 	bl	8000938 <_sbrk>
 8001238:	1c43      	adds	r3, r0, #1
 800123a:	d102      	bne.n	8001242 <_sbrk_r+0x1a>
 800123c:	682b      	ldr	r3, [r5, #0]
 800123e:	b103      	cbz	r3, 8001242 <_sbrk_r+0x1a>
 8001240:	6023      	str	r3, [r4, #0]
 8001242:	bd38      	pop	{r3, r4, r5, pc}
 8001244:	200001cc 	.word	0x200001cc

08001248 <_write_r>:
 8001248:	b538      	push	{r3, r4, r5, lr}
 800124a:	4d07      	ldr	r5, [pc, #28]	@ (8001268 <_write_r+0x20>)
 800124c:	4604      	mov	r4, r0
 800124e:	4608      	mov	r0, r1
 8001250:	4611      	mov	r1, r2
 8001252:	2200      	movs	r2, #0
 8001254:	602a      	str	r2, [r5, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	f7ff fb1d 	bl	8000896 <_write>
 800125c:	1c43      	adds	r3, r0, #1
 800125e:	d102      	bne.n	8001266 <_write_r+0x1e>
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	b103      	cbz	r3, 8001266 <_write_r+0x1e>
 8001264:	6023      	str	r3, [r4, #0]
 8001266:	bd38      	pop	{r3, r4, r5, pc}
 8001268:	200001cc 	.word	0x200001cc

0800126c <__errno>:
 800126c:	4b01      	ldr	r3, [pc, #4]	@ (8001274 <__errno+0x8>)
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000010 	.word	0x20000010

08001278 <__libc_init_array>:
 8001278:	b570      	push	{r4, r5, r6, lr}
 800127a:	4d0d      	ldr	r5, [pc, #52]	@ (80012b0 <__libc_init_array+0x38>)
 800127c:	4c0d      	ldr	r4, [pc, #52]	@ (80012b4 <__libc_init_array+0x3c>)
 800127e:	1b64      	subs	r4, r4, r5
 8001280:	10a4      	asrs	r4, r4, #2
 8001282:	2600      	movs	r6, #0
 8001284:	42a6      	cmp	r6, r4
 8001286:	d109      	bne.n	800129c <__libc_init_array+0x24>
 8001288:	4d0b      	ldr	r5, [pc, #44]	@ (80012b8 <__libc_init_array+0x40>)
 800128a:	4c0c      	ldr	r4, [pc, #48]	@ (80012bc <__libc_init_array+0x44>)
 800128c:	f000 fc98 	bl	8001bc0 <_init>
 8001290:	1b64      	subs	r4, r4, r5
 8001292:	10a4      	asrs	r4, r4, #2
 8001294:	2600      	movs	r6, #0
 8001296:	42a6      	cmp	r6, r4
 8001298:	d105      	bne.n	80012a6 <__libc_init_array+0x2e>
 800129a:	bd70      	pop	{r4, r5, r6, pc}
 800129c:	f855 3b04 	ldr.w	r3, [r5], #4
 80012a0:	4798      	blx	r3
 80012a2:	3601      	adds	r6, #1
 80012a4:	e7ee      	b.n	8001284 <__libc_init_array+0xc>
 80012a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80012aa:	4798      	blx	r3
 80012ac:	3601      	adds	r6, #1
 80012ae:	e7f2      	b.n	8001296 <__libc_init_array+0x1e>
 80012b0:	08001e50 	.word	0x08001e50
 80012b4:	08001e50 	.word	0x08001e50
 80012b8:	08001e50 	.word	0x08001e50
 80012bc:	08001e54 	.word	0x08001e54

080012c0 <__retarget_lock_init_recursive>:
 80012c0:	4770      	bx	lr

080012c2 <__retarget_lock_acquire_recursive>:
 80012c2:	4770      	bx	lr

080012c4 <__retarget_lock_release_recursive>:
 80012c4:	4770      	bx	lr
	...

080012c8 <_free_r>:
 80012c8:	b538      	push	{r3, r4, r5, lr}
 80012ca:	4605      	mov	r5, r0
 80012cc:	2900      	cmp	r1, #0
 80012ce:	d041      	beq.n	8001354 <_free_r+0x8c>
 80012d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012d4:	1f0c      	subs	r4, r1, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bfb8      	it	lt
 80012da:	18e4      	addlt	r4, r4, r3
 80012dc:	f7ff fd4a 	bl	8000d74 <__malloc_lock>
 80012e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001358 <_free_r+0x90>)
 80012e2:	6813      	ldr	r3, [r2, #0]
 80012e4:	b933      	cbnz	r3, 80012f4 <_free_r+0x2c>
 80012e6:	6063      	str	r3, [r4, #4]
 80012e8:	6014      	str	r4, [r2, #0]
 80012ea:	4628      	mov	r0, r5
 80012ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80012f0:	f7ff bd46 	b.w	8000d80 <__malloc_unlock>
 80012f4:	42a3      	cmp	r3, r4
 80012f6:	d908      	bls.n	800130a <_free_r+0x42>
 80012f8:	6820      	ldr	r0, [r4, #0]
 80012fa:	1821      	adds	r1, r4, r0
 80012fc:	428b      	cmp	r3, r1
 80012fe:	bf01      	itttt	eq
 8001300:	6819      	ldreq	r1, [r3, #0]
 8001302:	685b      	ldreq	r3, [r3, #4]
 8001304:	1809      	addeq	r1, r1, r0
 8001306:	6021      	streq	r1, [r4, #0]
 8001308:	e7ed      	b.n	80012e6 <_free_r+0x1e>
 800130a:	461a      	mov	r2, r3
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	b10b      	cbz	r3, 8001314 <_free_r+0x4c>
 8001310:	42a3      	cmp	r3, r4
 8001312:	d9fa      	bls.n	800130a <_free_r+0x42>
 8001314:	6811      	ldr	r1, [r2, #0]
 8001316:	1850      	adds	r0, r2, r1
 8001318:	42a0      	cmp	r0, r4
 800131a:	d10b      	bne.n	8001334 <_free_r+0x6c>
 800131c:	6820      	ldr	r0, [r4, #0]
 800131e:	4401      	add	r1, r0
 8001320:	1850      	adds	r0, r2, r1
 8001322:	4283      	cmp	r3, r0
 8001324:	6011      	str	r1, [r2, #0]
 8001326:	d1e0      	bne.n	80012ea <_free_r+0x22>
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	6053      	str	r3, [r2, #4]
 800132e:	4408      	add	r0, r1
 8001330:	6010      	str	r0, [r2, #0]
 8001332:	e7da      	b.n	80012ea <_free_r+0x22>
 8001334:	d902      	bls.n	800133c <_free_r+0x74>
 8001336:	230c      	movs	r3, #12
 8001338:	602b      	str	r3, [r5, #0]
 800133a:	e7d6      	b.n	80012ea <_free_r+0x22>
 800133c:	6820      	ldr	r0, [r4, #0]
 800133e:	1821      	adds	r1, r4, r0
 8001340:	428b      	cmp	r3, r1
 8001342:	bf04      	itt	eq
 8001344:	6819      	ldreq	r1, [r3, #0]
 8001346:	685b      	ldreq	r3, [r3, #4]
 8001348:	6063      	str	r3, [r4, #4]
 800134a:	bf04      	itt	eq
 800134c:	1809      	addeq	r1, r1, r0
 800134e:	6021      	streq	r1, [r4, #0]
 8001350:	6054      	str	r4, [r2, #4]
 8001352:	e7ca      	b.n	80012ea <_free_r+0x22>
 8001354:	bd38      	pop	{r3, r4, r5, pc}
 8001356:	bf00      	nop
 8001358:	2000008c 	.word	0x2000008c

0800135c <__sfputc_r>:
 800135c:	6893      	ldr	r3, [r2, #8]
 800135e:	3b01      	subs	r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	b410      	push	{r4}
 8001364:	6093      	str	r3, [r2, #8]
 8001366:	da08      	bge.n	800137a <__sfputc_r+0x1e>
 8001368:	6994      	ldr	r4, [r2, #24]
 800136a:	42a3      	cmp	r3, r4
 800136c:	db01      	blt.n	8001372 <__sfputc_r+0x16>
 800136e:	290a      	cmp	r1, #10
 8001370:	d103      	bne.n	800137a <__sfputc_r+0x1e>
 8001372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001376:	f7ff be86 	b.w	8001086 <__swbuf_r>
 800137a:	6813      	ldr	r3, [r2, #0]
 800137c:	1c58      	adds	r0, r3, #1
 800137e:	6010      	str	r0, [r2, #0]
 8001380:	7019      	strb	r1, [r3, #0]
 8001382:	4608      	mov	r0, r1
 8001384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001388:	4770      	bx	lr

0800138a <__sfputs_r>:
 800138a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138c:	4606      	mov	r6, r0
 800138e:	460f      	mov	r7, r1
 8001390:	4614      	mov	r4, r2
 8001392:	18d5      	adds	r5, r2, r3
 8001394:	42ac      	cmp	r4, r5
 8001396:	d101      	bne.n	800139c <__sfputs_r+0x12>
 8001398:	2000      	movs	r0, #0
 800139a:	e007      	b.n	80013ac <__sfputs_r+0x22>
 800139c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013a0:	463a      	mov	r2, r7
 80013a2:	4630      	mov	r0, r6
 80013a4:	f7ff ffda 	bl	800135c <__sfputc_r>
 80013a8:	1c43      	adds	r3, r0, #1
 80013aa:	d1f3      	bne.n	8001394 <__sfputs_r+0xa>
 80013ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080013b0 <_vfiprintf_r>:
 80013b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b4:	460d      	mov	r5, r1
 80013b6:	b09d      	sub	sp, #116	@ 0x74
 80013b8:	4614      	mov	r4, r2
 80013ba:	4698      	mov	r8, r3
 80013bc:	4606      	mov	r6, r0
 80013be:	b118      	cbz	r0, 80013c8 <_vfiprintf_r+0x18>
 80013c0:	6a03      	ldr	r3, [r0, #32]
 80013c2:	b90b      	cbnz	r3, 80013c8 <_vfiprintf_r+0x18>
 80013c4:	f7ff fd6e 	bl	8000ea4 <__sinit>
 80013c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80013ca:	07d9      	lsls	r1, r3, #31
 80013cc:	d405      	bmi.n	80013da <_vfiprintf_r+0x2a>
 80013ce:	89ab      	ldrh	r3, [r5, #12]
 80013d0:	059a      	lsls	r2, r3, #22
 80013d2:	d402      	bmi.n	80013da <_vfiprintf_r+0x2a>
 80013d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80013d6:	f7ff ff74 	bl	80012c2 <__retarget_lock_acquire_recursive>
 80013da:	89ab      	ldrh	r3, [r5, #12]
 80013dc:	071b      	lsls	r3, r3, #28
 80013de:	d501      	bpl.n	80013e4 <_vfiprintf_r+0x34>
 80013e0:	692b      	ldr	r3, [r5, #16]
 80013e2:	b99b      	cbnz	r3, 800140c <_vfiprintf_r+0x5c>
 80013e4:	4629      	mov	r1, r5
 80013e6:	4630      	mov	r0, r6
 80013e8:	f7ff fe8c 	bl	8001104 <__swsetup_r>
 80013ec:	b170      	cbz	r0, 800140c <_vfiprintf_r+0x5c>
 80013ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80013f0:	07dc      	lsls	r4, r3, #31
 80013f2:	d504      	bpl.n	80013fe <_vfiprintf_r+0x4e>
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	b01d      	add	sp, #116	@ 0x74
 80013fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013fe:	89ab      	ldrh	r3, [r5, #12]
 8001400:	0598      	lsls	r0, r3, #22
 8001402:	d4f7      	bmi.n	80013f4 <_vfiprintf_r+0x44>
 8001404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001406:	f7ff ff5d 	bl	80012c4 <__retarget_lock_release_recursive>
 800140a:	e7f3      	b.n	80013f4 <_vfiprintf_r+0x44>
 800140c:	2300      	movs	r3, #0
 800140e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001410:	2320      	movs	r3, #32
 8001412:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001416:	f8cd 800c 	str.w	r8, [sp, #12]
 800141a:	2330      	movs	r3, #48	@ 0x30
 800141c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80015cc <_vfiprintf_r+0x21c>
 8001420:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001424:	f04f 0901 	mov.w	r9, #1
 8001428:	4623      	mov	r3, r4
 800142a:	469a      	mov	sl, r3
 800142c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001430:	b10a      	cbz	r2, 8001436 <_vfiprintf_r+0x86>
 8001432:	2a25      	cmp	r2, #37	@ 0x25
 8001434:	d1f9      	bne.n	800142a <_vfiprintf_r+0x7a>
 8001436:	ebba 0b04 	subs.w	fp, sl, r4
 800143a:	d00b      	beq.n	8001454 <_vfiprintf_r+0xa4>
 800143c:	465b      	mov	r3, fp
 800143e:	4622      	mov	r2, r4
 8001440:	4629      	mov	r1, r5
 8001442:	4630      	mov	r0, r6
 8001444:	f7ff ffa1 	bl	800138a <__sfputs_r>
 8001448:	3001      	adds	r0, #1
 800144a:	f000 80a7 	beq.w	800159c <_vfiprintf_r+0x1ec>
 800144e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001450:	445a      	add	r2, fp
 8001452:	9209      	str	r2, [sp, #36]	@ 0x24
 8001454:	f89a 3000 	ldrb.w	r3, [sl]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 809f 	beq.w	800159c <_vfiprintf_r+0x1ec>
 800145e:	2300      	movs	r3, #0
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001468:	f10a 0a01 	add.w	sl, sl, #1
 800146c:	9304      	str	r3, [sp, #16]
 800146e:	9307      	str	r3, [sp, #28]
 8001470:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001474:	931a      	str	r3, [sp, #104]	@ 0x68
 8001476:	4654      	mov	r4, sl
 8001478:	2205      	movs	r2, #5
 800147a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800147e:	4853      	ldr	r0, [pc, #332]	@ (80015cc <_vfiprintf_r+0x21c>)
 8001480:	f7fe fec6 	bl	8000210 <memchr>
 8001484:	9a04      	ldr	r2, [sp, #16]
 8001486:	b9d8      	cbnz	r0, 80014c0 <_vfiprintf_r+0x110>
 8001488:	06d1      	lsls	r1, r2, #27
 800148a:	bf44      	itt	mi
 800148c:	2320      	movmi	r3, #32
 800148e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001492:	0713      	lsls	r3, r2, #28
 8001494:	bf44      	itt	mi
 8001496:	232b      	movmi	r3, #43	@ 0x2b
 8001498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800149c:	f89a 3000 	ldrb.w	r3, [sl]
 80014a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80014a2:	d015      	beq.n	80014d0 <_vfiprintf_r+0x120>
 80014a4:	9a07      	ldr	r2, [sp, #28]
 80014a6:	4654      	mov	r4, sl
 80014a8:	2000      	movs	r0, #0
 80014aa:	f04f 0c0a 	mov.w	ip, #10
 80014ae:	4621      	mov	r1, r4
 80014b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014b4:	3b30      	subs	r3, #48	@ 0x30
 80014b6:	2b09      	cmp	r3, #9
 80014b8:	d94b      	bls.n	8001552 <_vfiprintf_r+0x1a2>
 80014ba:	b1b0      	cbz	r0, 80014ea <_vfiprintf_r+0x13a>
 80014bc:	9207      	str	r2, [sp, #28]
 80014be:	e014      	b.n	80014ea <_vfiprintf_r+0x13a>
 80014c0:	eba0 0308 	sub.w	r3, r0, r8
 80014c4:	fa09 f303 	lsl.w	r3, r9, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	9304      	str	r3, [sp, #16]
 80014cc:	46a2      	mov	sl, r4
 80014ce:	e7d2      	b.n	8001476 <_vfiprintf_r+0xc6>
 80014d0:	9b03      	ldr	r3, [sp, #12]
 80014d2:	1d19      	adds	r1, r3, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	9103      	str	r1, [sp, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	bfbb      	ittet	lt
 80014dc:	425b      	neglt	r3, r3
 80014de:	f042 0202 	orrlt.w	r2, r2, #2
 80014e2:	9307      	strge	r3, [sp, #28]
 80014e4:	9307      	strlt	r3, [sp, #28]
 80014e6:	bfb8      	it	lt
 80014e8:	9204      	strlt	r2, [sp, #16]
 80014ea:	7823      	ldrb	r3, [r4, #0]
 80014ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80014ee:	d10a      	bne.n	8001506 <_vfiprintf_r+0x156>
 80014f0:	7863      	ldrb	r3, [r4, #1]
 80014f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80014f4:	d132      	bne.n	800155c <_vfiprintf_r+0x1ac>
 80014f6:	9b03      	ldr	r3, [sp, #12]
 80014f8:	1d1a      	adds	r2, r3, #4
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	9203      	str	r2, [sp, #12]
 80014fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001502:	3402      	adds	r4, #2
 8001504:	9305      	str	r3, [sp, #20]
 8001506:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80015dc <_vfiprintf_r+0x22c>
 800150a:	7821      	ldrb	r1, [r4, #0]
 800150c:	2203      	movs	r2, #3
 800150e:	4650      	mov	r0, sl
 8001510:	f7fe fe7e 	bl	8000210 <memchr>
 8001514:	b138      	cbz	r0, 8001526 <_vfiprintf_r+0x176>
 8001516:	9b04      	ldr	r3, [sp, #16]
 8001518:	eba0 000a 	sub.w	r0, r0, sl
 800151c:	2240      	movs	r2, #64	@ 0x40
 800151e:	4082      	lsls	r2, r0
 8001520:	4313      	orrs	r3, r2
 8001522:	3401      	adds	r4, #1
 8001524:	9304      	str	r3, [sp, #16]
 8001526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800152a:	4829      	ldr	r0, [pc, #164]	@ (80015d0 <_vfiprintf_r+0x220>)
 800152c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001530:	2206      	movs	r2, #6
 8001532:	f7fe fe6d 	bl	8000210 <memchr>
 8001536:	2800      	cmp	r0, #0
 8001538:	d03f      	beq.n	80015ba <_vfiprintf_r+0x20a>
 800153a:	4b26      	ldr	r3, [pc, #152]	@ (80015d4 <_vfiprintf_r+0x224>)
 800153c:	bb1b      	cbnz	r3, 8001586 <_vfiprintf_r+0x1d6>
 800153e:	9b03      	ldr	r3, [sp, #12]
 8001540:	3307      	adds	r3, #7
 8001542:	f023 0307 	bic.w	r3, r3, #7
 8001546:	3308      	adds	r3, #8
 8001548:	9303      	str	r3, [sp, #12]
 800154a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800154c:	443b      	add	r3, r7
 800154e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001550:	e76a      	b.n	8001428 <_vfiprintf_r+0x78>
 8001552:	fb0c 3202 	mla	r2, ip, r2, r3
 8001556:	460c      	mov	r4, r1
 8001558:	2001      	movs	r0, #1
 800155a:	e7a8      	b.n	80014ae <_vfiprintf_r+0xfe>
 800155c:	2300      	movs	r3, #0
 800155e:	3401      	adds	r4, #1
 8001560:	9305      	str	r3, [sp, #20]
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 0c0a 	mov.w	ip, #10
 8001568:	4620      	mov	r0, r4
 800156a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800156e:	3a30      	subs	r2, #48	@ 0x30
 8001570:	2a09      	cmp	r2, #9
 8001572:	d903      	bls.n	800157c <_vfiprintf_r+0x1cc>
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0c6      	beq.n	8001506 <_vfiprintf_r+0x156>
 8001578:	9105      	str	r1, [sp, #20]
 800157a:	e7c4      	b.n	8001506 <_vfiprintf_r+0x156>
 800157c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001580:	4604      	mov	r4, r0
 8001582:	2301      	movs	r3, #1
 8001584:	e7f0      	b.n	8001568 <_vfiprintf_r+0x1b8>
 8001586:	ab03      	add	r3, sp, #12
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	462a      	mov	r2, r5
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <_vfiprintf_r+0x228>)
 800158e:	a904      	add	r1, sp, #16
 8001590:	4630      	mov	r0, r6
 8001592:	f3af 8000 	nop.w
 8001596:	4607      	mov	r7, r0
 8001598:	1c78      	adds	r0, r7, #1
 800159a:	d1d6      	bne.n	800154a <_vfiprintf_r+0x19a>
 800159c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800159e:	07d9      	lsls	r1, r3, #31
 80015a0:	d405      	bmi.n	80015ae <_vfiprintf_r+0x1fe>
 80015a2:	89ab      	ldrh	r3, [r5, #12]
 80015a4:	059a      	lsls	r2, r3, #22
 80015a6:	d402      	bmi.n	80015ae <_vfiprintf_r+0x1fe>
 80015a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80015aa:	f7ff fe8b 	bl	80012c4 <__retarget_lock_release_recursive>
 80015ae:	89ab      	ldrh	r3, [r5, #12]
 80015b0:	065b      	lsls	r3, r3, #25
 80015b2:	f53f af1f 	bmi.w	80013f4 <_vfiprintf_r+0x44>
 80015b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80015b8:	e71e      	b.n	80013f8 <_vfiprintf_r+0x48>
 80015ba:	ab03      	add	r3, sp, #12
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	462a      	mov	r2, r5
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <_vfiprintf_r+0x228>)
 80015c2:	a904      	add	r1, sp, #16
 80015c4:	4630      	mov	r0, r6
 80015c6:	f000 f879 	bl	80016bc <_printf_i>
 80015ca:	e7e4      	b.n	8001596 <_vfiprintf_r+0x1e6>
 80015cc:	08001e13 	.word	0x08001e13
 80015d0:	08001e1d 	.word	0x08001e1d
 80015d4:	00000000 	.word	0x00000000
 80015d8:	0800138b 	.word	0x0800138b
 80015dc:	08001e19 	.word	0x08001e19

080015e0 <_printf_common>:
 80015e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015e4:	4616      	mov	r6, r2
 80015e6:	4698      	mov	r8, r3
 80015e8:	688a      	ldr	r2, [r1, #8]
 80015ea:	690b      	ldr	r3, [r1, #16]
 80015ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80015f0:	4293      	cmp	r3, r2
 80015f2:	bfb8      	it	lt
 80015f4:	4613      	movlt	r3, r2
 80015f6:	6033      	str	r3, [r6, #0]
 80015f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80015fc:	4607      	mov	r7, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	b10a      	cbz	r2, 8001606 <_printf_common+0x26>
 8001602:	3301      	adds	r3, #1
 8001604:	6033      	str	r3, [r6, #0]
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	0699      	lsls	r1, r3, #26
 800160a:	bf42      	ittt	mi
 800160c:	6833      	ldrmi	r3, [r6, #0]
 800160e:	3302      	addmi	r3, #2
 8001610:	6033      	strmi	r3, [r6, #0]
 8001612:	6825      	ldr	r5, [r4, #0]
 8001614:	f015 0506 	ands.w	r5, r5, #6
 8001618:	d106      	bne.n	8001628 <_printf_common+0x48>
 800161a:	f104 0a19 	add.w	sl, r4, #25
 800161e:	68e3      	ldr	r3, [r4, #12]
 8001620:	6832      	ldr	r2, [r6, #0]
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	42ab      	cmp	r3, r5
 8001626:	dc26      	bgt.n	8001676 <_printf_common+0x96>
 8001628:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800162c:	6822      	ldr	r2, [r4, #0]
 800162e:	3b00      	subs	r3, #0
 8001630:	bf18      	it	ne
 8001632:	2301      	movne	r3, #1
 8001634:	0692      	lsls	r2, r2, #26
 8001636:	d42b      	bmi.n	8001690 <_printf_common+0xb0>
 8001638:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800163c:	4641      	mov	r1, r8
 800163e:	4638      	mov	r0, r7
 8001640:	47c8      	blx	r9
 8001642:	3001      	adds	r0, #1
 8001644:	d01e      	beq.n	8001684 <_printf_common+0xa4>
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	6922      	ldr	r2, [r4, #16]
 800164a:	f003 0306 	and.w	r3, r3, #6
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf02      	ittt	eq
 8001652:	68e5      	ldreq	r5, [r4, #12]
 8001654:	6833      	ldreq	r3, [r6, #0]
 8001656:	1aed      	subeq	r5, r5, r3
 8001658:	68a3      	ldr	r3, [r4, #8]
 800165a:	bf0c      	ite	eq
 800165c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001660:	2500      	movne	r5, #0
 8001662:	4293      	cmp	r3, r2
 8001664:	bfc4      	itt	gt
 8001666:	1a9b      	subgt	r3, r3, r2
 8001668:	18ed      	addgt	r5, r5, r3
 800166a:	2600      	movs	r6, #0
 800166c:	341a      	adds	r4, #26
 800166e:	42b5      	cmp	r5, r6
 8001670:	d11a      	bne.n	80016a8 <_printf_common+0xc8>
 8001672:	2000      	movs	r0, #0
 8001674:	e008      	b.n	8001688 <_printf_common+0xa8>
 8001676:	2301      	movs	r3, #1
 8001678:	4652      	mov	r2, sl
 800167a:	4641      	mov	r1, r8
 800167c:	4638      	mov	r0, r7
 800167e:	47c8      	blx	r9
 8001680:	3001      	adds	r0, #1
 8001682:	d103      	bne.n	800168c <_printf_common+0xac>
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800168c:	3501      	adds	r5, #1
 800168e:	e7c6      	b.n	800161e <_printf_common+0x3e>
 8001690:	18e1      	adds	r1, r4, r3
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	2030      	movs	r0, #48	@ 0x30
 8001696:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800169a:	4422      	add	r2, r4
 800169c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80016a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80016a4:	3302      	adds	r3, #2
 80016a6:	e7c7      	b.n	8001638 <_printf_common+0x58>
 80016a8:	2301      	movs	r3, #1
 80016aa:	4622      	mov	r2, r4
 80016ac:	4641      	mov	r1, r8
 80016ae:	4638      	mov	r0, r7
 80016b0:	47c8      	blx	r9
 80016b2:	3001      	adds	r0, #1
 80016b4:	d0e6      	beq.n	8001684 <_printf_common+0xa4>
 80016b6:	3601      	adds	r6, #1
 80016b8:	e7d9      	b.n	800166e <_printf_common+0x8e>
	...

080016bc <_printf_i>:
 80016bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016c0:	7e0f      	ldrb	r7, [r1, #24]
 80016c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80016c4:	2f78      	cmp	r7, #120	@ 0x78
 80016c6:	4691      	mov	r9, r2
 80016c8:	4680      	mov	r8, r0
 80016ca:	460c      	mov	r4, r1
 80016cc:	469a      	mov	sl, r3
 80016ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80016d2:	d807      	bhi.n	80016e4 <_printf_i+0x28>
 80016d4:	2f62      	cmp	r7, #98	@ 0x62
 80016d6:	d80a      	bhi.n	80016ee <_printf_i+0x32>
 80016d8:	2f00      	cmp	r7, #0
 80016da:	f000 80d1 	beq.w	8001880 <_printf_i+0x1c4>
 80016de:	2f58      	cmp	r7, #88	@ 0x58
 80016e0:	f000 80b8 	beq.w	8001854 <_printf_i+0x198>
 80016e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80016ec:	e03a      	b.n	8001764 <_printf_i+0xa8>
 80016ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80016f2:	2b15      	cmp	r3, #21
 80016f4:	d8f6      	bhi.n	80016e4 <_printf_i+0x28>
 80016f6:	a101      	add	r1, pc, #4	@ (adr r1, 80016fc <_printf_i+0x40>)
 80016f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016fc:	08001755 	.word	0x08001755
 8001700:	08001769 	.word	0x08001769
 8001704:	080016e5 	.word	0x080016e5
 8001708:	080016e5 	.word	0x080016e5
 800170c:	080016e5 	.word	0x080016e5
 8001710:	080016e5 	.word	0x080016e5
 8001714:	08001769 	.word	0x08001769
 8001718:	080016e5 	.word	0x080016e5
 800171c:	080016e5 	.word	0x080016e5
 8001720:	080016e5 	.word	0x080016e5
 8001724:	080016e5 	.word	0x080016e5
 8001728:	08001867 	.word	0x08001867
 800172c:	08001793 	.word	0x08001793
 8001730:	08001821 	.word	0x08001821
 8001734:	080016e5 	.word	0x080016e5
 8001738:	080016e5 	.word	0x080016e5
 800173c:	08001889 	.word	0x08001889
 8001740:	080016e5 	.word	0x080016e5
 8001744:	08001793 	.word	0x08001793
 8001748:	080016e5 	.word	0x080016e5
 800174c:	080016e5 	.word	0x080016e5
 8001750:	08001829 	.word	0x08001829
 8001754:	6833      	ldr	r3, [r6, #0]
 8001756:	1d1a      	adds	r2, r3, #4
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6032      	str	r2, [r6, #0]
 800175c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001764:	2301      	movs	r3, #1
 8001766:	e09c      	b.n	80018a2 <_printf_i+0x1e6>
 8001768:	6833      	ldr	r3, [r6, #0]
 800176a:	6820      	ldr	r0, [r4, #0]
 800176c:	1d19      	adds	r1, r3, #4
 800176e:	6031      	str	r1, [r6, #0]
 8001770:	0606      	lsls	r6, r0, #24
 8001772:	d501      	bpl.n	8001778 <_printf_i+0xbc>
 8001774:	681d      	ldr	r5, [r3, #0]
 8001776:	e003      	b.n	8001780 <_printf_i+0xc4>
 8001778:	0645      	lsls	r5, r0, #25
 800177a:	d5fb      	bpl.n	8001774 <_printf_i+0xb8>
 800177c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001780:	2d00      	cmp	r5, #0
 8001782:	da03      	bge.n	800178c <_printf_i+0xd0>
 8001784:	232d      	movs	r3, #45	@ 0x2d
 8001786:	426d      	negs	r5, r5
 8001788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800178c:	4858      	ldr	r0, [pc, #352]	@ (80018f0 <_printf_i+0x234>)
 800178e:	230a      	movs	r3, #10
 8001790:	e011      	b.n	80017b6 <_printf_i+0xfa>
 8001792:	6821      	ldr	r1, [r4, #0]
 8001794:	6833      	ldr	r3, [r6, #0]
 8001796:	0608      	lsls	r0, r1, #24
 8001798:	f853 5b04 	ldr.w	r5, [r3], #4
 800179c:	d402      	bmi.n	80017a4 <_printf_i+0xe8>
 800179e:	0649      	lsls	r1, r1, #25
 80017a0:	bf48      	it	mi
 80017a2:	b2ad      	uxthmi	r5, r5
 80017a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80017a6:	4852      	ldr	r0, [pc, #328]	@ (80018f0 <_printf_i+0x234>)
 80017a8:	6033      	str	r3, [r6, #0]
 80017aa:	bf14      	ite	ne
 80017ac:	230a      	movne	r3, #10
 80017ae:	2308      	moveq	r3, #8
 80017b0:	2100      	movs	r1, #0
 80017b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80017b6:	6866      	ldr	r6, [r4, #4]
 80017b8:	60a6      	str	r6, [r4, #8]
 80017ba:	2e00      	cmp	r6, #0
 80017bc:	db05      	blt.n	80017ca <_printf_i+0x10e>
 80017be:	6821      	ldr	r1, [r4, #0]
 80017c0:	432e      	orrs	r6, r5
 80017c2:	f021 0104 	bic.w	r1, r1, #4
 80017c6:	6021      	str	r1, [r4, #0]
 80017c8:	d04b      	beq.n	8001862 <_printf_i+0x1a6>
 80017ca:	4616      	mov	r6, r2
 80017cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80017d0:	fb03 5711 	mls	r7, r3, r1, r5
 80017d4:	5dc7      	ldrb	r7, [r0, r7]
 80017d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80017da:	462f      	mov	r7, r5
 80017dc:	42bb      	cmp	r3, r7
 80017de:	460d      	mov	r5, r1
 80017e0:	d9f4      	bls.n	80017cc <_printf_i+0x110>
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d10b      	bne.n	80017fe <_printf_i+0x142>
 80017e6:	6823      	ldr	r3, [r4, #0]
 80017e8:	07df      	lsls	r7, r3, #31
 80017ea:	d508      	bpl.n	80017fe <_printf_i+0x142>
 80017ec:	6923      	ldr	r3, [r4, #16]
 80017ee:	6861      	ldr	r1, [r4, #4]
 80017f0:	4299      	cmp	r1, r3
 80017f2:	bfde      	ittt	le
 80017f4:	2330      	movle	r3, #48	@ 0x30
 80017f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80017fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80017fe:	1b92      	subs	r2, r2, r6
 8001800:	6122      	str	r2, [r4, #16]
 8001802:	f8cd a000 	str.w	sl, [sp]
 8001806:	464b      	mov	r3, r9
 8001808:	aa03      	add	r2, sp, #12
 800180a:	4621      	mov	r1, r4
 800180c:	4640      	mov	r0, r8
 800180e:	f7ff fee7 	bl	80015e0 <_printf_common>
 8001812:	3001      	adds	r0, #1
 8001814:	d14a      	bne.n	80018ac <_printf_i+0x1f0>
 8001816:	f04f 30ff 	mov.w	r0, #4294967295
 800181a:	b004      	add	sp, #16
 800181c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	f043 0320 	orr.w	r3, r3, #32
 8001826:	6023      	str	r3, [r4, #0]
 8001828:	4832      	ldr	r0, [pc, #200]	@ (80018f4 <_printf_i+0x238>)
 800182a:	2778      	movs	r7, #120	@ 0x78
 800182c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	6831      	ldr	r1, [r6, #0]
 8001834:	061f      	lsls	r7, r3, #24
 8001836:	f851 5b04 	ldr.w	r5, [r1], #4
 800183a:	d402      	bmi.n	8001842 <_printf_i+0x186>
 800183c:	065f      	lsls	r7, r3, #25
 800183e:	bf48      	it	mi
 8001840:	b2ad      	uxthmi	r5, r5
 8001842:	6031      	str	r1, [r6, #0]
 8001844:	07d9      	lsls	r1, r3, #31
 8001846:	bf44      	itt	mi
 8001848:	f043 0320 	orrmi.w	r3, r3, #32
 800184c:	6023      	strmi	r3, [r4, #0]
 800184e:	b11d      	cbz	r5, 8001858 <_printf_i+0x19c>
 8001850:	2310      	movs	r3, #16
 8001852:	e7ad      	b.n	80017b0 <_printf_i+0xf4>
 8001854:	4826      	ldr	r0, [pc, #152]	@ (80018f0 <_printf_i+0x234>)
 8001856:	e7e9      	b.n	800182c <_printf_i+0x170>
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	f023 0320 	bic.w	r3, r3, #32
 800185e:	6023      	str	r3, [r4, #0]
 8001860:	e7f6      	b.n	8001850 <_printf_i+0x194>
 8001862:	4616      	mov	r6, r2
 8001864:	e7bd      	b.n	80017e2 <_printf_i+0x126>
 8001866:	6833      	ldr	r3, [r6, #0]
 8001868:	6825      	ldr	r5, [r4, #0]
 800186a:	6961      	ldr	r1, [r4, #20]
 800186c:	1d18      	adds	r0, r3, #4
 800186e:	6030      	str	r0, [r6, #0]
 8001870:	062e      	lsls	r6, r5, #24
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	d501      	bpl.n	800187a <_printf_i+0x1be>
 8001876:	6019      	str	r1, [r3, #0]
 8001878:	e002      	b.n	8001880 <_printf_i+0x1c4>
 800187a:	0668      	lsls	r0, r5, #25
 800187c:	d5fb      	bpl.n	8001876 <_printf_i+0x1ba>
 800187e:	8019      	strh	r1, [r3, #0]
 8001880:	2300      	movs	r3, #0
 8001882:	6123      	str	r3, [r4, #16]
 8001884:	4616      	mov	r6, r2
 8001886:	e7bc      	b.n	8001802 <_printf_i+0x146>
 8001888:	6833      	ldr	r3, [r6, #0]
 800188a:	1d1a      	adds	r2, r3, #4
 800188c:	6032      	str	r2, [r6, #0]
 800188e:	681e      	ldr	r6, [r3, #0]
 8001890:	6862      	ldr	r2, [r4, #4]
 8001892:	2100      	movs	r1, #0
 8001894:	4630      	mov	r0, r6
 8001896:	f7fe fcbb 	bl	8000210 <memchr>
 800189a:	b108      	cbz	r0, 80018a0 <_printf_i+0x1e4>
 800189c:	1b80      	subs	r0, r0, r6
 800189e:	6060      	str	r0, [r4, #4]
 80018a0:	6863      	ldr	r3, [r4, #4]
 80018a2:	6123      	str	r3, [r4, #16]
 80018a4:	2300      	movs	r3, #0
 80018a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80018aa:	e7aa      	b.n	8001802 <_printf_i+0x146>
 80018ac:	6923      	ldr	r3, [r4, #16]
 80018ae:	4632      	mov	r2, r6
 80018b0:	4649      	mov	r1, r9
 80018b2:	4640      	mov	r0, r8
 80018b4:	47d0      	blx	sl
 80018b6:	3001      	adds	r0, #1
 80018b8:	d0ad      	beq.n	8001816 <_printf_i+0x15a>
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	079b      	lsls	r3, r3, #30
 80018be:	d413      	bmi.n	80018e8 <_printf_i+0x22c>
 80018c0:	68e0      	ldr	r0, [r4, #12]
 80018c2:	9b03      	ldr	r3, [sp, #12]
 80018c4:	4298      	cmp	r0, r3
 80018c6:	bfb8      	it	lt
 80018c8:	4618      	movlt	r0, r3
 80018ca:	e7a6      	b.n	800181a <_printf_i+0x15e>
 80018cc:	2301      	movs	r3, #1
 80018ce:	4632      	mov	r2, r6
 80018d0:	4649      	mov	r1, r9
 80018d2:	4640      	mov	r0, r8
 80018d4:	47d0      	blx	sl
 80018d6:	3001      	adds	r0, #1
 80018d8:	d09d      	beq.n	8001816 <_printf_i+0x15a>
 80018da:	3501      	adds	r5, #1
 80018dc:	68e3      	ldr	r3, [r4, #12]
 80018de:	9903      	ldr	r1, [sp, #12]
 80018e0:	1a5b      	subs	r3, r3, r1
 80018e2:	42ab      	cmp	r3, r5
 80018e4:	dcf2      	bgt.n	80018cc <_printf_i+0x210>
 80018e6:	e7eb      	b.n	80018c0 <_printf_i+0x204>
 80018e8:	2500      	movs	r5, #0
 80018ea:	f104 0619 	add.w	r6, r4, #25
 80018ee:	e7f5      	b.n	80018dc <_printf_i+0x220>
 80018f0:	08001e24 	.word	0x08001e24
 80018f4:	08001e35 	.word	0x08001e35

080018f8 <__sflush_r>:
 80018f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001900:	0716      	lsls	r6, r2, #28
 8001902:	4605      	mov	r5, r0
 8001904:	460c      	mov	r4, r1
 8001906:	d454      	bmi.n	80019b2 <__sflush_r+0xba>
 8001908:	684b      	ldr	r3, [r1, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	dc02      	bgt.n	8001914 <__sflush_r+0x1c>
 800190e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001910:	2b00      	cmp	r3, #0
 8001912:	dd48      	ble.n	80019a6 <__sflush_r+0xae>
 8001914:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001916:	2e00      	cmp	r6, #0
 8001918:	d045      	beq.n	80019a6 <__sflush_r+0xae>
 800191a:	2300      	movs	r3, #0
 800191c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001920:	682f      	ldr	r7, [r5, #0]
 8001922:	6a21      	ldr	r1, [r4, #32]
 8001924:	602b      	str	r3, [r5, #0]
 8001926:	d030      	beq.n	800198a <__sflush_r+0x92>
 8001928:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800192a:	89a3      	ldrh	r3, [r4, #12]
 800192c:	0759      	lsls	r1, r3, #29
 800192e:	d505      	bpl.n	800193c <__sflush_r+0x44>
 8001930:	6863      	ldr	r3, [r4, #4]
 8001932:	1ad2      	subs	r2, r2, r3
 8001934:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001936:	b10b      	cbz	r3, 800193c <__sflush_r+0x44>
 8001938:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800193a:	1ad2      	subs	r2, r2, r3
 800193c:	2300      	movs	r3, #0
 800193e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001940:	6a21      	ldr	r1, [r4, #32]
 8001942:	4628      	mov	r0, r5
 8001944:	47b0      	blx	r6
 8001946:	1c43      	adds	r3, r0, #1
 8001948:	89a3      	ldrh	r3, [r4, #12]
 800194a:	d106      	bne.n	800195a <__sflush_r+0x62>
 800194c:	6829      	ldr	r1, [r5, #0]
 800194e:	291d      	cmp	r1, #29
 8001950:	d82b      	bhi.n	80019aa <__sflush_r+0xb2>
 8001952:	4a2a      	ldr	r2, [pc, #168]	@ (80019fc <__sflush_r+0x104>)
 8001954:	40ca      	lsrs	r2, r1
 8001956:	07d6      	lsls	r6, r2, #31
 8001958:	d527      	bpl.n	80019aa <__sflush_r+0xb2>
 800195a:	2200      	movs	r2, #0
 800195c:	6062      	str	r2, [r4, #4]
 800195e:	04d9      	lsls	r1, r3, #19
 8001960:	6922      	ldr	r2, [r4, #16]
 8001962:	6022      	str	r2, [r4, #0]
 8001964:	d504      	bpl.n	8001970 <__sflush_r+0x78>
 8001966:	1c42      	adds	r2, r0, #1
 8001968:	d101      	bne.n	800196e <__sflush_r+0x76>
 800196a:	682b      	ldr	r3, [r5, #0]
 800196c:	b903      	cbnz	r3, 8001970 <__sflush_r+0x78>
 800196e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001972:	602f      	str	r7, [r5, #0]
 8001974:	b1b9      	cbz	r1, 80019a6 <__sflush_r+0xae>
 8001976:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800197a:	4299      	cmp	r1, r3
 800197c:	d002      	beq.n	8001984 <__sflush_r+0x8c>
 800197e:	4628      	mov	r0, r5
 8001980:	f7ff fca2 	bl	80012c8 <_free_r>
 8001984:	2300      	movs	r3, #0
 8001986:	6363      	str	r3, [r4, #52]	@ 0x34
 8001988:	e00d      	b.n	80019a6 <__sflush_r+0xae>
 800198a:	2301      	movs	r3, #1
 800198c:	4628      	mov	r0, r5
 800198e:	47b0      	blx	r6
 8001990:	4602      	mov	r2, r0
 8001992:	1c50      	adds	r0, r2, #1
 8001994:	d1c9      	bne.n	800192a <__sflush_r+0x32>
 8001996:	682b      	ldr	r3, [r5, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0c6      	beq.n	800192a <__sflush_r+0x32>
 800199c:	2b1d      	cmp	r3, #29
 800199e:	d001      	beq.n	80019a4 <__sflush_r+0xac>
 80019a0:	2b16      	cmp	r3, #22
 80019a2:	d11e      	bne.n	80019e2 <__sflush_r+0xea>
 80019a4:	602f      	str	r7, [r5, #0]
 80019a6:	2000      	movs	r0, #0
 80019a8:	e022      	b.n	80019f0 <__sflush_r+0xf8>
 80019aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	e01b      	b.n	80019ea <__sflush_r+0xf2>
 80019b2:	690f      	ldr	r7, [r1, #16]
 80019b4:	2f00      	cmp	r7, #0
 80019b6:	d0f6      	beq.n	80019a6 <__sflush_r+0xae>
 80019b8:	0793      	lsls	r3, r2, #30
 80019ba:	680e      	ldr	r6, [r1, #0]
 80019bc:	bf08      	it	eq
 80019be:	694b      	ldreq	r3, [r1, #20]
 80019c0:	600f      	str	r7, [r1, #0]
 80019c2:	bf18      	it	ne
 80019c4:	2300      	movne	r3, #0
 80019c6:	eba6 0807 	sub.w	r8, r6, r7
 80019ca:	608b      	str	r3, [r1, #8]
 80019cc:	f1b8 0f00 	cmp.w	r8, #0
 80019d0:	dde9      	ble.n	80019a6 <__sflush_r+0xae>
 80019d2:	6a21      	ldr	r1, [r4, #32]
 80019d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80019d6:	4643      	mov	r3, r8
 80019d8:	463a      	mov	r2, r7
 80019da:	4628      	mov	r0, r5
 80019dc:	47b0      	blx	r6
 80019de:	2800      	cmp	r0, #0
 80019e0:	dc08      	bgt.n	80019f4 <__sflush_r+0xfc>
 80019e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019ea:	81a3      	strh	r3, [r4, #12]
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019f4:	4407      	add	r7, r0
 80019f6:	eba8 0800 	sub.w	r8, r8, r0
 80019fa:	e7e7      	b.n	80019cc <__sflush_r+0xd4>
 80019fc:	20400001 	.word	0x20400001

08001a00 <_fflush_r>:
 8001a00:	b538      	push	{r3, r4, r5, lr}
 8001a02:	690b      	ldr	r3, [r1, #16]
 8001a04:	4605      	mov	r5, r0
 8001a06:	460c      	mov	r4, r1
 8001a08:	b913      	cbnz	r3, 8001a10 <_fflush_r+0x10>
 8001a0a:	2500      	movs	r5, #0
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	bd38      	pop	{r3, r4, r5, pc}
 8001a10:	b118      	cbz	r0, 8001a1a <_fflush_r+0x1a>
 8001a12:	6a03      	ldr	r3, [r0, #32]
 8001a14:	b90b      	cbnz	r3, 8001a1a <_fflush_r+0x1a>
 8001a16:	f7ff fa45 	bl	8000ea4 <__sinit>
 8001a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f3      	beq.n	8001a0a <_fflush_r+0xa>
 8001a22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001a24:	07d0      	lsls	r0, r2, #31
 8001a26:	d404      	bmi.n	8001a32 <_fflush_r+0x32>
 8001a28:	0599      	lsls	r1, r3, #22
 8001a2a:	d402      	bmi.n	8001a32 <_fflush_r+0x32>
 8001a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a2e:	f7ff fc48 	bl	80012c2 <__retarget_lock_acquire_recursive>
 8001a32:	4628      	mov	r0, r5
 8001a34:	4621      	mov	r1, r4
 8001a36:	f7ff ff5f 	bl	80018f8 <__sflush_r>
 8001a3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001a3c:	07da      	lsls	r2, r3, #31
 8001a3e:	4605      	mov	r5, r0
 8001a40:	d4e4      	bmi.n	8001a0c <_fflush_r+0xc>
 8001a42:	89a3      	ldrh	r3, [r4, #12]
 8001a44:	059b      	lsls	r3, r3, #22
 8001a46:	d4e1      	bmi.n	8001a0c <_fflush_r+0xc>
 8001a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a4a:	f7ff fc3b 	bl	80012c4 <__retarget_lock_release_recursive>
 8001a4e:	e7dd      	b.n	8001a0c <_fflush_r+0xc>

08001a50 <__swhatbuf_r>:
 8001a50:	b570      	push	{r4, r5, r6, lr}
 8001a52:	460c      	mov	r4, r1
 8001a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a58:	2900      	cmp	r1, #0
 8001a5a:	b096      	sub	sp, #88	@ 0x58
 8001a5c:	4615      	mov	r5, r2
 8001a5e:	461e      	mov	r6, r3
 8001a60:	da0d      	bge.n	8001a7e <__swhatbuf_r+0x2e>
 8001a62:	89a3      	ldrh	r3, [r4, #12]
 8001a64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a68:	f04f 0100 	mov.w	r1, #0
 8001a6c:	bf14      	ite	ne
 8001a6e:	2340      	movne	r3, #64	@ 0x40
 8001a70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001a74:	2000      	movs	r0, #0
 8001a76:	6031      	str	r1, [r6, #0]
 8001a78:	602b      	str	r3, [r5, #0]
 8001a7a:	b016      	add	sp, #88	@ 0x58
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
 8001a7e:	466a      	mov	r2, sp
 8001a80:	f000 f87c 	bl	8001b7c <_fstat_r>
 8001a84:	2800      	cmp	r0, #0
 8001a86:	dbec      	blt.n	8001a62 <__swhatbuf_r+0x12>
 8001a88:	9901      	ldr	r1, [sp, #4]
 8001a8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001a8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001a92:	4259      	negs	r1, r3
 8001a94:	4159      	adcs	r1, r3
 8001a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a9a:	e7eb      	b.n	8001a74 <__swhatbuf_r+0x24>

08001a9c <__smakebuf_r>:
 8001a9c:	898b      	ldrh	r3, [r1, #12]
 8001a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001aa0:	079d      	lsls	r5, r3, #30
 8001aa2:	4606      	mov	r6, r0
 8001aa4:	460c      	mov	r4, r1
 8001aa6:	d507      	bpl.n	8001ab8 <__smakebuf_r+0x1c>
 8001aa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001aac:	6023      	str	r3, [r4, #0]
 8001aae:	6123      	str	r3, [r4, #16]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	6163      	str	r3, [r4, #20]
 8001ab4:	b003      	add	sp, #12
 8001ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab8:	ab01      	add	r3, sp, #4
 8001aba:	466a      	mov	r2, sp
 8001abc:	f7ff ffc8 	bl	8001a50 <__swhatbuf_r>
 8001ac0:	9f00      	ldr	r7, [sp, #0]
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	4639      	mov	r1, r7
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f7ff f8d4 	bl	8000c74 <_malloc_r>
 8001acc:	b948      	cbnz	r0, 8001ae2 <__smakebuf_r+0x46>
 8001ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ad2:	059a      	lsls	r2, r3, #22
 8001ad4:	d4ee      	bmi.n	8001ab4 <__smakebuf_r+0x18>
 8001ad6:	f023 0303 	bic.w	r3, r3, #3
 8001ada:	f043 0302 	orr.w	r3, r3, #2
 8001ade:	81a3      	strh	r3, [r4, #12]
 8001ae0:	e7e2      	b.n	8001aa8 <__smakebuf_r+0xc>
 8001ae2:	89a3      	ldrh	r3, [r4, #12]
 8001ae4:	6020      	str	r0, [r4, #0]
 8001ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aea:	81a3      	strh	r3, [r4, #12]
 8001aec:	9b01      	ldr	r3, [sp, #4]
 8001aee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001af2:	b15b      	cbz	r3, 8001b0c <__smakebuf_r+0x70>
 8001af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001af8:	4630      	mov	r0, r6
 8001afa:	f000 f851 	bl	8001ba0 <_isatty_r>
 8001afe:	b128      	cbz	r0, 8001b0c <__smakebuf_r+0x70>
 8001b00:	89a3      	ldrh	r3, [r4, #12]
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	81a3      	strh	r3, [r4, #12]
 8001b0c:	89a3      	ldrh	r3, [r4, #12]
 8001b0e:	431d      	orrs	r5, r3
 8001b10:	81a5      	strh	r5, [r4, #12]
 8001b12:	e7cf      	b.n	8001ab4 <__smakebuf_r+0x18>

08001b14 <_putc_r>:
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	460d      	mov	r5, r1
 8001b18:	4614      	mov	r4, r2
 8001b1a:	4606      	mov	r6, r0
 8001b1c:	b118      	cbz	r0, 8001b26 <_putc_r+0x12>
 8001b1e:	6a03      	ldr	r3, [r0, #32]
 8001b20:	b90b      	cbnz	r3, 8001b26 <_putc_r+0x12>
 8001b22:	f7ff f9bf 	bl	8000ea4 <__sinit>
 8001b26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b28:	07d8      	lsls	r0, r3, #31
 8001b2a:	d405      	bmi.n	8001b38 <_putc_r+0x24>
 8001b2c:	89a3      	ldrh	r3, [r4, #12]
 8001b2e:	0599      	lsls	r1, r3, #22
 8001b30:	d402      	bmi.n	8001b38 <_putc_r+0x24>
 8001b32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b34:	f7ff fbc5 	bl	80012c2 <__retarget_lock_acquire_recursive>
 8001b38:	68a3      	ldr	r3, [r4, #8]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	60a3      	str	r3, [r4, #8]
 8001b40:	da05      	bge.n	8001b4e <_putc_r+0x3a>
 8001b42:	69a2      	ldr	r2, [r4, #24]
 8001b44:	4293      	cmp	r3, r2
 8001b46:	db12      	blt.n	8001b6e <_putc_r+0x5a>
 8001b48:	b2eb      	uxtb	r3, r5
 8001b4a:	2b0a      	cmp	r3, #10
 8001b4c:	d00f      	beq.n	8001b6e <_putc_r+0x5a>
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	6022      	str	r2, [r4, #0]
 8001b54:	701d      	strb	r5, [r3, #0]
 8001b56:	b2ed      	uxtb	r5, r5
 8001b58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b5a:	07da      	lsls	r2, r3, #31
 8001b5c:	d405      	bmi.n	8001b6a <_putc_r+0x56>
 8001b5e:	89a3      	ldrh	r3, [r4, #12]
 8001b60:	059b      	lsls	r3, r3, #22
 8001b62:	d402      	bmi.n	8001b6a <_putc_r+0x56>
 8001b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b66:	f7ff fbad 	bl	80012c4 <__retarget_lock_release_recursive>
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	bd70      	pop	{r4, r5, r6, pc}
 8001b6e:	4629      	mov	r1, r5
 8001b70:	4622      	mov	r2, r4
 8001b72:	4630      	mov	r0, r6
 8001b74:	f7ff fa87 	bl	8001086 <__swbuf_r>
 8001b78:	4605      	mov	r5, r0
 8001b7a:	e7ed      	b.n	8001b58 <_putc_r+0x44>

08001b7c <_fstat_r>:
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	4d07      	ldr	r5, [pc, #28]	@ (8001b9c <_fstat_r+0x20>)
 8001b80:	2300      	movs	r3, #0
 8001b82:	4604      	mov	r4, r0
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	602b      	str	r3, [r5, #0]
 8001b8a:	f7fe feac 	bl	80008e6 <_fstat>
 8001b8e:	1c43      	adds	r3, r0, #1
 8001b90:	d102      	bne.n	8001b98 <_fstat_r+0x1c>
 8001b92:	682b      	ldr	r3, [r5, #0]
 8001b94:	b103      	cbz	r3, 8001b98 <_fstat_r+0x1c>
 8001b96:	6023      	str	r3, [r4, #0]
 8001b98:	bd38      	pop	{r3, r4, r5, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200001cc 	.word	0x200001cc

08001ba0 <_isatty_r>:
 8001ba0:	b538      	push	{r3, r4, r5, lr}
 8001ba2:	4d06      	ldr	r5, [pc, #24]	@ (8001bbc <_isatty_r+0x1c>)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	4608      	mov	r0, r1
 8001baa:	602b      	str	r3, [r5, #0]
 8001bac:	f7fe feab 	bl	8000906 <_isatty>
 8001bb0:	1c43      	adds	r3, r0, #1
 8001bb2:	d102      	bne.n	8001bba <_isatty_r+0x1a>
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	b103      	cbz	r3, 8001bba <_isatty_r+0x1a>
 8001bb8:	6023      	str	r3, [r4, #0]
 8001bba:	bd38      	pop	{r3, r4, r5, pc}
 8001bbc:	200001cc 	.word	0x200001cc

08001bc0 <_init>:
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	bf00      	nop
 8001bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc6:	bc08      	pop	{r3}
 8001bc8:	469e      	mov	lr, r3
 8001bca:	4770      	bx	lr

08001bcc <_fini>:
 8001bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bce:	bf00      	nop
 8001bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bd2:	bc08      	pop	{r3}
 8001bd4:	469e      	mov	lr, r3
 8001bd6:	4770      	bx	lr
